use std::fs::{self};

use simulator::data_for_market_based_plan_param_values::DataForMarketBasedPlanParamValues;
use simulator::plan_params::PlanParams;
use typescript_type_def::{write_definition_file, DefinitionFileOptions};

// FEATURE: Type to make this happen with wasm-pack and output into simulator package
pub fn cli_generate_typescript() {
    type RT = (PlanParams, DataForMarketBasedPlanParamValues);

    let ts_module = {
        let mut buf = Vec::new();
        let options = DefinitionFileOptions {
            header: Some(
                r#"// This file is autogenerated from Rust types.
import { PlanParams } from '@tpaw/common'
;(
  rs: {
    planParams: RustAPI.PlanParams
  },
  ts: {
    planParams: PlanParams
  },
) => {
  ts.planParams = rs.planParams
  rs.planParams = ts.planParams
}
"#,
            ),
            root_namespace: Some("RustAPI"),
        };

        write_definition_file::<_, RT>(&mut buf, options).unwrap();
        String::from_utf8(buf).unwrap()
    };

    fs::write("../web/src/RustAPI.ts", ts_module).expect("Unable to write file")
}
