// Auto-generated by build.rs. Do not modify directly. Modify the .template file instead.

// Using proto2 because the absence of required fields in proto3 is painful.
syntax = "proto2";

package wire;

import "wire_market_data_for_presets_processed.proto";
import "wire_common.proto";

message WireAmountTimedProcessedSingle {
    required string id = 1;
    repeated int64 values_x100 = 2;
}
message WireAmountTimedProcessedGroup {
    repeated int64 total_x100 = 1;
    repeated WireAmountTimedProcessedSingle by_id = 2;
}

message WireAmountTimedProcessed {
   required WireAmountTimedProcessedGroup wealth_income_during_retirement= 1;
   required WireAmountTimedProcessedGroup wealth_future_savings= 2;
   required WireAmountTimedProcessedGroup extra_expenses_essential= 3;
   required WireAmountTimedProcessedGroup extra_expenses_discretionary= 4;
}


// ---- HISTORICAL RETURNS ----
message WireHistoricalMonthlyLogReturnsAdjustedStats {
    required WireStats log = 1;
    required WireLogAndNonLogStats annualized = 2;
}

message WireHistoricalMonthlyLogReturnsAdjustedInfoArgs {
    required double empirical_annual_non_log_expected_return = 1;
    required double empirical_annual_log_variance = 2;
}

message WireHistoricalMonthlyLogReturnsAdjustedInfo {
    required WireHistoricalMonthlyLogReturnsAdjustedStats stats = 1;
    required WireHistoricalMonthlyLogReturnsAdjustedInfoArgs args = 2;
    required WireLogAndNonLogStats src_annualized_stats = 3;
}

message WireHistoricalReturnsProcessed {
  required WireMonthRange month_range = 1;
  required WireHistoricalMonthlyLogReturnsAdjustedInfo stocks = 2;
  required WireHistoricalMonthlyLogReturnsAdjustedInfo bonds = 3;
}

// ---- RETURN STATS FOR PLANNING ----
message WireReturnsStatsForPlanningProcessedPart {
    required double empirical_annual_non_log_expected_return = 1;
    required double empirical_annual_log_variance = 2;
}

message WireReturnsStatsForPlanningProcessed {
    required WireReturnsStatsForPlanningProcessedPart stocks = 1;
    required WireReturnsStatsForPlanningProcessedPart bonds = 2;
}

// ---- ADJUSTMENTS TO SPENDING ----

message WireAdjustmentsToSpendingProcessedTpawAndSpawLegacy {
    required double external = 1;
    required double target = 2;
}
message WireAdjustmentsToSpendingProcessedTpawAndSpaw {
    required WireAdjustmentsToSpendingProcessedTpawAndSpawLegacy legacy = 1;
}

message WireAdjustmentsToSpendingProcessed {
    required WireAdjustmentsToSpendingProcessedTpawAndSpaw tpaw_and_spaw = 1;
}

// ---- RISK ----
// Note: Verified that infinity works over the wire.
message WireRiskProcessedTpaw {
    repeated double risk_tolerance_by_mfn = 1;
    required double rra_unclamped_at_20_including_pos_infinity = 2;
    repeated double rra_unclamped_including_pos_infinity_by_mfn = 3;
    required double legacy_rra_including_pos_infinity = 4;
}


message WireRiskProcessed {
    required WireRiskProcessedTpaw tpaw = 1;
}


// ---- PLAN PARAMS PROCESSED ----
message WirePlanParamsProcessed {
    required WireMarketDataForPresetsProcessed market_data_for_presets = 1;
    required WireReturnsStatsForPlanningProcessed returns_stats_for_planning = 2;
    required WireHistoricalReturnsProcessed historical_returns = 3;
    required WireAmountTimedProcessed amount_timed = 4;
    required WireAdjustmentsToSpendingProcessed adjustments_to_spending = 5;
    required WireRiskProcessed risk = 6;
    required double annual_inflation = 7;
}
