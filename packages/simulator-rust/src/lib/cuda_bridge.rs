/* automatically generated by rust-bindgen 0.72.1 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HistoricalReturnsCuda {
    pub stocks: HistoricalReturnsCuda_Part,
    pub bonds: HistoricalReturnsCuda_Part,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HistoricalReturnsCuda_Part {
    pub returns: f32,
    pub expected_return_change: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HistoricalReturnsCuda_Part"]
        [::std::mem::size_of::<HistoricalReturnsCuda_Part>() - 8usize];
    ["Alignment of HistoricalReturnsCuda_Part"]
        [::std::mem::align_of::<HistoricalReturnsCuda_Part>() - 4usize];
    ["Offset of field: HistoricalReturnsCuda_Part::returns"]
        [::std::mem::offset_of!(HistoricalReturnsCuda_Part, returns) - 0usize];
    ["Offset of field: HistoricalReturnsCuda_Part::expected_return_change"]
        [::std::mem::offset_of!(HistoricalReturnsCuda_Part, expected_return_change) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HistoricalReturnsCuda"][::std::mem::size_of::<HistoricalReturnsCuda>() - 16usize];
    ["Alignment of HistoricalReturnsCuda"]
        [::std::mem::align_of::<HistoricalReturnsCuda>() - 4usize];
    ["Offset of field: HistoricalReturnsCuda::stocks"]
        [::std::mem::offset_of!(HistoricalReturnsCuda, stocks) - 0usize];
    ["Offset of field: HistoricalReturnsCuda::bonds"]
        [::std::mem::offset_of!(HistoricalReturnsCuda, bonds) - 8usize];
};
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OptCURRENCY {
    pub is_set: u32,
    pub opt_value: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OptCURRENCY"][::std::mem::size_of::<OptCURRENCY>() - 16usize];
    ["Alignment of OptCURRENCY"][::std::mem::align_of::<OptCURRENCY>() - 8usize];
    ["Offset of field: OptCURRENCY::is_set"][::std::mem::offset_of!(OptCURRENCY, is_set) - 0usize];
    ["Offset of field: OptCURRENCY::opt_value"]
        [::std::mem::offset_of!(OptCURRENCY, opt_value) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StocksAndBondsFLOAT {
    pub stocks: f32,
    pub bonds: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of StocksAndBondsFLOAT"][::std::mem::size_of::<StocksAndBondsFLOAT>() - 8usize];
    ["Alignment of StocksAndBondsFLOAT"][::std::mem::align_of::<StocksAndBondsFLOAT>() - 4usize];
    ["Offset of field: StocksAndBondsFLOAT::stocks"]
        [::std::mem::offset_of!(StocksAndBondsFLOAT, stocks) - 0usize];
    ["Offset of field: StocksAndBondsFLOAT::bonds"]
        [::std::mem::offset_of!(StocksAndBondsFLOAT, bonds) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PlanParamsCuda {
    pub ages: PlanParamsCuda_Ages,
    pub adjustments_to_spending: PlanParamsCuda_AdjustmentsToSpending,
    pub risk: PlanParamsCuda_Risk,
    pub advanced: PlanParamsCuda_Advanced,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PlanParamsCuda_Ages {
    pub simulation_months: PlanParamsCuda_Ages_SimulationMonths,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PlanParamsCuda_Ages_SimulationMonths {
    pub num_months: u32,
    pub withdrawal_start_month: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PlanParamsCuda_Ages_SimulationMonths"]
        [::std::mem::size_of::<PlanParamsCuda_Ages_SimulationMonths>() - 8usize];
    ["Alignment of PlanParamsCuda_Ages_SimulationMonths"]
        [::std::mem::align_of::<PlanParamsCuda_Ages_SimulationMonths>() - 4usize];
    ["Offset of field: PlanParamsCuda_Ages_SimulationMonths::num_months"]
        [::std::mem::offset_of!(PlanParamsCuda_Ages_SimulationMonths, num_months) - 0usize];
    ["Offset of field: PlanParamsCuda_Ages_SimulationMonths::withdrawal_start_month"][::std::mem::offset_of!(
        PlanParamsCuda_Ages_SimulationMonths,
        withdrawal_start_month
    ) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PlanParamsCuda_Ages"][::std::mem::size_of::<PlanParamsCuda_Ages>() - 8usize];
    ["Alignment of PlanParamsCuda_Ages"][::std::mem::align_of::<PlanParamsCuda_Ages>() - 4usize];
    ["Offset of field: PlanParamsCuda_Ages::simulation_months"]
        [::std::mem::offset_of!(PlanParamsCuda_Ages, simulation_months) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PlanParamsCuda_AdjustmentsToSpending {
    pub tpaw_and_spaw: PlanParamsCuda_AdjustmentsToSpending_TPAWAndSPAW,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PlanParamsCuda_AdjustmentsToSpending_TPAWAndSPAW {
    pub spending_ceiling: OptCURRENCY,
    pub spending_floor: OptCURRENCY,
    pub legacy: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PlanParamsCuda_AdjustmentsToSpending_TPAWAndSPAW"]
        [::std::mem::size_of::<PlanParamsCuda_AdjustmentsToSpending_TPAWAndSPAW>() - 40usize];
    ["Alignment of PlanParamsCuda_AdjustmentsToSpending_TPAWAndSPAW"]
        [::std::mem::align_of::<PlanParamsCuda_AdjustmentsToSpending_TPAWAndSPAW>() - 8usize];
    ["Offset of field: PlanParamsCuda_AdjustmentsToSpending_TPAWAndSPAW::spending_ceiling"][::std::mem::offset_of!(
        PlanParamsCuda_AdjustmentsToSpending_TPAWAndSPAW,
        spending_ceiling
    )
        - 0usize];
    ["Offset of field: PlanParamsCuda_AdjustmentsToSpending_TPAWAndSPAW::spending_floor"][::std::mem::offset_of!(
        PlanParamsCuda_AdjustmentsToSpending_TPAWAndSPAW,
        spending_floor
    )
        - 16usize];
    ["Offset of field: PlanParamsCuda_AdjustmentsToSpending_TPAWAndSPAW::legacy"][::std::mem::offset_of!(
        PlanParamsCuda_AdjustmentsToSpending_TPAWAndSPAW,
        legacy
    ) - 32usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PlanParamsCuda_AdjustmentsToSpending"]
        [::std::mem::size_of::<PlanParamsCuda_AdjustmentsToSpending>() - 40usize];
    ["Alignment of PlanParamsCuda_AdjustmentsToSpending"]
        [::std::mem::align_of::<PlanParamsCuda_AdjustmentsToSpending>() - 8usize];
    ["Offset of field: PlanParamsCuda_AdjustmentsToSpending::tpaw_and_spaw"]
        [::std::mem::offset_of!(PlanParamsCuda_AdjustmentsToSpending, tpaw_and_spaw) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PlanParamsCuda_Risk {
    pub tpaw: PlanParamsCuda_Risk_TPAW,
    pub swr: PlanParamsCuda_Risk_SWR,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PlanParamsCuda_Risk_TPAW {
    pub time_preference: f32,
    pub annual_additional_spending_tilt: f32,
    pub legacy_rra_including_pos_infinity: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PlanParamsCuda_Risk_TPAW"]
        [::std::mem::size_of::<PlanParamsCuda_Risk_TPAW>() - 12usize];
    ["Alignment of PlanParamsCuda_Risk_TPAW"]
        [::std::mem::align_of::<PlanParamsCuda_Risk_TPAW>() - 4usize];
    ["Offset of field: PlanParamsCuda_Risk_TPAW::time_preference"]
        [::std::mem::offset_of!(PlanParamsCuda_Risk_TPAW, time_preference) - 0usize];
    ["Offset of field: PlanParamsCuda_Risk_TPAW::annual_additional_spending_tilt"][::std::mem::offset_of!(
        PlanParamsCuda_Risk_TPAW,
        annual_additional_spending_tilt
    ) - 4usize];
    ["Offset of field: PlanParamsCuda_Risk_TPAW::legacy_rra_including_pos_infinity"][::std::mem::offset_of!(
        PlanParamsCuda_Risk_TPAW,
        legacy_rra_including_pos_infinity
    ) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PlanParamsCuda_Risk_SWR {
    pub withdrawal_type: PlanParamsCuda_Risk_SWR_WithdrawalType,
    pub withdrawal_as_percent_or_amount: f64,
}
pub const PlanParamsCuda_Risk_SWR_WithdrawalType_Percent: PlanParamsCuda_Risk_SWR_WithdrawalType =
    0;
pub const PlanParamsCuda_Risk_SWR_WithdrawalType_Amount: PlanParamsCuda_Risk_SWR_WithdrawalType = 1;
pub type PlanParamsCuda_Risk_SWR_WithdrawalType = ::std::os::raw::c_uint;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PlanParamsCuda_Risk_SWR"][::std::mem::size_of::<PlanParamsCuda_Risk_SWR>() - 16usize];
    ["Alignment of PlanParamsCuda_Risk_SWR"]
        [::std::mem::align_of::<PlanParamsCuda_Risk_SWR>() - 8usize];
    ["Offset of field: PlanParamsCuda_Risk_SWR::withdrawal_type"]
        [::std::mem::offset_of!(PlanParamsCuda_Risk_SWR, withdrawal_type) - 0usize];
    ["Offset of field: PlanParamsCuda_Risk_SWR::withdrawal_as_percent_or_amount"]
        [::std::mem::offset_of!(PlanParamsCuda_Risk_SWR, withdrawal_as_percent_or_amount) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PlanParamsCuda_Risk"][::std::mem::size_of::<PlanParamsCuda_Risk>() - 32usize];
    ["Alignment of PlanParamsCuda_Risk"][::std::mem::align_of::<PlanParamsCuda_Risk>() - 8usize];
    ["Offset of field: PlanParamsCuda_Risk::tpaw"]
        [::std::mem::offset_of!(PlanParamsCuda_Risk, tpaw) - 0usize];
    ["Offset of field: PlanParamsCuda_Risk::swr"]
        [::std::mem::offset_of!(PlanParamsCuda_Risk, swr) - 16usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PlanParamsCuda_Advanced {
    pub return_stats_for_planning: PlanParamsCuda_Advanced_ReturnStatsForPlanning,
    pub sampling: PlanParamsCuda_Advanced_Sampling,
    pub strategy: PlanParamsCuda_Advanced_Strategy,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PlanParamsCuda_Advanced_ReturnStatsForPlanning {
    pub expected_returns_at_month_0: StocksAndBondsFLOAT,
    pub annual_empirical_log_variance_stocks: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PlanParamsCuda_Advanced_ReturnStatsForPlanning"]
        [::std::mem::size_of::<PlanParamsCuda_Advanced_ReturnStatsForPlanning>() - 12usize];
    ["Alignment of PlanParamsCuda_Advanced_ReturnStatsForPlanning"]
        [::std::mem::align_of::<PlanParamsCuda_Advanced_ReturnStatsForPlanning>() - 4usize];
    ["Offset of field: PlanParamsCuda_Advanced_ReturnStatsForPlanning::expected_returns_at_month_0"] [:: std :: mem :: offset_of ! (PlanParamsCuda_Advanced_ReturnStatsForPlanning , expected_returns_at_month_0) - 0usize] ;
    ["Offset of field: PlanParamsCuda_Advanced_ReturnStatsForPlanning::annual_empirical_log_variance_stocks"] [:: std :: mem :: offset_of ! (PlanParamsCuda_Advanced_ReturnStatsForPlanning , annual_empirical_log_variance_stocks) - 8usize] ;
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PlanParamsCuda_Advanced_Sampling {
    pub type_: PlanParamsCuda_Advanced_Sampling_Type,
    pub monte_carlo_or_historical: PlanParamsCuda_Advanced_Sampling_MonteCarloOrHistorical,
}
pub const PlanParamsCuda_Advanced_Sampling_Type_MonteCarloSampling:
    PlanParamsCuda_Advanced_Sampling_Type = 0;
pub const PlanParamsCuda_Advanced_Sampling_Type_HistoricalSampling:
    PlanParamsCuda_Advanced_Sampling_Type = 1;
pub type PlanParamsCuda_Advanced_Sampling_Type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PlanParamsCuda_Advanced_Sampling_MonteCarlo {
    pub seed: u64,
    pub num_runs: u32,
    pub block_size: u32,
    pub stagger_run_starts: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PlanParamsCuda_Advanced_Sampling_MonteCarlo"]
        [::std::mem::size_of::<PlanParamsCuda_Advanced_Sampling_MonteCarlo>() - 24usize];
    ["Alignment of PlanParamsCuda_Advanced_Sampling_MonteCarlo"]
        [::std::mem::align_of::<PlanParamsCuda_Advanced_Sampling_MonteCarlo>() - 8usize];
    ["Offset of field: PlanParamsCuda_Advanced_Sampling_MonteCarlo::seed"]
        [::std::mem::offset_of!(PlanParamsCuda_Advanced_Sampling_MonteCarlo, seed) - 0usize];
    ["Offset of field: PlanParamsCuda_Advanced_Sampling_MonteCarlo::num_runs"]
        [::std::mem::offset_of!(PlanParamsCuda_Advanced_Sampling_MonteCarlo, num_runs) - 8usize];
    ["Offset of field: PlanParamsCuda_Advanced_Sampling_MonteCarlo::block_size"]
        [::std::mem::offset_of!(PlanParamsCuda_Advanced_Sampling_MonteCarlo, block_size) - 12usize];
    ["Offset of field: PlanParamsCuda_Advanced_Sampling_MonteCarlo::stagger_run_starts"][::std::mem::offset_of!(
        PlanParamsCuda_Advanced_Sampling_MonteCarlo,
        stagger_run_starts
    )
        - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PlanParamsCuda_Advanced_Sampling_Historical {
    pub ignore: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PlanParamsCuda_Advanced_Sampling_Historical"]
        [::std::mem::size_of::<PlanParamsCuda_Advanced_Sampling_Historical>() - 4usize];
    ["Alignment of PlanParamsCuda_Advanced_Sampling_Historical"]
        [::std::mem::align_of::<PlanParamsCuda_Advanced_Sampling_Historical>() - 4usize];
    ["Offset of field: PlanParamsCuda_Advanced_Sampling_Historical::ignore"]
        [::std::mem::offset_of!(PlanParamsCuda_Advanced_Sampling_Historical, ignore) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union PlanParamsCuda_Advanced_Sampling_MonteCarloOrHistorical {
    pub monte_carlo: PlanParamsCuda_Advanced_Sampling_MonteCarlo,
    pub historical: PlanParamsCuda_Advanced_Sampling_Historical,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PlanParamsCuda_Advanced_Sampling_MonteCarloOrHistorical"][::std::mem::size_of::<
        PlanParamsCuda_Advanced_Sampling_MonteCarloOrHistorical,
    >() - 24usize];
    ["Alignment of PlanParamsCuda_Advanced_Sampling_MonteCarloOrHistorical"][::std::mem::align_of::<
        PlanParamsCuda_Advanced_Sampling_MonteCarloOrHistorical,
    >() - 8usize];
    ["Offset of field: PlanParamsCuda_Advanced_Sampling_MonteCarloOrHistorical::monte_carlo"][::std::mem::offset_of!(
        PlanParamsCuda_Advanced_Sampling_MonteCarloOrHistorical,
        monte_carlo
    )
        - 0usize];
    ["Offset of field: PlanParamsCuda_Advanced_Sampling_MonteCarloOrHistorical::historical"][::std::mem::offset_of!(
        PlanParamsCuda_Advanced_Sampling_MonteCarloOrHistorical,
        historical
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PlanParamsCuda_Advanced_Sampling"]
        [::std::mem::size_of::<PlanParamsCuda_Advanced_Sampling>() - 32usize];
    ["Alignment of PlanParamsCuda_Advanced_Sampling"]
        [::std::mem::align_of::<PlanParamsCuda_Advanced_Sampling>() - 8usize];
    ["Offset of field: PlanParamsCuda_Advanced_Sampling::type_"]
        [::std::mem::offset_of!(PlanParamsCuda_Advanced_Sampling, type_) - 0usize];
    ["Offset of field: PlanParamsCuda_Advanced_Sampling::monte_carlo_or_historical"][::std::mem::offset_of!(
        PlanParamsCuda_Advanced_Sampling,
        monte_carlo_or_historical
    ) - 8usize];
};
pub const PlanParamsCuda_Advanced_Strategy_Strategy_TPAW: PlanParamsCuda_Advanced_Strategy = 0;
pub const PlanParamsCuda_Advanced_Strategy_Strategy_SPAW: PlanParamsCuda_Advanced_Strategy = 1;
pub const PlanParamsCuda_Advanced_Strategy_Strategy_SWR: PlanParamsCuda_Advanced_Strategy = 2;
pub type PlanParamsCuda_Advanced_Strategy = ::std::os::raw::c_uint;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PlanParamsCuda_Advanced"][::std::mem::size_of::<PlanParamsCuda_Advanced>() - 56usize];
    ["Alignment of PlanParamsCuda_Advanced"]
        [::std::mem::align_of::<PlanParamsCuda_Advanced>() - 8usize];
    ["Offset of field: PlanParamsCuda_Advanced::return_stats_for_planning"]
        [::std::mem::offset_of!(PlanParamsCuda_Advanced, return_stats_for_planning) - 0usize];
    ["Offset of field: PlanParamsCuda_Advanced::sampling"]
        [::std::mem::offset_of!(PlanParamsCuda_Advanced, sampling) - 16usize];
    ["Offset of field: PlanParamsCuda_Advanced::strategy"]
        [::std::mem::offset_of!(PlanParamsCuda_Advanced, strategy) - 48usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PlanParamsCuda"][::std::mem::size_of::<PlanParamsCuda>() - 136usize];
    ["Alignment of PlanParamsCuda"][::std::mem::align_of::<PlanParamsCuda>() - 8usize];
    ["Offset of field: PlanParamsCuda::ages"]
        [::std::mem::offset_of!(PlanParamsCuda, ages) - 0usize];
    ["Offset of field: PlanParamsCuda::adjustments_to_spending"]
        [::std::mem::offset_of!(PlanParamsCuda, adjustments_to_spending) - 8usize];
    ["Offset of field: PlanParamsCuda::risk"]
        [::std::mem::offset_of!(PlanParamsCuda, risk) - 48usize];
    ["Offset of field: PlanParamsCuda::advanced"]
        [::std::mem::offset_of!(PlanParamsCuda, advanced) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PlanParamsCuda_C_Arrays {
    pub future_savings_by_mfn: *mut f64,
    pub income_during_retirement_by_mfn: *mut f64,
    pub essential_expenses_by_mfn: *mut f64,
    pub discretionary_expenses_by_mfn: *mut f64,
    pub tpaw_rra_including_pos_infinity_by_mfn: *mut f32,
    pub spaw_spending_tilt_by_mfn: *mut f32,
    pub spaw_and_swr_stock_allocation_savings_portfolio_by_mfn: *mut f32,
    pub num_percentiles: u32,
    pub percentiles: *mut u32,
    pub historical_returns_series_len: u32,
    pub historical_returns_series: *mut HistoricalReturnsCuda,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PlanParamsCuda_C_Arrays"][::std::mem::size_of::<PlanParamsCuda_C_Arrays>() - 88usize];
    ["Alignment of PlanParamsCuda_C_Arrays"]
        [::std::mem::align_of::<PlanParamsCuda_C_Arrays>() - 8usize];
    ["Offset of field: PlanParamsCuda_C_Arrays::future_savings_by_mfn"]
        [::std::mem::offset_of!(PlanParamsCuda_C_Arrays, future_savings_by_mfn) - 0usize];
    ["Offset of field: PlanParamsCuda_C_Arrays::income_during_retirement_by_mfn"]
        [::std::mem::offset_of!(PlanParamsCuda_C_Arrays, income_during_retirement_by_mfn) - 8usize];
    ["Offset of field: PlanParamsCuda_C_Arrays::essential_expenses_by_mfn"]
        [::std::mem::offset_of!(PlanParamsCuda_C_Arrays, essential_expenses_by_mfn) - 16usize];
    ["Offset of field: PlanParamsCuda_C_Arrays::discretionary_expenses_by_mfn"]
        [::std::mem::offset_of!(PlanParamsCuda_C_Arrays, discretionary_expenses_by_mfn) - 24usize];
    ["Offset of field: PlanParamsCuda_C_Arrays::tpaw_rra_including_pos_infinity_by_mfn"][::std::mem::offset_of!(
        PlanParamsCuda_C_Arrays,
        tpaw_rra_including_pos_infinity_by_mfn
    )
        - 32usize];
    ["Offset of field: PlanParamsCuda_C_Arrays::spaw_spending_tilt_by_mfn"]
        [::std::mem::offset_of!(PlanParamsCuda_C_Arrays, spaw_spending_tilt_by_mfn) - 40usize];
    ["Offset of field: PlanParamsCuda_C_Arrays::spaw_and_swr_stock_allocation_savings_portfolio_by_mfn"] [:: std :: mem :: offset_of ! (PlanParamsCuda_C_Arrays , spaw_and_swr_stock_allocation_savings_portfolio_by_mfn) - 48usize] ;
    ["Offset of field: PlanParamsCuda_C_Arrays::num_percentiles"]
        [::std::mem::offset_of!(PlanParamsCuda_C_Arrays, num_percentiles) - 56usize];
    ["Offset of field: PlanParamsCuda_C_Arrays::percentiles"]
        [::std::mem::offset_of!(PlanParamsCuda_C_Arrays, percentiles) - 64usize];
    ["Offset of field: PlanParamsCuda_C_Arrays::historical_returns_series_len"]
        [::std::mem::offset_of!(PlanParamsCuda_C_Arrays, historical_returns_series_len) - 72usize];
    ["Offset of field: PlanParamsCuda_C_Arrays::historical_returns_series"]
        [::std::mem::offset_of!(PlanParamsCuda_C_Arrays, historical_returns_series) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ResultCudaNotArrays {
    pub num_runs: u32,
    pub num_runs_with_insufficient_funds: u32,
    pub tpaw_net_present_value_exact_month_0_legacy: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ResultCudaNotArrays"][::std::mem::size_of::<ResultCudaNotArrays>() - 16usize];
    ["Alignment of ResultCudaNotArrays"][::std::mem::align_of::<ResultCudaNotArrays>() - 8usize];
    ["Offset of field: ResultCudaNotArrays::num_runs"]
        [::std::mem::offset_of!(ResultCudaNotArrays, num_runs) - 0usize];
    ["Offset of field: ResultCudaNotArrays::num_runs_with_insufficient_funds"]
        [::std::mem::offset_of!(ResultCudaNotArrays, num_runs_with_insufficient_funds) - 4usize];
    ["Offset of field: ResultCudaNotArrays::tpaw_net_present_value_exact_month_0_legacy"][::std::mem::offset_of!(
        ResultCudaNotArrays,
        tpaw_net_present_value_exact_month_0_legacy
    )
        - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ResultCudaArrays {
    pub by_percentile_by_mfn_simulated_percentile_major_balance_start: *mut f64,
    pub by_percentile_by_mfn_simulated_percentile_major_withdrawals_essential: *mut f64,
    pub by_percentile_by_mfn_simulated_percentile_major_withdrawals_discretionary: *mut f64,
    pub by_percentile_by_mfn_simulated_percentile_major_withdrawals_general: *mut f64,
    pub by_percentile_by_mfn_simulated_percentile_major_withdrawals_total: *mut f64,
    pub by_percentile_by_mfn_simulated_percentile_major_withdrawals_from_savings_portfolio_rate:
        *mut f32,
    pub by_percentile_by_mfn_simulated_percentile_major_after_withdrawals_allocation_savings_portfolio:
        *mut f32,
    pub by_percentile_by_mfn_simulated_percentile_major_after_withdrawals_allocation_total_portfolio_or_zero_if_no_wealth:
        *mut f32,
    pub tpaw_by_percentile_by_mfn_simulated_percentile_major_spending_tilt: *mut f32,
    pub by_percentile_ending_balance: *mut f64,
    pub tpaw_stock_allocation_total_portfolio_for_month_0_by_mfn: *mut f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ResultCudaArrays"][::std::mem::size_of::<ResultCudaArrays>() - 88usize];
    ["Alignment of ResultCudaArrays"][::std::mem::align_of::<ResultCudaArrays>() - 8usize];
    ["Offset of field: ResultCudaArrays::by_percentile_by_mfn_simulated_percentile_major_balance_start"] [:: std :: mem :: offset_of ! (ResultCudaArrays , by_percentile_by_mfn_simulated_percentile_major_balance_start) - 0usize] ;
    ["Offset of field: ResultCudaArrays::by_percentile_by_mfn_simulated_percentile_major_withdrawals_essential"] [:: std :: mem :: offset_of ! (ResultCudaArrays , by_percentile_by_mfn_simulated_percentile_major_withdrawals_essential) - 8usize] ;
    ["Offset of field: ResultCudaArrays::by_percentile_by_mfn_simulated_percentile_major_withdrawals_discretionary"] [:: std :: mem :: offset_of ! (ResultCudaArrays , by_percentile_by_mfn_simulated_percentile_major_withdrawals_discretionary) - 16usize] ;
    ["Offset of field: ResultCudaArrays::by_percentile_by_mfn_simulated_percentile_major_withdrawals_general"] [:: std :: mem :: offset_of ! (ResultCudaArrays , by_percentile_by_mfn_simulated_percentile_major_withdrawals_general) - 24usize] ;
    ["Offset of field: ResultCudaArrays::by_percentile_by_mfn_simulated_percentile_major_withdrawals_total"] [:: std :: mem :: offset_of ! (ResultCudaArrays , by_percentile_by_mfn_simulated_percentile_major_withdrawals_total) - 32usize] ;
    ["Offset of field: ResultCudaArrays::by_percentile_by_mfn_simulated_percentile_major_withdrawals_from_savings_portfolio_rate"] [:: std :: mem :: offset_of ! (ResultCudaArrays , by_percentile_by_mfn_simulated_percentile_major_withdrawals_from_savings_portfolio_rate) - 40usize] ;
    ["Offset of field: ResultCudaArrays::by_percentile_by_mfn_simulated_percentile_major_after_withdrawals_allocation_savings_portfolio"] [:: std :: mem :: offset_of ! (ResultCudaArrays , by_percentile_by_mfn_simulated_percentile_major_after_withdrawals_allocation_savings_portfolio) - 48usize] ;
    ["Offset of field: ResultCudaArrays::by_percentile_by_mfn_simulated_percentile_major_after_withdrawals_allocation_total_portfolio_or_zero_if_no_wealth"] [:: std :: mem :: offset_of ! (ResultCudaArrays , by_percentile_by_mfn_simulated_percentile_major_after_withdrawals_allocation_total_portfolio_or_zero_if_no_wealth) - 56usize] ;
    ["Offset of field: ResultCudaArrays::tpaw_by_percentile_by_mfn_simulated_percentile_major_spending_tilt"] [:: std :: mem :: offset_of ! (ResultCudaArrays , tpaw_by_percentile_by_mfn_simulated_percentile_major_spending_tilt) - 64usize] ;
    ["Offset of field: ResultCudaArrays::by_percentile_ending_balance"]
        [::std::mem::offset_of!(ResultCudaArrays, by_percentile_ending_balance) - 72usize];
    ["Offset of field: ResultCudaArrays::tpaw_stock_allocation_total_portfolio_for_month_0_by_mfn"] [:: std :: mem :: offset_of ! (ResultCudaArrays , tpaw_stock_allocation_total_portfolio_for_month_0_by_mfn) - 80usize] ;
};
unsafe extern "C" {
    pub fn cuda_simulate(
        num_months_to_simulate: u32,
        current_portfolio_balance: f64,
        plan_params: *const PlanParamsCuda,
        plan_params_c_arrays: *const PlanParamsCuda_C_Arrays,
        out: *mut ResultCudaArrays,
    ) -> ResultCudaNotArrays;
}
unsafe extern "C" {
    pub fn cuda_get_empirical_annual_non_log_mean(
        seed: u64,
        num_runs: u32,
        num_months: u32,
        historical_monthly_log_returns_stocks: *const f32,
        historical_monthly_log_returns_bonds: *const f32,
        historical_returns_series_len: u32,
    ) -> StocksAndBondsFLOAT;
}
