// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.12.4
// source: wire_market_data_for_presets_processed.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { WireYearAndMonth } from "./wire_common";

export const protobufPackage = "wire";

export interface WireDailyMarketDataForPresetsSP500 {
  closingTimestampMs: number;
  value: number;
}

export interface WireDailyMarketDataForPresetsBondRates {
  closingTimestampMs: number;
  fiveYear: number;
  sevenYear: number;
  tenYear: number;
  twentyYear: number;
  thirtyYear: number;
}

export interface WireDailyMarketDataForPresetsInflation {
  closingTimestampMs: number;
  value: number;
}

export interface WireDailyMarketDataForPresets {
  closingTimestampMs: number;
  sp500: WireDailyMarketDataForPresetsSP500 | undefined;
  bondRates: WireDailyMarketDataForPresetsBondRates | undefined;
  inflation: WireDailyMarketDataForPresetsInflation | undefined;
}

export interface WireTenYearDuration {
  start: WireYearAndMonth | undefined;
  end: WireYearAndMonth | undefined;
}

export interface WireAverageAnnualRealEarningsForSP500For10Years {
  addedDateMs: number;
  tenYearDuration: WireTenYearDuration | undefined;
  value: number;
}

export interface WireMarketDataForPresetsProcessedSource {
  dailyMarketData: WireDailyMarketDataForPresets | undefined;
  averageAnnualRealEarningsForSp500For10Years: WireAverageAnnualRealEarningsForSP500For10Years | undefined;
}

export interface WireFiveTenTwentyThirtyYearsF64 {
  fiveYear: number;
  tenYear: number;
  twentyYear: number;
  thirtyYear: number;
}

export interface WireCAPEBasedRegressionResults {
  full: WireFiveTenTwentyThirtyYearsF64 | undefined;
  restricted: WireFiveTenTwentyThirtyYearsF64 | undefined;
}

export interface WireMarketDataForPresetsProcessedStocks {
  capeNotRounded: number;
  oneOverCapeNotRounded: number;
  oneOverCapeRounded: number;
  empiricalAnnualNonLogRegressionsStocks: WireCAPEBasedRegressionResults | undefined;
  regressionPrediction: number;
  conservativeEstimate: number;
  historical: number;
}

export interface WireMarketDataForPresetsProcessedBonds {
  tipsYield20Year: number;
  historical: number;
}

export interface WireMarketDataForPresetsProcessedExpectedReturns {
  stocks: WireMarketDataForPresetsProcessedStocks | undefined;
  bonds: WireMarketDataForPresetsProcessedBonds | undefined;
}

export interface WireMarketDataForPresetsProcessedInflation {
  suggestedAnnual: number;
}

export interface WireMarketDataForPresetsProcessed {
  sourceRounded: WireMarketDataForPresetsProcessedSource | undefined;
  expectedReturns: WireMarketDataForPresetsProcessedExpectedReturns | undefined;
  inflation: WireMarketDataForPresetsProcessedInflation | undefined;
}

function createBaseWireDailyMarketDataForPresetsSP500(): WireDailyMarketDataForPresetsSP500 {
  return { closingTimestampMs: 0, value: 0 };
}

export const WireDailyMarketDataForPresetsSP500: MessageFns<WireDailyMarketDataForPresetsSP500> = {
  encode(message: WireDailyMarketDataForPresetsSP500, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.closingTimestampMs !== 0) {
      writer.uint32(8).int64(message.closingTimestampMs);
    }
    if (message.value !== 0) {
      writer.uint32(17).double(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WireDailyMarketDataForPresetsSP500 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireDailyMarketDataForPresetsSP500();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.closingTimestampMs = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.value = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireDailyMarketDataForPresetsSP500 {
    return {
      closingTimestampMs: isSet(object.closingTimestampMs) ? globalThis.Number(object.closingTimestampMs) : 0,
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: WireDailyMarketDataForPresetsSP500): unknown {
    const obj: any = {};
    if (message.closingTimestampMs !== 0) {
      obj.closingTimestampMs = Math.round(message.closingTimestampMs);
    }
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WireDailyMarketDataForPresetsSP500>, I>>(
    base?: I,
  ): WireDailyMarketDataForPresetsSP500 {
    return WireDailyMarketDataForPresetsSP500.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WireDailyMarketDataForPresetsSP500>, I>>(
    object: I,
  ): WireDailyMarketDataForPresetsSP500 {
    const message = createBaseWireDailyMarketDataForPresetsSP500();
    message.closingTimestampMs = object.closingTimestampMs ?? 0;
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseWireDailyMarketDataForPresetsBondRates(): WireDailyMarketDataForPresetsBondRates {
  return { closingTimestampMs: 0, fiveYear: 0, sevenYear: 0, tenYear: 0, twentyYear: 0, thirtyYear: 0 };
}

export const WireDailyMarketDataForPresetsBondRates: MessageFns<WireDailyMarketDataForPresetsBondRates> = {
  encode(message: WireDailyMarketDataForPresetsBondRates, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.closingTimestampMs !== 0) {
      writer.uint32(8).int64(message.closingTimestampMs);
    }
    if (message.fiveYear !== 0) {
      writer.uint32(17).double(message.fiveYear);
    }
    if (message.sevenYear !== 0) {
      writer.uint32(25).double(message.sevenYear);
    }
    if (message.tenYear !== 0) {
      writer.uint32(33).double(message.tenYear);
    }
    if (message.twentyYear !== 0) {
      writer.uint32(41).double(message.twentyYear);
    }
    if (message.thirtyYear !== 0) {
      writer.uint32(49).double(message.thirtyYear);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WireDailyMarketDataForPresetsBondRates {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireDailyMarketDataForPresetsBondRates();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.closingTimestampMs = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.fiveYear = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.sevenYear = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.tenYear = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.twentyYear = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 49) {
            break;
          }

          message.thirtyYear = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireDailyMarketDataForPresetsBondRates {
    return {
      closingTimestampMs: isSet(object.closingTimestampMs) ? globalThis.Number(object.closingTimestampMs) : 0,
      fiveYear: isSet(object.fiveYear) ? globalThis.Number(object.fiveYear) : 0,
      sevenYear: isSet(object.sevenYear) ? globalThis.Number(object.sevenYear) : 0,
      tenYear: isSet(object.tenYear) ? globalThis.Number(object.tenYear) : 0,
      twentyYear: isSet(object.twentyYear) ? globalThis.Number(object.twentyYear) : 0,
      thirtyYear: isSet(object.thirtyYear) ? globalThis.Number(object.thirtyYear) : 0,
    };
  },

  toJSON(message: WireDailyMarketDataForPresetsBondRates): unknown {
    const obj: any = {};
    if (message.closingTimestampMs !== 0) {
      obj.closingTimestampMs = Math.round(message.closingTimestampMs);
    }
    if (message.fiveYear !== 0) {
      obj.fiveYear = message.fiveYear;
    }
    if (message.sevenYear !== 0) {
      obj.sevenYear = message.sevenYear;
    }
    if (message.tenYear !== 0) {
      obj.tenYear = message.tenYear;
    }
    if (message.twentyYear !== 0) {
      obj.twentyYear = message.twentyYear;
    }
    if (message.thirtyYear !== 0) {
      obj.thirtyYear = message.thirtyYear;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WireDailyMarketDataForPresetsBondRates>, I>>(
    base?: I,
  ): WireDailyMarketDataForPresetsBondRates {
    return WireDailyMarketDataForPresetsBondRates.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WireDailyMarketDataForPresetsBondRates>, I>>(
    object: I,
  ): WireDailyMarketDataForPresetsBondRates {
    const message = createBaseWireDailyMarketDataForPresetsBondRates();
    message.closingTimestampMs = object.closingTimestampMs ?? 0;
    message.fiveYear = object.fiveYear ?? 0;
    message.sevenYear = object.sevenYear ?? 0;
    message.tenYear = object.tenYear ?? 0;
    message.twentyYear = object.twentyYear ?? 0;
    message.thirtyYear = object.thirtyYear ?? 0;
    return message;
  },
};

function createBaseWireDailyMarketDataForPresetsInflation(): WireDailyMarketDataForPresetsInflation {
  return { closingTimestampMs: 0, value: 0 };
}

export const WireDailyMarketDataForPresetsInflation: MessageFns<WireDailyMarketDataForPresetsInflation> = {
  encode(message: WireDailyMarketDataForPresetsInflation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.closingTimestampMs !== 0) {
      writer.uint32(8).int64(message.closingTimestampMs);
    }
    if (message.value !== 0) {
      writer.uint32(17).double(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WireDailyMarketDataForPresetsInflation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireDailyMarketDataForPresetsInflation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.closingTimestampMs = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.value = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireDailyMarketDataForPresetsInflation {
    return {
      closingTimestampMs: isSet(object.closingTimestampMs) ? globalThis.Number(object.closingTimestampMs) : 0,
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: WireDailyMarketDataForPresetsInflation): unknown {
    const obj: any = {};
    if (message.closingTimestampMs !== 0) {
      obj.closingTimestampMs = Math.round(message.closingTimestampMs);
    }
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WireDailyMarketDataForPresetsInflation>, I>>(
    base?: I,
  ): WireDailyMarketDataForPresetsInflation {
    return WireDailyMarketDataForPresetsInflation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WireDailyMarketDataForPresetsInflation>, I>>(
    object: I,
  ): WireDailyMarketDataForPresetsInflation {
    const message = createBaseWireDailyMarketDataForPresetsInflation();
    message.closingTimestampMs = object.closingTimestampMs ?? 0;
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseWireDailyMarketDataForPresets(): WireDailyMarketDataForPresets {
  return { closingTimestampMs: 0, sp500: undefined, bondRates: undefined, inflation: undefined };
}

export const WireDailyMarketDataForPresets: MessageFns<WireDailyMarketDataForPresets> = {
  encode(message: WireDailyMarketDataForPresets, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.closingTimestampMs !== 0) {
      writer.uint32(8).int64(message.closingTimestampMs);
    }
    if (message.sp500 !== undefined) {
      WireDailyMarketDataForPresetsSP500.encode(message.sp500, writer.uint32(18).fork()).join();
    }
    if (message.bondRates !== undefined) {
      WireDailyMarketDataForPresetsBondRates.encode(message.bondRates, writer.uint32(26).fork()).join();
    }
    if (message.inflation !== undefined) {
      WireDailyMarketDataForPresetsInflation.encode(message.inflation, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WireDailyMarketDataForPresets {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireDailyMarketDataForPresets();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.closingTimestampMs = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sp500 = WireDailyMarketDataForPresetsSP500.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.bondRates = WireDailyMarketDataForPresetsBondRates.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.inflation = WireDailyMarketDataForPresetsInflation.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireDailyMarketDataForPresets {
    return {
      closingTimestampMs: isSet(object.closingTimestampMs) ? globalThis.Number(object.closingTimestampMs) : 0,
      sp500: isSet(object.sp500) ? WireDailyMarketDataForPresetsSP500.fromJSON(object.sp500) : undefined,
      bondRates: isSet(object.bondRates)
        ? WireDailyMarketDataForPresetsBondRates.fromJSON(object.bondRates)
        : undefined,
      inflation: isSet(object.inflation)
        ? WireDailyMarketDataForPresetsInflation.fromJSON(object.inflation)
        : undefined,
    };
  },

  toJSON(message: WireDailyMarketDataForPresets): unknown {
    const obj: any = {};
    if (message.closingTimestampMs !== 0) {
      obj.closingTimestampMs = Math.round(message.closingTimestampMs);
    }
    if (message.sp500 !== undefined) {
      obj.sp500 = WireDailyMarketDataForPresetsSP500.toJSON(message.sp500);
    }
    if (message.bondRates !== undefined) {
      obj.bondRates = WireDailyMarketDataForPresetsBondRates.toJSON(message.bondRates);
    }
    if (message.inflation !== undefined) {
      obj.inflation = WireDailyMarketDataForPresetsInflation.toJSON(message.inflation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WireDailyMarketDataForPresets>, I>>(base?: I): WireDailyMarketDataForPresets {
    return WireDailyMarketDataForPresets.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WireDailyMarketDataForPresets>, I>>(
    object: I,
  ): WireDailyMarketDataForPresets {
    const message = createBaseWireDailyMarketDataForPresets();
    message.closingTimestampMs = object.closingTimestampMs ?? 0;
    message.sp500 = (object.sp500 !== undefined && object.sp500 !== null)
      ? WireDailyMarketDataForPresetsSP500.fromPartial(object.sp500)
      : undefined;
    message.bondRates = (object.bondRates !== undefined && object.bondRates !== null)
      ? WireDailyMarketDataForPresetsBondRates.fromPartial(object.bondRates)
      : undefined;
    message.inflation = (object.inflation !== undefined && object.inflation !== null)
      ? WireDailyMarketDataForPresetsInflation.fromPartial(object.inflation)
      : undefined;
    return message;
  },
};

function createBaseWireTenYearDuration(): WireTenYearDuration {
  return { start: undefined, end: undefined };
}

export const WireTenYearDuration: MessageFns<WireTenYearDuration> = {
  encode(message: WireTenYearDuration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.start !== undefined) {
      WireYearAndMonth.encode(message.start, writer.uint32(10).fork()).join();
    }
    if (message.end !== undefined) {
      WireYearAndMonth.encode(message.end, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WireTenYearDuration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireTenYearDuration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.start = WireYearAndMonth.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.end = WireYearAndMonth.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireTenYearDuration {
    return {
      start: isSet(object.start) ? WireYearAndMonth.fromJSON(object.start) : undefined,
      end: isSet(object.end) ? WireYearAndMonth.fromJSON(object.end) : undefined,
    };
  },

  toJSON(message: WireTenYearDuration): unknown {
    const obj: any = {};
    if (message.start !== undefined) {
      obj.start = WireYearAndMonth.toJSON(message.start);
    }
    if (message.end !== undefined) {
      obj.end = WireYearAndMonth.toJSON(message.end);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WireTenYearDuration>, I>>(base?: I): WireTenYearDuration {
    return WireTenYearDuration.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WireTenYearDuration>, I>>(object: I): WireTenYearDuration {
    const message = createBaseWireTenYearDuration();
    message.start = (object.start !== undefined && object.start !== null)
      ? WireYearAndMonth.fromPartial(object.start)
      : undefined;
    message.end = (object.end !== undefined && object.end !== null)
      ? WireYearAndMonth.fromPartial(object.end)
      : undefined;
    return message;
  },
};

function createBaseWireAverageAnnualRealEarningsForSP500For10Years(): WireAverageAnnualRealEarningsForSP500For10Years {
  return { addedDateMs: 0, tenYearDuration: undefined, value: 0 };
}

export const WireAverageAnnualRealEarningsForSP500For10Years: MessageFns<
  WireAverageAnnualRealEarningsForSP500For10Years
> = {
  encode(
    message: WireAverageAnnualRealEarningsForSP500For10Years,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.addedDateMs !== 0) {
      writer.uint32(8).int64(message.addedDateMs);
    }
    if (message.tenYearDuration !== undefined) {
      WireTenYearDuration.encode(message.tenYearDuration, writer.uint32(18).fork()).join();
    }
    if (message.value !== 0) {
      writer.uint32(25).double(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WireAverageAnnualRealEarningsForSP500For10Years {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireAverageAnnualRealEarningsForSP500For10Years();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.addedDateMs = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tenYearDuration = WireTenYearDuration.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.value = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireAverageAnnualRealEarningsForSP500For10Years {
    return {
      addedDateMs: isSet(object.addedDateMs) ? globalThis.Number(object.addedDateMs) : 0,
      tenYearDuration: isSet(object.tenYearDuration) ? WireTenYearDuration.fromJSON(object.tenYearDuration) : undefined,
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: WireAverageAnnualRealEarningsForSP500For10Years): unknown {
    const obj: any = {};
    if (message.addedDateMs !== 0) {
      obj.addedDateMs = Math.round(message.addedDateMs);
    }
    if (message.tenYearDuration !== undefined) {
      obj.tenYearDuration = WireTenYearDuration.toJSON(message.tenYearDuration);
    }
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WireAverageAnnualRealEarningsForSP500For10Years>, I>>(
    base?: I,
  ): WireAverageAnnualRealEarningsForSP500For10Years {
    return WireAverageAnnualRealEarningsForSP500For10Years.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WireAverageAnnualRealEarningsForSP500For10Years>, I>>(
    object: I,
  ): WireAverageAnnualRealEarningsForSP500For10Years {
    const message = createBaseWireAverageAnnualRealEarningsForSP500For10Years();
    message.addedDateMs = object.addedDateMs ?? 0;
    message.tenYearDuration = (object.tenYearDuration !== undefined && object.tenYearDuration !== null)
      ? WireTenYearDuration.fromPartial(object.tenYearDuration)
      : undefined;
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseWireMarketDataForPresetsProcessedSource(): WireMarketDataForPresetsProcessedSource {
  return { dailyMarketData: undefined, averageAnnualRealEarningsForSp500For10Years: undefined };
}

export const WireMarketDataForPresetsProcessedSource: MessageFns<WireMarketDataForPresetsProcessedSource> = {
  encode(message: WireMarketDataForPresetsProcessedSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dailyMarketData !== undefined) {
      WireDailyMarketDataForPresets.encode(message.dailyMarketData, writer.uint32(10).fork()).join();
    }
    if (message.averageAnnualRealEarningsForSp500For10Years !== undefined) {
      WireAverageAnnualRealEarningsForSP500For10Years.encode(
        message.averageAnnualRealEarningsForSp500For10Years,
        writer.uint32(18).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WireMarketDataForPresetsProcessedSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireMarketDataForPresetsProcessedSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.dailyMarketData = WireDailyMarketDataForPresets.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.averageAnnualRealEarningsForSp500For10Years = WireAverageAnnualRealEarningsForSP500For10Years.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireMarketDataForPresetsProcessedSource {
    return {
      dailyMarketData: isSet(object.dailyMarketData)
        ? WireDailyMarketDataForPresets.fromJSON(object.dailyMarketData)
        : undefined,
      averageAnnualRealEarningsForSp500For10Years: isSet(object.averageAnnualRealEarningsForSp500For10Years)
        ? WireAverageAnnualRealEarningsForSP500For10Years.fromJSON(object.averageAnnualRealEarningsForSp500For10Years)
        : undefined,
    };
  },

  toJSON(message: WireMarketDataForPresetsProcessedSource): unknown {
    const obj: any = {};
    if (message.dailyMarketData !== undefined) {
      obj.dailyMarketData = WireDailyMarketDataForPresets.toJSON(message.dailyMarketData);
    }
    if (message.averageAnnualRealEarningsForSp500For10Years !== undefined) {
      obj.averageAnnualRealEarningsForSp500For10Years = WireAverageAnnualRealEarningsForSP500For10Years.toJSON(
        message.averageAnnualRealEarningsForSp500For10Years,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WireMarketDataForPresetsProcessedSource>, I>>(
    base?: I,
  ): WireMarketDataForPresetsProcessedSource {
    return WireMarketDataForPresetsProcessedSource.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WireMarketDataForPresetsProcessedSource>, I>>(
    object: I,
  ): WireMarketDataForPresetsProcessedSource {
    const message = createBaseWireMarketDataForPresetsProcessedSource();
    message.dailyMarketData = (object.dailyMarketData !== undefined && object.dailyMarketData !== null)
      ? WireDailyMarketDataForPresets.fromPartial(object.dailyMarketData)
      : undefined;
    message.averageAnnualRealEarningsForSp500For10Years =
      (object.averageAnnualRealEarningsForSp500For10Years !== undefined &&
          object.averageAnnualRealEarningsForSp500For10Years !== null)
        ? WireAverageAnnualRealEarningsForSP500For10Years.fromPartial(
          object.averageAnnualRealEarningsForSp500For10Years,
        )
        : undefined;
    return message;
  },
};

function createBaseWireFiveTenTwentyThirtyYearsF64(): WireFiveTenTwentyThirtyYearsF64 {
  return { fiveYear: 0, tenYear: 0, twentyYear: 0, thirtyYear: 0 };
}

export const WireFiveTenTwentyThirtyYearsF64: MessageFns<WireFiveTenTwentyThirtyYearsF64> = {
  encode(message: WireFiveTenTwentyThirtyYearsF64, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fiveYear !== 0) {
      writer.uint32(9).double(message.fiveYear);
    }
    if (message.tenYear !== 0) {
      writer.uint32(17).double(message.tenYear);
    }
    if (message.twentyYear !== 0) {
      writer.uint32(25).double(message.twentyYear);
    }
    if (message.thirtyYear !== 0) {
      writer.uint32(33).double(message.thirtyYear);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WireFiveTenTwentyThirtyYearsF64 {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireFiveTenTwentyThirtyYearsF64();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.fiveYear = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.tenYear = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.twentyYear = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.thirtyYear = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireFiveTenTwentyThirtyYearsF64 {
    return {
      fiveYear: isSet(object.fiveYear) ? globalThis.Number(object.fiveYear) : 0,
      tenYear: isSet(object.tenYear) ? globalThis.Number(object.tenYear) : 0,
      twentyYear: isSet(object.twentyYear) ? globalThis.Number(object.twentyYear) : 0,
      thirtyYear: isSet(object.thirtyYear) ? globalThis.Number(object.thirtyYear) : 0,
    };
  },

  toJSON(message: WireFiveTenTwentyThirtyYearsF64): unknown {
    const obj: any = {};
    if (message.fiveYear !== 0) {
      obj.fiveYear = message.fiveYear;
    }
    if (message.tenYear !== 0) {
      obj.tenYear = message.tenYear;
    }
    if (message.twentyYear !== 0) {
      obj.twentyYear = message.twentyYear;
    }
    if (message.thirtyYear !== 0) {
      obj.thirtyYear = message.thirtyYear;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WireFiveTenTwentyThirtyYearsF64>, I>>(base?: I): WireFiveTenTwentyThirtyYearsF64 {
    return WireFiveTenTwentyThirtyYearsF64.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WireFiveTenTwentyThirtyYearsF64>, I>>(
    object: I,
  ): WireFiveTenTwentyThirtyYearsF64 {
    const message = createBaseWireFiveTenTwentyThirtyYearsF64();
    message.fiveYear = object.fiveYear ?? 0;
    message.tenYear = object.tenYear ?? 0;
    message.twentyYear = object.twentyYear ?? 0;
    message.thirtyYear = object.thirtyYear ?? 0;
    return message;
  },
};

function createBaseWireCAPEBasedRegressionResults(): WireCAPEBasedRegressionResults {
  return { full: undefined, restricted: undefined };
}

export const WireCAPEBasedRegressionResults: MessageFns<WireCAPEBasedRegressionResults> = {
  encode(message: WireCAPEBasedRegressionResults, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.full !== undefined) {
      WireFiveTenTwentyThirtyYearsF64.encode(message.full, writer.uint32(10).fork()).join();
    }
    if (message.restricted !== undefined) {
      WireFiveTenTwentyThirtyYearsF64.encode(message.restricted, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WireCAPEBasedRegressionResults {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireCAPEBasedRegressionResults();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.full = WireFiveTenTwentyThirtyYearsF64.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.restricted = WireFiveTenTwentyThirtyYearsF64.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireCAPEBasedRegressionResults {
    return {
      full: isSet(object.full) ? WireFiveTenTwentyThirtyYearsF64.fromJSON(object.full) : undefined,
      restricted: isSet(object.restricted) ? WireFiveTenTwentyThirtyYearsF64.fromJSON(object.restricted) : undefined,
    };
  },

  toJSON(message: WireCAPEBasedRegressionResults): unknown {
    const obj: any = {};
    if (message.full !== undefined) {
      obj.full = WireFiveTenTwentyThirtyYearsF64.toJSON(message.full);
    }
    if (message.restricted !== undefined) {
      obj.restricted = WireFiveTenTwentyThirtyYearsF64.toJSON(message.restricted);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WireCAPEBasedRegressionResults>, I>>(base?: I): WireCAPEBasedRegressionResults {
    return WireCAPEBasedRegressionResults.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WireCAPEBasedRegressionResults>, I>>(
    object: I,
  ): WireCAPEBasedRegressionResults {
    const message = createBaseWireCAPEBasedRegressionResults();
    message.full = (object.full !== undefined && object.full !== null)
      ? WireFiveTenTwentyThirtyYearsF64.fromPartial(object.full)
      : undefined;
    message.restricted = (object.restricted !== undefined && object.restricted !== null)
      ? WireFiveTenTwentyThirtyYearsF64.fromPartial(object.restricted)
      : undefined;
    return message;
  },
};

function createBaseWireMarketDataForPresetsProcessedStocks(): WireMarketDataForPresetsProcessedStocks {
  return {
    capeNotRounded: 0,
    oneOverCapeNotRounded: 0,
    oneOverCapeRounded: 0,
    empiricalAnnualNonLogRegressionsStocks: undefined,
    regressionPrediction: 0,
    conservativeEstimate: 0,
    historical: 0,
  };
}

export const WireMarketDataForPresetsProcessedStocks: MessageFns<WireMarketDataForPresetsProcessedStocks> = {
  encode(message: WireMarketDataForPresetsProcessedStocks, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.capeNotRounded !== 0) {
      writer.uint32(9).double(message.capeNotRounded);
    }
    if (message.oneOverCapeNotRounded !== 0) {
      writer.uint32(17).double(message.oneOverCapeNotRounded);
    }
    if (message.oneOverCapeRounded !== 0) {
      writer.uint32(25).double(message.oneOverCapeRounded);
    }
    if (message.empiricalAnnualNonLogRegressionsStocks !== undefined) {
      WireCAPEBasedRegressionResults.encode(message.empiricalAnnualNonLogRegressionsStocks, writer.uint32(34).fork())
        .join();
    }
    if (message.regressionPrediction !== 0) {
      writer.uint32(41).double(message.regressionPrediction);
    }
    if (message.conservativeEstimate !== 0) {
      writer.uint32(49).double(message.conservativeEstimate);
    }
    if (message.historical !== 0) {
      writer.uint32(57).double(message.historical);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WireMarketDataForPresetsProcessedStocks {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireMarketDataForPresetsProcessedStocks();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.capeNotRounded = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.oneOverCapeNotRounded = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.oneOverCapeRounded = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.empiricalAnnualNonLogRegressionsStocks = WireCAPEBasedRegressionResults.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.regressionPrediction = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 49) {
            break;
          }

          message.conservativeEstimate = reader.double();
          continue;
        }
        case 7: {
          if (tag !== 57) {
            break;
          }

          message.historical = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireMarketDataForPresetsProcessedStocks {
    return {
      capeNotRounded: isSet(object.capeNotRounded) ? globalThis.Number(object.capeNotRounded) : 0,
      oneOverCapeNotRounded: isSet(object.oneOverCapeNotRounded) ? globalThis.Number(object.oneOverCapeNotRounded) : 0,
      oneOverCapeRounded: isSet(object.oneOverCapeRounded) ? globalThis.Number(object.oneOverCapeRounded) : 0,
      empiricalAnnualNonLogRegressionsStocks: isSet(object.empiricalAnnualNonLogRegressionsStocks)
        ? WireCAPEBasedRegressionResults.fromJSON(object.empiricalAnnualNonLogRegressionsStocks)
        : undefined,
      regressionPrediction: isSet(object.regressionPrediction) ? globalThis.Number(object.regressionPrediction) : 0,
      conservativeEstimate: isSet(object.conservativeEstimate) ? globalThis.Number(object.conservativeEstimate) : 0,
      historical: isSet(object.historical) ? globalThis.Number(object.historical) : 0,
    };
  },

  toJSON(message: WireMarketDataForPresetsProcessedStocks): unknown {
    const obj: any = {};
    if (message.capeNotRounded !== 0) {
      obj.capeNotRounded = message.capeNotRounded;
    }
    if (message.oneOverCapeNotRounded !== 0) {
      obj.oneOverCapeNotRounded = message.oneOverCapeNotRounded;
    }
    if (message.oneOverCapeRounded !== 0) {
      obj.oneOverCapeRounded = message.oneOverCapeRounded;
    }
    if (message.empiricalAnnualNonLogRegressionsStocks !== undefined) {
      obj.empiricalAnnualNonLogRegressionsStocks = WireCAPEBasedRegressionResults.toJSON(
        message.empiricalAnnualNonLogRegressionsStocks,
      );
    }
    if (message.regressionPrediction !== 0) {
      obj.regressionPrediction = message.regressionPrediction;
    }
    if (message.conservativeEstimate !== 0) {
      obj.conservativeEstimate = message.conservativeEstimate;
    }
    if (message.historical !== 0) {
      obj.historical = message.historical;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WireMarketDataForPresetsProcessedStocks>, I>>(
    base?: I,
  ): WireMarketDataForPresetsProcessedStocks {
    return WireMarketDataForPresetsProcessedStocks.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WireMarketDataForPresetsProcessedStocks>, I>>(
    object: I,
  ): WireMarketDataForPresetsProcessedStocks {
    const message = createBaseWireMarketDataForPresetsProcessedStocks();
    message.capeNotRounded = object.capeNotRounded ?? 0;
    message.oneOverCapeNotRounded = object.oneOverCapeNotRounded ?? 0;
    message.oneOverCapeRounded = object.oneOverCapeRounded ?? 0;
    message.empiricalAnnualNonLogRegressionsStocks =
      (object.empiricalAnnualNonLogRegressionsStocks !== undefined &&
          object.empiricalAnnualNonLogRegressionsStocks !== null)
        ? WireCAPEBasedRegressionResults.fromPartial(object.empiricalAnnualNonLogRegressionsStocks)
        : undefined;
    message.regressionPrediction = object.regressionPrediction ?? 0;
    message.conservativeEstimate = object.conservativeEstimate ?? 0;
    message.historical = object.historical ?? 0;
    return message;
  },
};

function createBaseWireMarketDataForPresetsProcessedBonds(): WireMarketDataForPresetsProcessedBonds {
  return { tipsYield20Year: 0, historical: 0 };
}

export const WireMarketDataForPresetsProcessedBonds: MessageFns<WireMarketDataForPresetsProcessedBonds> = {
  encode(message: WireMarketDataForPresetsProcessedBonds, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tipsYield20Year !== 0) {
      writer.uint32(9).double(message.tipsYield20Year);
    }
    if (message.historical !== 0) {
      writer.uint32(17).double(message.historical);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WireMarketDataForPresetsProcessedBonds {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireMarketDataForPresetsProcessedBonds();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.tipsYield20Year = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.historical = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireMarketDataForPresetsProcessedBonds {
    return {
      tipsYield20Year: isSet(object.tipsYield20Year) ? globalThis.Number(object.tipsYield20Year) : 0,
      historical: isSet(object.historical) ? globalThis.Number(object.historical) : 0,
    };
  },

  toJSON(message: WireMarketDataForPresetsProcessedBonds): unknown {
    const obj: any = {};
    if (message.tipsYield20Year !== 0) {
      obj.tipsYield20Year = message.tipsYield20Year;
    }
    if (message.historical !== 0) {
      obj.historical = message.historical;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WireMarketDataForPresetsProcessedBonds>, I>>(
    base?: I,
  ): WireMarketDataForPresetsProcessedBonds {
    return WireMarketDataForPresetsProcessedBonds.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WireMarketDataForPresetsProcessedBonds>, I>>(
    object: I,
  ): WireMarketDataForPresetsProcessedBonds {
    const message = createBaseWireMarketDataForPresetsProcessedBonds();
    message.tipsYield20Year = object.tipsYield20Year ?? 0;
    message.historical = object.historical ?? 0;
    return message;
  },
};

function createBaseWireMarketDataForPresetsProcessedExpectedReturns(): WireMarketDataForPresetsProcessedExpectedReturns {
  return { stocks: undefined, bonds: undefined };
}

export const WireMarketDataForPresetsProcessedExpectedReturns: MessageFns<
  WireMarketDataForPresetsProcessedExpectedReturns
> = {
  encode(
    message: WireMarketDataForPresetsProcessedExpectedReturns,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.stocks !== undefined) {
      WireMarketDataForPresetsProcessedStocks.encode(message.stocks, writer.uint32(10).fork()).join();
    }
    if (message.bonds !== undefined) {
      WireMarketDataForPresetsProcessedBonds.encode(message.bonds, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WireMarketDataForPresetsProcessedExpectedReturns {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireMarketDataForPresetsProcessedExpectedReturns();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stocks = WireMarketDataForPresetsProcessedStocks.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.bonds = WireMarketDataForPresetsProcessedBonds.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireMarketDataForPresetsProcessedExpectedReturns {
    return {
      stocks: isSet(object.stocks) ? WireMarketDataForPresetsProcessedStocks.fromJSON(object.stocks) : undefined,
      bonds: isSet(object.bonds) ? WireMarketDataForPresetsProcessedBonds.fromJSON(object.bonds) : undefined,
    };
  },

  toJSON(message: WireMarketDataForPresetsProcessedExpectedReturns): unknown {
    const obj: any = {};
    if (message.stocks !== undefined) {
      obj.stocks = WireMarketDataForPresetsProcessedStocks.toJSON(message.stocks);
    }
    if (message.bonds !== undefined) {
      obj.bonds = WireMarketDataForPresetsProcessedBonds.toJSON(message.bonds);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WireMarketDataForPresetsProcessedExpectedReturns>, I>>(
    base?: I,
  ): WireMarketDataForPresetsProcessedExpectedReturns {
    return WireMarketDataForPresetsProcessedExpectedReturns.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WireMarketDataForPresetsProcessedExpectedReturns>, I>>(
    object: I,
  ): WireMarketDataForPresetsProcessedExpectedReturns {
    const message = createBaseWireMarketDataForPresetsProcessedExpectedReturns();
    message.stocks = (object.stocks !== undefined && object.stocks !== null)
      ? WireMarketDataForPresetsProcessedStocks.fromPartial(object.stocks)
      : undefined;
    message.bonds = (object.bonds !== undefined && object.bonds !== null)
      ? WireMarketDataForPresetsProcessedBonds.fromPartial(object.bonds)
      : undefined;
    return message;
  },
};

function createBaseWireMarketDataForPresetsProcessedInflation(): WireMarketDataForPresetsProcessedInflation {
  return { suggestedAnnual: 0 };
}

export const WireMarketDataForPresetsProcessedInflation: MessageFns<WireMarketDataForPresetsProcessedInflation> = {
  encode(message: WireMarketDataForPresetsProcessedInflation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.suggestedAnnual !== 0) {
      writer.uint32(9).double(message.suggestedAnnual);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WireMarketDataForPresetsProcessedInflation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireMarketDataForPresetsProcessedInflation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.suggestedAnnual = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireMarketDataForPresetsProcessedInflation {
    return { suggestedAnnual: isSet(object.suggestedAnnual) ? globalThis.Number(object.suggestedAnnual) : 0 };
  },

  toJSON(message: WireMarketDataForPresetsProcessedInflation): unknown {
    const obj: any = {};
    if (message.suggestedAnnual !== 0) {
      obj.suggestedAnnual = message.suggestedAnnual;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WireMarketDataForPresetsProcessedInflation>, I>>(
    base?: I,
  ): WireMarketDataForPresetsProcessedInflation {
    return WireMarketDataForPresetsProcessedInflation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WireMarketDataForPresetsProcessedInflation>, I>>(
    object: I,
  ): WireMarketDataForPresetsProcessedInflation {
    const message = createBaseWireMarketDataForPresetsProcessedInflation();
    message.suggestedAnnual = object.suggestedAnnual ?? 0;
    return message;
  },
};

function createBaseWireMarketDataForPresetsProcessed(): WireMarketDataForPresetsProcessed {
  return { sourceRounded: undefined, expectedReturns: undefined, inflation: undefined };
}

export const WireMarketDataForPresetsProcessed: MessageFns<WireMarketDataForPresetsProcessed> = {
  encode(message: WireMarketDataForPresetsProcessed, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sourceRounded !== undefined) {
      WireMarketDataForPresetsProcessedSource.encode(message.sourceRounded, writer.uint32(10).fork()).join();
    }
    if (message.expectedReturns !== undefined) {
      WireMarketDataForPresetsProcessedExpectedReturns.encode(message.expectedReturns, writer.uint32(18).fork()).join();
    }
    if (message.inflation !== undefined) {
      WireMarketDataForPresetsProcessedInflation.encode(message.inflation, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WireMarketDataForPresetsProcessed {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireMarketDataForPresetsProcessed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sourceRounded = WireMarketDataForPresetsProcessedSource.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.expectedReturns = WireMarketDataForPresetsProcessedExpectedReturns.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.inflation = WireMarketDataForPresetsProcessedInflation.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireMarketDataForPresetsProcessed {
    return {
      sourceRounded: isSet(object.sourceRounded)
        ? WireMarketDataForPresetsProcessedSource.fromJSON(object.sourceRounded)
        : undefined,
      expectedReturns: isSet(object.expectedReturns)
        ? WireMarketDataForPresetsProcessedExpectedReturns.fromJSON(object.expectedReturns)
        : undefined,
      inflation: isSet(object.inflation)
        ? WireMarketDataForPresetsProcessedInflation.fromJSON(object.inflation)
        : undefined,
    };
  },

  toJSON(message: WireMarketDataForPresetsProcessed): unknown {
    const obj: any = {};
    if (message.sourceRounded !== undefined) {
      obj.sourceRounded = WireMarketDataForPresetsProcessedSource.toJSON(message.sourceRounded);
    }
    if (message.expectedReturns !== undefined) {
      obj.expectedReturns = WireMarketDataForPresetsProcessedExpectedReturns.toJSON(message.expectedReturns);
    }
    if (message.inflation !== undefined) {
      obj.inflation = WireMarketDataForPresetsProcessedInflation.toJSON(message.inflation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WireMarketDataForPresetsProcessed>, I>>(
    base?: I,
  ): WireMarketDataForPresetsProcessed {
    return WireMarketDataForPresetsProcessed.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WireMarketDataForPresetsProcessed>, I>>(
    object: I,
  ): WireMarketDataForPresetsProcessed {
    const message = createBaseWireMarketDataForPresetsProcessed();
    message.sourceRounded = (object.sourceRounded !== undefined && object.sourceRounded !== null)
      ? WireMarketDataForPresetsProcessedSource.fromPartial(object.sourceRounded)
      : undefined;
    message.expectedReturns = (object.expectedReturns !== undefined && object.expectedReturns !== null)
      ? WireMarketDataForPresetsProcessedExpectedReturns.fromPartial(object.expectedReturns)
      : undefined;
    message.inflation = (object.inflation !== undefined && object.inflation !== null)
      ? WireMarketDataForPresetsProcessedInflation.fromPartial(object.inflation)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
