// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.12.4
// source: wire_plan_params_server.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { NoMessage, WireBoxedDouble } from "./wire_common";

export const protobufPackage = "wire";

/** Using proto2 because the absence of required fields in proto3 is painful. */

export enum WirePlanParamsServerExpectedReturnsForPlanningCustomStocksBase {
  RegressionPrediction = 0,
  ConservativeEstimate = 1,
  OneOverCape = 2,
  HistoricalStocks = 3,
  UNRECOGNIZED = -1,
}

export function wirePlanParamsServerExpectedReturnsForPlanningCustomStocksBaseFromJSON(
  object: any,
): WirePlanParamsServerExpectedReturnsForPlanningCustomStocksBase {
  switch (object) {
    case 0:
    case "RegressionPrediction":
      return WirePlanParamsServerExpectedReturnsForPlanningCustomStocksBase.RegressionPrediction;
    case 1:
    case "ConservativeEstimate":
      return WirePlanParamsServerExpectedReturnsForPlanningCustomStocksBase.ConservativeEstimate;
    case 2:
    case "OneOverCape":
      return WirePlanParamsServerExpectedReturnsForPlanningCustomStocksBase.OneOverCape;
    case 3:
    case "HistoricalStocks":
      return WirePlanParamsServerExpectedReturnsForPlanningCustomStocksBase.HistoricalStocks;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WirePlanParamsServerExpectedReturnsForPlanningCustomStocksBase.UNRECOGNIZED;
  }
}

export function wirePlanParamsServerExpectedReturnsForPlanningCustomStocksBaseToJSON(
  object: WirePlanParamsServerExpectedReturnsForPlanningCustomStocksBase,
): string {
  switch (object) {
    case WirePlanParamsServerExpectedReturnsForPlanningCustomStocksBase.RegressionPrediction:
      return "RegressionPrediction";
    case WirePlanParamsServerExpectedReturnsForPlanningCustomStocksBase.ConservativeEstimate:
      return "ConservativeEstimate";
    case WirePlanParamsServerExpectedReturnsForPlanningCustomStocksBase.OneOverCape:
      return "OneOverCape";
    case WirePlanParamsServerExpectedReturnsForPlanningCustomStocksBase.HistoricalStocks:
      return "HistoricalStocks";
    case WirePlanParamsServerExpectedReturnsForPlanningCustomStocksBase.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum WirePlanParamsServerExpectedReturnsForPlanningCustomBondsBase {
  TwentyYearTipsYield = 0,
  HistoricalBonds = 1,
  UNRECOGNIZED = -1,
}

export function wirePlanParamsServerExpectedReturnsForPlanningCustomBondsBaseFromJSON(
  object: any,
): WirePlanParamsServerExpectedReturnsForPlanningCustomBondsBase {
  switch (object) {
    case 0:
    case "TwentyYearTipsYield":
      return WirePlanParamsServerExpectedReturnsForPlanningCustomBondsBase.TwentyYearTipsYield;
    case 1:
    case "HistoricalBonds":
      return WirePlanParamsServerExpectedReturnsForPlanningCustomBondsBase.HistoricalBonds;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WirePlanParamsServerExpectedReturnsForPlanningCustomBondsBase.UNRECOGNIZED;
  }
}

export function wirePlanParamsServerExpectedReturnsForPlanningCustomBondsBaseToJSON(
  object: WirePlanParamsServerExpectedReturnsForPlanningCustomBondsBase,
): string {
  switch (object) {
    case WirePlanParamsServerExpectedReturnsForPlanningCustomBondsBase.TwentyYearTipsYield:
      return "TwentyYearTipsYield";
    case WirePlanParamsServerExpectedReturnsForPlanningCustomBondsBase.HistoricalBonds:
      return "HistoricalBonds";
    case WirePlanParamsServerExpectedReturnsForPlanningCustomBondsBase.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum WirePlanParamsServerStrategy {
  StrategyTpaw = 0,
  StrategySpaw = 1,
  StrategySwr = 2,
  UNRECOGNIZED = -1,
}

export function wirePlanParamsServerStrategyFromJSON(object: any): WirePlanParamsServerStrategy {
  switch (object) {
    case 0:
    case "StrategyTpaw":
      return WirePlanParamsServerStrategy.StrategyTpaw;
    case 1:
    case "StrategySpaw":
      return WirePlanParamsServerStrategy.StrategySpaw;
    case 2:
    case "StrategySwr":
      return WirePlanParamsServerStrategy.StrategySwr;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WirePlanParamsServerStrategy.UNRECOGNIZED;
  }
}

export function wirePlanParamsServerStrategyToJSON(object: WirePlanParamsServerStrategy): string {
  switch (object) {
    case WirePlanParamsServerStrategy.StrategyTpaw:
      return "StrategyTpaw";
    case WirePlanParamsServerStrategy.StrategySpaw:
      return "StrategySpaw";
    case WirePlanParamsServerStrategy.StrategySwr:
      return "StrategySwr";
    case WirePlanParamsServerStrategy.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface WireInt32Range {
  start: number;
  end: number;
}

export interface WireLogDouble {
  log: number;
}

export interface WireScaleLogDouble {
  scale: WireLogDouble | undefined;
}

export interface WireStocksAndBondsDouble {
  stocks: number;
  bonds: number;
}

export interface WirePlanParamsServerAmountTimed {
  id: string;
  isNominal: boolean;
  monthRange?: WireInt32Range | undefined;
  validMonthRange: WireInt32Range | undefined;
  everyXMonths: number;
  baseAmount: number;
  deltaEveryRecurrence?: { $case: "percent"; percent: number } | { $case: "amount"; amount: number } | undefined;
}

export interface WirePlanParamsServerAmountNotTimed {
  isNominal: boolean;
  amount: number;
}

export interface WireGlidePathIntermediate {
  month: number;
  value: number;
}

export interface WireGlidePath {
  now: number;
  intermediate: WireGlidePathIntermediate[];
  end: number;
}

/** ------- CONSTANTS ------- */
export interface WirePlanParamsServerConstantsDefaultSWRWithdrawalConstants {
  coeff1: number;
  coeff2: number;
}

export interface WirePlanParamsServerConstants {
  riskToleranceNumIntegerValuesStartingFrom0: number;
  riskToleranceStartRra: number;
  riskToleranceEndRra: number;
}

/** ------- AGES ------- */
export interface WirePlanParamsServerAgesSimulationMonths {
  numMonths: number;
  withdrawalStartMonth: number;
}

export interface WirePlanParamsServerAgesPerson {
  currentAge: number;
  maxAge: number;
}

export interface WirePlanParamsServerAges {
  simulationMonths: WirePlanParamsServerAgesSimulationMonths | undefined;
  longerLivedPerson: WirePlanParamsServerAgesPerson | undefined;
}

/** ----- WEALTH ----- */
export interface WirePlanParamsServerPortfolioBalanceUpdatedAt {
  updatedTo: number;
  updatedAtId: string;
  updatedAtTimestampMs: number;
}

export interface WirePlanParamsServerWealth {
  portfolioBalance?: { $case: "updatedHere"; updatedHere: number } | {
    $case: "notUpdatedHere";
    notUpdatedHere: WirePlanParamsServerPortfolioBalanceUpdatedAt;
  } | undefined;
  incomeDuringRetirement: WirePlanParamsServerAmountTimed[];
  futureSavings: WirePlanParamsServerAmountTimed[];
}

/** ------- ADJUSTMENTS TO SPENDING ------- */
export interface WirePlanParamsServerAdjustmentsToSpendingTpawAndSpawLegacy {
  total: number;
  external: WirePlanParamsServerAmountNotTimed[];
}

export interface WirePlanParamsServerAdjustmentsToSpendingTpawAndSpaw {
  spendingCeiling?: WireBoxedDouble | undefined;
  spendingFloor?: WireBoxedDouble | undefined;
  legacy: WirePlanParamsServerAdjustmentsToSpendingTpawAndSpawLegacy | undefined;
}

export interface WirePlanParamsServerAdjustmentsToSpendingExtraSpending {
  essential: WirePlanParamsServerAmountTimed[];
  discretionary: WirePlanParamsServerAmountTimed[];
}

export interface WirePlanParamsServerAdjustmentsToSpending {
  extraSpending: WirePlanParamsServerAdjustmentsToSpendingExtraSpending | undefined;
  tpawAndSpaw: WirePlanParamsServerAdjustmentsToSpendingTpawAndSpaw | undefined;
}

/** ------- RISK ------- */
export interface WirePlanParamsServerRiskTPAWRiskTolerance {
  at20: number;
  deltaAtMaxAge: number;
  forLegacyAsDeltaFromAt20: number;
}

export interface WirePlanParamsServerRiskTPAW {
  riskTolerance: WirePlanParamsServerRiskTPAWRiskTolerance | undefined;
  timePreference: number;
  additionalAnnualSpendingTilt: number;
}

export interface WirePlanParamsServerRiskSPAW {
  annualSpendingTilt: number;
}

export interface WirePlanParamsServerRiskSPAWAndSWR {
  stockAllocation: WireGlidePath | undefined;
}

export interface WirePlanParamsServerRiskSWR {
  withdrawal?:
    | { $case: "percentPerYear"; percentPerYear: number }
    | { $case: "amountPerMonth"; amountPerMonth: number }
    | undefined;
}

export interface WirePlanParamsServerRisk {
  tpaw: WirePlanParamsServerRiskTPAW | undefined;
  spaw: WirePlanParamsServerRiskSPAW | undefined;
  spawAndSwr: WirePlanParamsServerRiskSPAWAndSWR | undefined;
  swr: WirePlanParamsServerRiskSWR | undefined;
}

export interface WirePlanParamsServerExpectedReturnsForPlanningCustomStocks {
  base: WirePlanParamsServerExpectedReturnsForPlanningCustomStocksBase;
  delta: number;
}

export interface WirePlanParamsServerExpectedReturnsForPlanningCustomBonds {
  base: WirePlanParamsServerExpectedReturnsForPlanningCustomBondsBase;
  delta: number;
}

export interface WirePlanParamsServerExpectedReturnsForPlanningCustom {
  stocks: WirePlanParamsServerExpectedReturnsForPlanningCustomStocks | undefined;
  bonds: WirePlanParamsServerExpectedReturnsForPlanningCustomBonds | undefined;
}

export interface WirePlanParamsServerExpectedReturnsForPlanning {
  empiricalAnnualNonLog?:
    | { $case: "regressionPrediction20YearTipsYield"; regressionPrediction20YearTipsYield: NoMessage }
    | { $case: "conservativeEstimate20YearTipsYield"; conservativeEstimate20YearTipsYield: NoMessage }
    | { $case: "oneOverCape20YearTipsYield"; oneOverCape20YearTipsYield: NoMessage }
    | { $case: "historical"; historical: NoMessage }
    | { $case: "fixedEquityPremium"; fixedEquityPremium: number }
    | { $case: "custom"; custom: WirePlanParamsServerExpectedReturnsForPlanningCustom }
    | { $case: "fixed"; fixed: WireStocksAndBondsDouble }
    | undefined;
}

export interface WirePlanParamsServerReturnStatsForPlanningStandardDeviation {
  stocks: WireScaleLogDouble | undefined;
}

export interface WirePlanParamsServerReturnStatsForPlanning {
  expectedValue: WirePlanParamsServerExpectedReturnsForPlanning | undefined;
  standardDeviation: WirePlanParamsServerReturnStatsForPlanningStandardDeviation | undefined;
}

export interface WirePlanParamsServerHistoricalReturnsAdjustmentStandardDeviation {
  bonds: WireScaleLogDouble | undefined;
}

export interface WirePlanParamsServerHistoricalReturnsAdjustment {
  standardDeviation: WirePlanParamsServerHistoricalReturnsAdjustmentStandardDeviation | undefined;
  overrideToFixedForTesting?:
    | { $case: "none"; none: NoMessage }
    | { $case: "toExpectedReturnsForPlanning"; toExpectedReturnsForPlanning: NoMessage }
    | { $case: "manual"; manual: WireStocksAndBondsDouble }
    | undefined;
}

export interface WirePlanParamsServerSamplingMonteCarlo {
  seed: number;
  numRuns: number;
  blockSize: number;
  staggerRunStarts: boolean;
}

export interface WirePlanParamsServerAdvanced {
  returnStatsForPlanning: WirePlanParamsServerReturnStatsForPlanning | undefined;
  historicalReturnsAdjustment: WirePlanParamsServerHistoricalReturnsAdjustment | undefined;
  annualInflation?: { $case: "suggested"; suggested: NoMessage } | { $case: "manual"; manual: number } | undefined;
  sampling?: { $case: "historical"; historical: NoMessage } | {
    $case: "monteCarlo";
    monteCarlo: WirePlanParamsServerSamplingMonteCarlo;
  } | undefined;
  strategy: WirePlanParamsServerStrategy;
}

/** -------  PLAN PARAMS SERVER ------- */
export interface WirePlanParamsServer {
  /**
   * Note, this is not the time the plan params were created, but the evaluation
   * timestamp (which is also the timestamp for plan param normalization).
   */
  evaluationTimestampMs: number;
  constants: WirePlanParamsServerConstants | undefined;
  ages: WirePlanParamsServerAges | undefined;
  wealth: WirePlanParamsServerWealth | undefined;
  adjustmentsToSpending: WirePlanParamsServerAdjustmentsToSpending | undefined;
  risk: WirePlanParamsServerRisk | undefined;
  advanced: WirePlanParamsServerAdvanced | undefined;
}

function createBaseWireInt32Range(): WireInt32Range {
  return { start: 0, end: 0 };
}

export const WireInt32Range: MessageFns<WireInt32Range> = {
  encode(message: WireInt32Range, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.start !== 0) {
      writer.uint32(8).int32(message.start);
    }
    if (message.end !== 0) {
      writer.uint32(16).int32(message.end);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WireInt32Range {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireInt32Range();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.start = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.end = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireInt32Range {
    return {
      start: isSet(object.start) ? globalThis.Number(object.start) : 0,
      end: isSet(object.end) ? globalThis.Number(object.end) : 0,
    };
  },

  toJSON(message: WireInt32Range): unknown {
    const obj: any = {};
    if (message.start !== 0) {
      obj.start = Math.round(message.start);
    }
    if (message.end !== 0) {
      obj.end = Math.round(message.end);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WireInt32Range>, I>>(base?: I): WireInt32Range {
    return WireInt32Range.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WireInt32Range>, I>>(object: I): WireInt32Range {
    const message = createBaseWireInt32Range();
    message.start = object.start ?? 0;
    message.end = object.end ?? 0;
    return message;
  },
};

function createBaseWireLogDouble(): WireLogDouble {
  return { log: 0 };
}

export const WireLogDouble: MessageFns<WireLogDouble> = {
  encode(message: WireLogDouble, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.log !== 0) {
      writer.uint32(9).double(message.log);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WireLogDouble {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireLogDouble();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.log = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireLogDouble {
    return { log: isSet(object.log) ? globalThis.Number(object.log) : 0 };
  },

  toJSON(message: WireLogDouble): unknown {
    const obj: any = {};
    if (message.log !== 0) {
      obj.log = message.log;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WireLogDouble>, I>>(base?: I): WireLogDouble {
    return WireLogDouble.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WireLogDouble>, I>>(object: I): WireLogDouble {
    const message = createBaseWireLogDouble();
    message.log = object.log ?? 0;
    return message;
  },
};

function createBaseWireScaleLogDouble(): WireScaleLogDouble {
  return { scale: undefined };
}

export const WireScaleLogDouble: MessageFns<WireScaleLogDouble> = {
  encode(message: WireScaleLogDouble, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.scale !== undefined) {
      WireLogDouble.encode(message.scale, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WireScaleLogDouble {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireScaleLogDouble();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.scale = WireLogDouble.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireScaleLogDouble {
    return { scale: isSet(object.scale) ? WireLogDouble.fromJSON(object.scale) : undefined };
  },

  toJSON(message: WireScaleLogDouble): unknown {
    const obj: any = {};
    if (message.scale !== undefined) {
      obj.scale = WireLogDouble.toJSON(message.scale);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WireScaleLogDouble>, I>>(base?: I): WireScaleLogDouble {
    return WireScaleLogDouble.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WireScaleLogDouble>, I>>(object: I): WireScaleLogDouble {
    const message = createBaseWireScaleLogDouble();
    message.scale = (object.scale !== undefined && object.scale !== null)
      ? WireLogDouble.fromPartial(object.scale)
      : undefined;
    return message;
  },
};

function createBaseWireStocksAndBondsDouble(): WireStocksAndBondsDouble {
  return { stocks: 0, bonds: 0 };
}

export const WireStocksAndBondsDouble: MessageFns<WireStocksAndBondsDouble> = {
  encode(message: WireStocksAndBondsDouble, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stocks !== 0) {
      writer.uint32(9).double(message.stocks);
    }
    if (message.bonds !== 0) {
      writer.uint32(17).double(message.bonds);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WireStocksAndBondsDouble {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireStocksAndBondsDouble();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.stocks = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.bonds = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireStocksAndBondsDouble {
    return {
      stocks: isSet(object.stocks) ? globalThis.Number(object.stocks) : 0,
      bonds: isSet(object.bonds) ? globalThis.Number(object.bonds) : 0,
    };
  },

  toJSON(message: WireStocksAndBondsDouble): unknown {
    const obj: any = {};
    if (message.stocks !== 0) {
      obj.stocks = message.stocks;
    }
    if (message.bonds !== 0) {
      obj.bonds = message.bonds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WireStocksAndBondsDouble>, I>>(base?: I): WireStocksAndBondsDouble {
    return WireStocksAndBondsDouble.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WireStocksAndBondsDouble>, I>>(object: I): WireStocksAndBondsDouble {
    const message = createBaseWireStocksAndBondsDouble();
    message.stocks = object.stocks ?? 0;
    message.bonds = object.bonds ?? 0;
    return message;
  },
};

function createBaseWirePlanParamsServerAmountTimed(): WirePlanParamsServerAmountTimed {
  return {
    id: "",
    isNominal: false,
    monthRange: undefined,
    validMonthRange: undefined,
    everyXMonths: 0,
    baseAmount: 0,
    deltaEveryRecurrence: undefined,
  };
}

export const WirePlanParamsServerAmountTimed: MessageFns<WirePlanParamsServerAmountTimed> = {
  encode(message: WirePlanParamsServerAmountTimed, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.isNominal !== false) {
      writer.uint32(16).bool(message.isNominal);
    }
    if (message.monthRange !== undefined) {
      WireInt32Range.encode(message.monthRange, writer.uint32(26).fork()).join();
    }
    if (message.validMonthRange !== undefined) {
      WireInt32Range.encode(message.validMonthRange, writer.uint32(34).fork()).join();
    }
    if (message.everyXMonths !== 0) {
      writer.uint32(40).int32(message.everyXMonths);
    }
    if (message.baseAmount !== 0) {
      writer.uint32(49).double(message.baseAmount);
    }
    switch (message.deltaEveryRecurrence?.$case) {
      case "percent":
        writer.uint32(57).double(message.deltaEveryRecurrence.percent);
        break;
      case "amount":
        writer.uint32(65).double(message.deltaEveryRecurrence.amount);
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WirePlanParamsServerAmountTimed {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerAmountTimed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.isNominal = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.monthRange = WireInt32Range.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.validMonthRange = WireInt32Range.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.everyXMonths = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 49) {
            break;
          }

          message.baseAmount = reader.double();
          continue;
        }
        case 7: {
          if (tag !== 57) {
            break;
          }

          message.deltaEveryRecurrence = { $case: "percent", percent: reader.double() };
          continue;
        }
        case 8: {
          if (tag !== 65) {
            break;
          }

          message.deltaEveryRecurrence = { $case: "amount", amount: reader.double() };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerAmountTimed {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      isNominal: isSet(object.isNominal) ? globalThis.Boolean(object.isNominal) : false,
      monthRange: isSet(object.monthRange) ? WireInt32Range.fromJSON(object.monthRange) : undefined,
      validMonthRange: isSet(object.validMonthRange) ? WireInt32Range.fromJSON(object.validMonthRange) : undefined,
      everyXMonths: isSet(object.everyXMonths) ? globalThis.Number(object.everyXMonths) : 0,
      baseAmount: isSet(object.baseAmount) ? globalThis.Number(object.baseAmount) : 0,
      deltaEveryRecurrence: isSet(object.percent)
        ? { $case: "percent", percent: globalThis.Number(object.percent) }
        : isSet(object.amount)
        ? { $case: "amount", amount: globalThis.Number(object.amount) }
        : undefined,
    };
  },

  toJSON(message: WirePlanParamsServerAmountTimed): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.isNominal !== false) {
      obj.isNominal = message.isNominal;
    }
    if (message.monthRange !== undefined) {
      obj.monthRange = WireInt32Range.toJSON(message.monthRange);
    }
    if (message.validMonthRange !== undefined) {
      obj.validMonthRange = WireInt32Range.toJSON(message.validMonthRange);
    }
    if (message.everyXMonths !== 0) {
      obj.everyXMonths = Math.round(message.everyXMonths);
    }
    if (message.baseAmount !== 0) {
      obj.baseAmount = message.baseAmount;
    }
    if (message.deltaEveryRecurrence?.$case === "percent") {
      obj.percent = message.deltaEveryRecurrence.percent;
    } else if (message.deltaEveryRecurrence?.$case === "amount") {
      obj.amount = message.deltaEveryRecurrence.amount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerAmountTimed>, I>>(base?: I): WirePlanParamsServerAmountTimed {
    return WirePlanParamsServerAmountTimed.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerAmountTimed>, I>>(
    object: I,
  ): WirePlanParamsServerAmountTimed {
    const message = createBaseWirePlanParamsServerAmountTimed();
    message.id = object.id ?? "";
    message.isNominal = object.isNominal ?? false;
    message.monthRange = (object.monthRange !== undefined && object.monthRange !== null)
      ? WireInt32Range.fromPartial(object.monthRange)
      : undefined;
    message.validMonthRange = (object.validMonthRange !== undefined && object.validMonthRange !== null)
      ? WireInt32Range.fromPartial(object.validMonthRange)
      : undefined;
    message.everyXMonths = object.everyXMonths ?? 0;
    message.baseAmount = object.baseAmount ?? 0;
    switch (object.deltaEveryRecurrence?.$case) {
      case "percent": {
        if (object.deltaEveryRecurrence?.percent !== undefined && object.deltaEveryRecurrence?.percent !== null) {
          message.deltaEveryRecurrence = { $case: "percent", percent: object.deltaEveryRecurrence.percent };
        }
        break;
      }
      case "amount": {
        if (object.deltaEveryRecurrence?.amount !== undefined && object.deltaEveryRecurrence?.amount !== null) {
          message.deltaEveryRecurrence = { $case: "amount", amount: object.deltaEveryRecurrence.amount };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseWirePlanParamsServerAmountNotTimed(): WirePlanParamsServerAmountNotTimed {
  return { isNominal: false, amount: 0 };
}

export const WirePlanParamsServerAmountNotTimed: MessageFns<WirePlanParamsServerAmountNotTimed> = {
  encode(message: WirePlanParamsServerAmountNotTimed, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isNominal !== false) {
      writer.uint32(8).bool(message.isNominal);
    }
    if (message.amount !== 0) {
      writer.uint32(17).double(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WirePlanParamsServerAmountNotTimed {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerAmountNotTimed();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isNominal = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.amount = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerAmountNotTimed {
    return {
      isNominal: isSet(object.isNominal) ? globalThis.Boolean(object.isNominal) : false,
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
    };
  },

  toJSON(message: WirePlanParamsServerAmountNotTimed): unknown {
    const obj: any = {};
    if (message.isNominal !== false) {
      obj.isNominal = message.isNominal;
    }
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerAmountNotTimed>, I>>(
    base?: I,
  ): WirePlanParamsServerAmountNotTimed {
    return WirePlanParamsServerAmountNotTimed.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerAmountNotTimed>, I>>(
    object: I,
  ): WirePlanParamsServerAmountNotTimed {
    const message = createBaseWirePlanParamsServerAmountNotTimed();
    message.isNominal = object.isNominal ?? false;
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBaseWireGlidePathIntermediate(): WireGlidePathIntermediate {
  return { month: 0, value: 0 };
}

export const WireGlidePathIntermediate: MessageFns<WireGlidePathIntermediate> = {
  encode(message: WireGlidePathIntermediate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.month !== 0) {
      writer.uint32(8).uint32(message.month);
    }
    if (message.value !== 0) {
      writer.uint32(17).double(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WireGlidePathIntermediate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireGlidePathIntermediate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.month = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.value = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireGlidePathIntermediate {
    return {
      month: isSet(object.month) ? globalThis.Number(object.month) : 0,
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: WireGlidePathIntermediate): unknown {
    const obj: any = {};
    if (message.month !== 0) {
      obj.month = Math.round(message.month);
    }
    if (message.value !== 0) {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WireGlidePathIntermediate>, I>>(base?: I): WireGlidePathIntermediate {
    return WireGlidePathIntermediate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WireGlidePathIntermediate>, I>>(object: I): WireGlidePathIntermediate {
    const message = createBaseWireGlidePathIntermediate();
    message.month = object.month ?? 0;
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseWireGlidePath(): WireGlidePath {
  return { now: 0, intermediate: [], end: 0 };
}

export const WireGlidePath: MessageFns<WireGlidePath> = {
  encode(message: WireGlidePath, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.now !== 0) {
      writer.uint32(9).double(message.now);
    }
    for (const v of message.intermediate) {
      WireGlidePathIntermediate.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.end !== 0) {
      writer.uint32(25).double(message.end);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WireGlidePath {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireGlidePath();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.now = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.intermediate.push(WireGlidePathIntermediate.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.end = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireGlidePath {
    return {
      now: isSet(object.now) ? globalThis.Number(object.now) : 0,
      intermediate: globalThis.Array.isArray(object?.intermediate)
        ? object.intermediate.map((e: any) => WireGlidePathIntermediate.fromJSON(e))
        : [],
      end: isSet(object.end) ? globalThis.Number(object.end) : 0,
    };
  },

  toJSON(message: WireGlidePath): unknown {
    const obj: any = {};
    if (message.now !== 0) {
      obj.now = message.now;
    }
    if (message.intermediate?.length) {
      obj.intermediate = message.intermediate.map((e) => WireGlidePathIntermediate.toJSON(e));
    }
    if (message.end !== 0) {
      obj.end = message.end;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WireGlidePath>, I>>(base?: I): WireGlidePath {
    return WireGlidePath.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WireGlidePath>, I>>(object: I): WireGlidePath {
    const message = createBaseWireGlidePath();
    message.now = object.now ?? 0;
    message.intermediate = object.intermediate?.map((e) => WireGlidePathIntermediate.fromPartial(e)) || [];
    message.end = object.end ?? 0;
    return message;
  },
};

function createBaseWirePlanParamsServerConstantsDefaultSWRWithdrawalConstants(): WirePlanParamsServerConstantsDefaultSWRWithdrawalConstants {
  return { coeff1: 0, coeff2: 0 };
}

export const WirePlanParamsServerConstantsDefaultSWRWithdrawalConstants: MessageFns<
  WirePlanParamsServerConstantsDefaultSWRWithdrawalConstants
> = {
  encode(
    message: WirePlanParamsServerConstantsDefaultSWRWithdrawalConstants,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.coeff1 !== 0) {
      writer.uint32(9).double(message.coeff1);
    }
    if (message.coeff2 !== 0) {
      writer.uint32(17).double(message.coeff2);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WirePlanParamsServerConstantsDefaultSWRWithdrawalConstants {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerConstantsDefaultSWRWithdrawalConstants();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.coeff1 = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.coeff2 = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerConstantsDefaultSWRWithdrawalConstants {
    return {
      coeff1: isSet(object.coeff1) ? globalThis.Number(object.coeff1) : 0,
      coeff2: isSet(object.coeff2) ? globalThis.Number(object.coeff2) : 0,
    };
  },

  toJSON(message: WirePlanParamsServerConstantsDefaultSWRWithdrawalConstants): unknown {
    const obj: any = {};
    if (message.coeff1 !== 0) {
      obj.coeff1 = message.coeff1;
    }
    if (message.coeff2 !== 0) {
      obj.coeff2 = message.coeff2;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerConstantsDefaultSWRWithdrawalConstants>, I>>(
    base?: I,
  ): WirePlanParamsServerConstantsDefaultSWRWithdrawalConstants {
    return WirePlanParamsServerConstantsDefaultSWRWithdrawalConstants.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerConstantsDefaultSWRWithdrawalConstants>, I>>(
    object: I,
  ): WirePlanParamsServerConstantsDefaultSWRWithdrawalConstants {
    const message = createBaseWirePlanParamsServerConstantsDefaultSWRWithdrawalConstants();
    message.coeff1 = object.coeff1 ?? 0;
    message.coeff2 = object.coeff2 ?? 0;
    return message;
  },
};

function createBaseWirePlanParamsServerConstants(): WirePlanParamsServerConstants {
  return { riskToleranceNumIntegerValuesStartingFrom0: 0, riskToleranceStartRra: 0, riskToleranceEndRra: 0 };
}

export const WirePlanParamsServerConstants: MessageFns<WirePlanParamsServerConstants> = {
  encode(message: WirePlanParamsServerConstants, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.riskToleranceNumIntegerValuesStartingFrom0 !== 0) {
      writer.uint32(8).int32(message.riskToleranceNumIntegerValuesStartingFrom0);
    }
    if (message.riskToleranceStartRra !== 0) {
      writer.uint32(17).double(message.riskToleranceStartRra);
    }
    if (message.riskToleranceEndRra !== 0) {
      writer.uint32(25).double(message.riskToleranceEndRra);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WirePlanParamsServerConstants {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerConstants();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.riskToleranceNumIntegerValuesStartingFrom0 = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.riskToleranceStartRra = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.riskToleranceEndRra = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerConstants {
    return {
      riskToleranceNumIntegerValuesStartingFrom0: isSet(object.riskToleranceNumIntegerValuesStartingFrom0)
        ? globalThis.Number(object.riskToleranceNumIntegerValuesStartingFrom0)
        : 0,
      riskToleranceStartRra: isSet(object.riskToleranceStartRra) ? globalThis.Number(object.riskToleranceStartRra) : 0,
      riskToleranceEndRra: isSet(object.riskToleranceEndRra) ? globalThis.Number(object.riskToleranceEndRra) : 0,
    };
  },

  toJSON(message: WirePlanParamsServerConstants): unknown {
    const obj: any = {};
    if (message.riskToleranceNumIntegerValuesStartingFrom0 !== 0) {
      obj.riskToleranceNumIntegerValuesStartingFrom0 = Math.round(message.riskToleranceNumIntegerValuesStartingFrom0);
    }
    if (message.riskToleranceStartRra !== 0) {
      obj.riskToleranceStartRra = message.riskToleranceStartRra;
    }
    if (message.riskToleranceEndRra !== 0) {
      obj.riskToleranceEndRra = message.riskToleranceEndRra;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerConstants>, I>>(base?: I): WirePlanParamsServerConstants {
    return WirePlanParamsServerConstants.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerConstants>, I>>(
    object: I,
  ): WirePlanParamsServerConstants {
    const message = createBaseWirePlanParamsServerConstants();
    message.riskToleranceNumIntegerValuesStartingFrom0 = object.riskToleranceNumIntegerValuesStartingFrom0 ?? 0;
    message.riskToleranceStartRra = object.riskToleranceStartRra ?? 0;
    message.riskToleranceEndRra = object.riskToleranceEndRra ?? 0;
    return message;
  },
};

function createBaseWirePlanParamsServerAgesSimulationMonths(): WirePlanParamsServerAgesSimulationMonths {
  return { numMonths: 0, withdrawalStartMonth: 0 };
}

export const WirePlanParamsServerAgesSimulationMonths: MessageFns<WirePlanParamsServerAgesSimulationMonths> = {
  encode(message: WirePlanParamsServerAgesSimulationMonths, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.numMonths !== 0) {
      writer.uint32(8).uint32(message.numMonths);
    }
    if (message.withdrawalStartMonth !== 0) {
      writer.uint32(16).uint32(message.withdrawalStartMonth);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WirePlanParamsServerAgesSimulationMonths {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerAgesSimulationMonths();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.numMonths = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.withdrawalStartMonth = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerAgesSimulationMonths {
    return {
      numMonths: isSet(object.numMonths) ? globalThis.Number(object.numMonths) : 0,
      withdrawalStartMonth: isSet(object.withdrawalStartMonth) ? globalThis.Number(object.withdrawalStartMonth) : 0,
    };
  },

  toJSON(message: WirePlanParamsServerAgesSimulationMonths): unknown {
    const obj: any = {};
    if (message.numMonths !== 0) {
      obj.numMonths = Math.round(message.numMonths);
    }
    if (message.withdrawalStartMonth !== 0) {
      obj.withdrawalStartMonth = Math.round(message.withdrawalStartMonth);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerAgesSimulationMonths>, I>>(
    base?: I,
  ): WirePlanParamsServerAgesSimulationMonths {
    return WirePlanParamsServerAgesSimulationMonths.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerAgesSimulationMonths>, I>>(
    object: I,
  ): WirePlanParamsServerAgesSimulationMonths {
    const message = createBaseWirePlanParamsServerAgesSimulationMonths();
    message.numMonths = object.numMonths ?? 0;
    message.withdrawalStartMonth = object.withdrawalStartMonth ?? 0;
    return message;
  },
};

function createBaseWirePlanParamsServerAgesPerson(): WirePlanParamsServerAgesPerson {
  return { currentAge: 0, maxAge: 0 };
}

export const WirePlanParamsServerAgesPerson: MessageFns<WirePlanParamsServerAgesPerson> = {
  encode(message: WirePlanParamsServerAgesPerson, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.currentAge !== 0) {
      writer.uint32(8).uint32(message.currentAge);
    }
    if (message.maxAge !== 0) {
      writer.uint32(16).uint32(message.maxAge);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WirePlanParamsServerAgesPerson {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerAgesPerson();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.currentAge = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.maxAge = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerAgesPerson {
    return {
      currentAge: isSet(object.currentAge) ? globalThis.Number(object.currentAge) : 0,
      maxAge: isSet(object.maxAge) ? globalThis.Number(object.maxAge) : 0,
    };
  },

  toJSON(message: WirePlanParamsServerAgesPerson): unknown {
    const obj: any = {};
    if (message.currentAge !== 0) {
      obj.currentAge = Math.round(message.currentAge);
    }
    if (message.maxAge !== 0) {
      obj.maxAge = Math.round(message.maxAge);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerAgesPerson>, I>>(base?: I): WirePlanParamsServerAgesPerson {
    return WirePlanParamsServerAgesPerson.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerAgesPerson>, I>>(
    object: I,
  ): WirePlanParamsServerAgesPerson {
    const message = createBaseWirePlanParamsServerAgesPerson();
    message.currentAge = object.currentAge ?? 0;
    message.maxAge = object.maxAge ?? 0;
    return message;
  },
};

function createBaseWirePlanParamsServerAges(): WirePlanParamsServerAges {
  return { simulationMonths: undefined, longerLivedPerson: undefined };
}

export const WirePlanParamsServerAges: MessageFns<WirePlanParamsServerAges> = {
  encode(message: WirePlanParamsServerAges, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.simulationMonths !== undefined) {
      WirePlanParamsServerAgesSimulationMonths.encode(message.simulationMonths, writer.uint32(10).fork()).join();
    }
    if (message.longerLivedPerson !== undefined) {
      WirePlanParamsServerAgesPerson.encode(message.longerLivedPerson, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WirePlanParamsServerAges {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerAges();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.simulationMonths = WirePlanParamsServerAgesSimulationMonths.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.longerLivedPerson = WirePlanParamsServerAgesPerson.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerAges {
    return {
      simulationMonths: isSet(object.simulationMonths)
        ? WirePlanParamsServerAgesSimulationMonths.fromJSON(object.simulationMonths)
        : undefined,
      longerLivedPerson: isSet(object.longerLivedPerson)
        ? WirePlanParamsServerAgesPerson.fromJSON(object.longerLivedPerson)
        : undefined,
    };
  },

  toJSON(message: WirePlanParamsServerAges): unknown {
    const obj: any = {};
    if (message.simulationMonths !== undefined) {
      obj.simulationMonths = WirePlanParamsServerAgesSimulationMonths.toJSON(message.simulationMonths);
    }
    if (message.longerLivedPerson !== undefined) {
      obj.longerLivedPerson = WirePlanParamsServerAgesPerson.toJSON(message.longerLivedPerson);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerAges>, I>>(base?: I): WirePlanParamsServerAges {
    return WirePlanParamsServerAges.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerAges>, I>>(object: I): WirePlanParamsServerAges {
    const message = createBaseWirePlanParamsServerAges();
    message.simulationMonths = (object.simulationMonths !== undefined && object.simulationMonths !== null)
      ? WirePlanParamsServerAgesSimulationMonths.fromPartial(object.simulationMonths)
      : undefined;
    message.longerLivedPerson = (object.longerLivedPerson !== undefined && object.longerLivedPerson !== null)
      ? WirePlanParamsServerAgesPerson.fromPartial(object.longerLivedPerson)
      : undefined;
    return message;
  },
};

function createBaseWirePlanParamsServerPortfolioBalanceUpdatedAt(): WirePlanParamsServerPortfolioBalanceUpdatedAt {
  return { updatedTo: 0, updatedAtId: "", updatedAtTimestampMs: 0 };
}

export const WirePlanParamsServerPortfolioBalanceUpdatedAt: MessageFns<WirePlanParamsServerPortfolioBalanceUpdatedAt> =
  {
    encode(
      message: WirePlanParamsServerPortfolioBalanceUpdatedAt,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.updatedTo !== 0) {
        writer.uint32(8).int64(message.updatedTo);
      }
      if (message.updatedAtId !== "") {
        writer.uint32(18).string(message.updatedAtId);
      }
      if (message.updatedAtTimestampMs !== 0) {
        writer.uint32(24).int64(message.updatedAtTimestampMs);
      }
      return writer;
    },

    decode(input: BinaryReader | Uint8Array, length?: number): WirePlanParamsServerPortfolioBalanceUpdatedAt {
      const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseWirePlanParamsServerPortfolioBalanceUpdatedAt();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 8) {
              break;
            }

            message.updatedTo = longToNumber(reader.int64());
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.updatedAtId = reader.string();
            continue;
          }
          case 3: {
            if (tag !== 24) {
              break;
            }

            message.updatedAtTimestampMs = longToNumber(reader.int64());
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): WirePlanParamsServerPortfolioBalanceUpdatedAt {
      return {
        updatedTo: isSet(object.updatedTo) ? globalThis.Number(object.updatedTo) : 0,
        updatedAtId: isSet(object.updatedAtId) ? globalThis.String(object.updatedAtId) : "",
        updatedAtTimestampMs: isSet(object.updatedAtTimestampMs) ? globalThis.Number(object.updatedAtTimestampMs) : 0,
      };
    },

    toJSON(message: WirePlanParamsServerPortfolioBalanceUpdatedAt): unknown {
      const obj: any = {};
      if (message.updatedTo !== 0) {
        obj.updatedTo = Math.round(message.updatedTo);
      }
      if (message.updatedAtId !== "") {
        obj.updatedAtId = message.updatedAtId;
      }
      if (message.updatedAtTimestampMs !== 0) {
        obj.updatedAtTimestampMs = Math.round(message.updatedAtTimestampMs);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<WirePlanParamsServerPortfolioBalanceUpdatedAt>, I>>(
      base?: I,
    ): WirePlanParamsServerPortfolioBalanceUpdatedAt {
      return WirePlanParamsServerPortfolioBalanceUpdatedAt.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerPortfolioBalanceUpdatedAt>, I>>(
      object: I,
    ): WirePlanParamsServerPortfolioBalanceUpdatedAt {
      const message = createBaseWirePlanParamsServerPortfolioBalanceUpdatedAt();
      message.updatedTo = object.updatedTo ?? 0;
      message.updatedAtId = object.updatedAtId ?? "";
      message.updatedAtTimestampMs = object.updatedAtTimestampMs ?? 0;
      return message;
    },
  };

function createBaseWirePlanParamsServerWealth(): WirePlanParamsServerWealth {
  return { portfolioBalance: undefined, incomeDuringRetirement: [], futureSavings: [] };
}

export const WirePlanParamsServerWealth: MessageFns<WirePlanParamsServerWealth> = {
  encode(message: WirePlanParamsServerWealth, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.portfolioBalance?.$case) {
      case "updatedHere":
        writer.uint32(8).int64(message.portfolioBalance.updatedHere);
        break;
      case "notUpdatedHere":
        WirePlanParamsServerPortfolioBalanceUpdatedAt.encode(
          message.portfolioBalance.notUpdatedHere,
          writer.uint32(18).fork(),
        ).join();
        break;
    }
    for (const v of message.incomeDuringRetirement) {
      WirePlanParamsServerAmountTimed.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.futureSavings) {
      WirePlanParamsServerAmountTimed.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WirePlanParamsServerWealth {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerWealth();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.portfolioBalance = { $case: "updatedHere", updatedHere: longToNumber(reader.int64()) };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.portfolioBalance = {
            $case: "notUpdatedHere",
            notUpdatedHere: WirePlanParamsServerPortfolioBalanceUpdatedAt.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.incomeDuringRetirement.push(WirePlanParamsServerAmountTimed.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.futureSavings.push(WirePlanParamsServerAmountTimed.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerWealth {
    return {
      portfolioBalance: isSet(object.updatedHere)
        ? { $case: "updatedHere", updatedHere: globalThis.Number(object.updatedHere) }
        : isSet(object.notUpdatedHere)
        ? {
          $case: "notUpdatedHere",
          notUpdatedHere: WirePlanParamsServerPortfolioBalanceUpdatedAt.fromJSON(object.notUpdatedHere),
        }
        : undefined,
      incomeDuringRetirement: globalThis.Array.isArray(object?.incomeDuringRetirement)
        ? object.incomeDuringRetirement.map((e: any) => WirePlanParamsServerAmountTimed.fromJSON(e))
        : [],
      futureSavings: globalThis.Array.isArray(object?.futureSavings)
        ? object.futureSavings.map((e: any) => WirePlanParamsServerAmountTimed.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WirePlanParamsServerWealth): unknown {
    const obj: any = {};
    if (message.portfolioBalance?.$case === "updatedHere") {
      obj.updatedHere = Math.round(message.portfolioBalance.updatedHere);
    } else if (message.portfolioBalance?.$case === "notUpdatedHere") {
      obj.notUpdatedHere = WirePlanParamsServerPortfolioBalanceUpdatedAt.toJSON(
        message.portfolioBalance.notUpdatedHere,
      );
    }
    if (message.incomeDuringRetirement?.length) {
      obj.incomeDuringRetirement = message.incomeDuringRetirement.map((e) => WirePlanParamsServerAmountTimed.toJSON(e));
    }
    if (message.futureSavings?.length) {
      obj.futureSavings = message.futureSavings.map((e) => WirePlanParamsServerAmountTimed.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerWealth>, I>>(base?: I): WirePlanParamsServerWealth {
    return WirePlanParamsServerWealth.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerWealth>, I>>(object: I): WirePlanParamsServerWealth {
    const message = createBaseWirePlanParamsServerWealth();
    switch (object.portfolioBalance?.$case) {
      case "updatedHere": {
        if (object.portfolioBalance?.updatedHere !== undefined && object.portfolioBalance?.updatedHere !== null) {
          message.portfolioBalance = { $case: "updatedHere", updatedHere: object.portfolioBalance.updatedHere };
        }
        break;
      }
      case "notUpdatedHere": {
        if (object.portfolioBalance?.notUpdatedHere !== undefined && object.portfolioBalance?.notUpdatedHere !== null) {
          message.portfolioBalance = {
            $case: "notUpdatedHere",
            notUpdatedHere: WirePlanParamsServerPortfolioBalanceUpdatedAt.fromPartial(
              object.portfolioBalance.notUpdatedHere,
            ),
          };
        }
        break;
      }
    }
    message.incomeDuringRetirement =
      object.incomeDuringRetirement?.map((e) => WirePlanParamsServerAmountTimed.fromPartial(e)) || [];
    message.futureSavings = object.futureSavings?.map((e) => WirePlanParamsServerAmountTimed.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWirePlanParamsServerAdjustmentsToSpendingTpawAndSpawLegacy(): WirePlanParamsServerAdjustmentsToSpendingTpawAndSpawLegacy {
  return { total: 0, external: [] };
}

export const WirePlanParamsServerAdjustmentsToSpendingTpawAndSpawLegacy: MessageFns<
  WirePlanParamsServerAdjustmentsToSpendingTpawAndSpawLegacy
> = {
  encode(
    message: WirePlanParamsServerAdjustmentsToSpendingTpawAndSpawLegacy,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.total !== 0) {
      writer.uint32(9).double(message.total);
    }
    for (const v of message.external) {
      WirePlanParamsServerAmountNotTimed.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WirePlanParamsServerAdjustmentsToSpendingTpawAndSpawLegacy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerAdjustmentsToSpendingTpawAndSpawLegacy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.total = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.external.push(WirePlanParamsServerAmountNotTimed.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerAdjustmentsToSpendingTpawAndSpawLegacy {
    return {
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      external: globalThis.Array.isArray(object?.external)
        ? object.external.map((e: any) => WirePlanParamsServerAmountNotTimed.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WirePlanParamsServerAdjustmentsToSpendingTpawAndSpawLegacy): unknown {
    const obj: any = {};
    if (message.total !== 0) {
      obj.total = message.total;
    }
    if (message.external?.length) {
      obj.external = message.external.map((e) => WirePlanParamsServerAmountNotTimed.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerAdjustmentsToSpendingTpawAndSpawLegacy>, I>>(
    base?: I,
  ): WirePlanParamsServerAdjustmentsToSpendingTpawAndSpawLegacy {
    return WirePlanParamsServerAdjustmentsToSpendingTpawAndSpawLegacy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerAdjustmentsToSpendingTpawAndSpawLegacy>, I>>(
    object: I,
  ): WirePlanParamsServerAdjustmentsToSpendingTpawAndSpawLegacy {
    const message = createBaseWirePlanParamsServerAdjustmentsToSpendingTpawAndSpawLegacy();
    message.total = object.total ?? 0;
    message.external = object.external?.map((e) => WirePlanParamsServerAmountNotTimed.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWirePlanParamsServerAdjustmentsToSpendingTpawAndSpaw(): WirePlanParamsServerAdjustmentsToSpendingTpawAndSpaw {
  return { spendingCeiling: undefined, spendingFloor: undefined, legacy: undefined };
}

export const WirePlanParamsServerAdjustmentsToSpendingTpawAndSpaw: MessageFns<
  WirePlanParamsServerAdjustmentsToSpendingTpawAndSpaw
> = {
  encode(
    message: WirePlanParamsServerAdjustmentsToSpendingTpawAndSpaw,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.spendingCeiling !== undefined) {
      WireBoxedDouble.encode(message.spendingCeiling, writer.uint32(10).fork()).join();
    }
    if (message.spendingFloor !== undefined) {
      WireBoxedDouble.encode(message.spendingFloor, writer.uint32(18).fork()).join();
    }
    if (message.legacy !== undefined) {
      WirePlanParamsServerAdjustmentsToSpendingTpawAndSpawLegacy.encode(message.legacy, writer.uint32(26).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WirePlanParamsServerAdjustmentsToSpendingTpawAndSpaw {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerAdjustmentsToSpendingTpawAndSpaw();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.spendingCeiling = WireBoxedDouble.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.spendingFloor = WireBoxedDouble.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.legacy = WirePlanParamsServerAdjustmentsToSpendingTpawAndSpawLegacy.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerAdjustmentsToSpendingTpawAndSpaw {
    return {
      spendingCeiling: isSet(object.spendingCeiling) ? WireBoxedDouble.fromJSON(object.spendingCeiling) : undefined,
      spendingFloor: isSet(object.spendingFloor) ? WireBoxedDouble.fromJSON(object.spendingFloor) : undefined,
      legacy: isSet(object.legacy)
        ? WirePlanParamsServerAdjustmentsToSpendingTpawAndSpawLegacy.fromJSON(object.legacy)
        : undefined,
    };
  },

  toJSON(message: WirePlanParamsServerAdjustmentsToSpendingTpawAndSpaw): unknown {
    const obj: any = {};
    if (message.spendingCeiling !== undefined) {
      obj.spendingCeiling = WireBoxedDouble.toJSON(message.spendingCeiling);
    }
    if (message.spendingFloor !== undefined) {
      obj.spendingFloor = WireBoxedDouble.toJSON(message.spendingFloor);
    }
    if (message.legacy !== undefined) {
      obj.legacy = WirePlanParamsServerAdjustmentsToSpendingTpawAndSpawLegacy.toJSON(message.legacy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerAdjustmentsToSpendingTpawAndSpaw>, I>>(
    base?: I,
  ): WirePlanParamsServerAdjustmentsToSpendingTpawAndSpaw {
    return WirePlanParamsServerAdjustmentsToSpendingTpawAndSpaw.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerAdjustmentsToSpendingTpawAndSpaw>, I>>(
    object: I,
  ): WirePlanParamsServerAdjustmentsToSpendingTpawAndSpaw {
    const message = createBaseWirePlanParamsServerAdjustmentsToSpendingTpawAndSpaw();
    message.spendingCeiling = (object.spendingCeiling !== undefined && object.spendingCeiling !== null)
      ? WireBoxedDouble.fromPartial(object.spendingCeiling)
      : undefined;
    message.spendingFloor = (object.spendingFloor !== undefined && object.spendingFloor !== null)
      ? WireBoxedDouble.fromPartial(object.spendingFloor)
      : undefined;
    message.legacy = (object.legacy !== undefined && object.legacy !== null)
      ? WirePlanParamsServerAdjustmentsToSpendingTpawAndSpawLegacy.fromPartial(object.legacy)
      : undefined;
    return message;
  },
};

function createBaseWirePlanParamsServerAdjustmentsToSpendingExtraSpending(): WirePlanParamsServerAdjustmentsToSpendingExtraSpending {
  return { essential: [], discretionary: [] };
}

export const WirePlanParamsServerAdjustmentsToSpendingExtraSpending: MessageFns<
  WirePlanParamsServerAdjustmentsToSpendingExtraSpending
> = {
  encode(
    message: WirePlanParamsServerAdjustmentsToSpendingExtraSpending,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.essential) {
      WirePlanParamsServerAmountTimed.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.discretionary) {
      WirePlanParamsServerAmountTimed.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WirePlanParamsServerAdjustmentsToSpendingExtraSpending {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerAdjustmentsToSpendingExtraSpending();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.essential.push(WirePlanParamsServerAmountTimed.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.discretionary.push(WirePlanParamsServerAmountTimed.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerAdjustmentsToSpendingExtraSpending {
    return {
      essential: globalThis.Array.isArray(object?.essential)
        ? object.essential.map((e: any) => WirePlanParamsServerAmountTimed.fromJSON(e))
        : [],
      discretionary: globalThis.Array.isArray(object?.discretionary)
        ? object.discretionary.map((e: any) => WirePlanParamsServerAmountTimed.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WirePlanParamsServerAdjustmentsToSpendingExtraSpending): unknown {
    const obj: any = {};
    if (message.essential?.length) {
      obj.essential = message.essential.map((e) => WirePlanParamsServerAmountTimed.toJSON(e));
    }
    if (message.discretionary?.length) {
      obj.discretionary = message.discretionary.map((e) => WirePlanParamsServerAmountTimed.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerAdjustmentsToSpendingExtraSpending>, I>>(
    base?: I,
  ): WirePlanParamsServerAdjustmentsToSpendingExtraSpending {
    return WirePlanParamsServerAdjustmentsToSpendingExtraSpending.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerAdjustmentsToSpendingExtraSpending>, I>>(
    object: I,
  ): WirePlanParamsServerAdjustmentsToSpendingExtraSpending {
    const message = createBaseWirePlanParamsServerAdjustmentsToSpendingExtraSpending();
    message.essential = object.essential?.map((e) => WirePlanParamsServerAmountTimed.fromPartial(e)) || [];
    message.discretionary = object.discretionary?.map((e) => WirePlanParamsServerAmountTimed.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWirePlanParamsServerAdjustmentsToSpending(): WirePlanParamsServerAdjustmentsToSpending {
  return { extraSpending: undefined, tpawAndSpaw: undefined };
}

export const WirePlanParamsServerAdjustmentsToSpending: MessageFns<WirePlanParamsServerAdjustmentsToSpending> = {
  encode(message: WirePlanParamsServerAdjustmentsToSpending, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.extraSpending !== undefined) {
      WirePlanParamsServerAdjustmentsToSpendingExtraSpending.encode(message.extraSpending, writer.uint32(10).fork())
        .join();
    }
    if (message.tpawAndSpaw !== undefined) {
      WirePlanParamsServerAdjustmentsToSpendingTpawAndSpaw.encode(message.tpawAndSpaw, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WirePlanParamsServerAdjustmentsToSpending {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerAdjustmentsToSpending();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.extraSpending = WirePlanParamsServerAdjustmentsToSpendingExtraSpending.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tpawAndSpaw = WirePlanParamsServerAdjustmentsToSpendingTpawAndSpaw.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerAdjustmentsToSpending {
    return {
      extraSpending: isSet(object.extraSpending)
        ? WirePlanParamsServerAdjustmentsToSpendingExtraSpending.fromJSON(object.extraSpending)
        : undefined,
      tpawAndSpaw: isSet(object.tpawAndSpaw)
        ? WirePlanParamsServerAdjustmentsToSpendingTpawAndSpaw.fromJSON(object.tpawAndSpaw)
        : undefined,
    };
  },

  toJSON(message: WirePlanParamsServerAdjustmentsToSpending): unknown {
    const obj: any = {};
    if (message.extraSpending !== undefined) {
      obj.extraSpending = WirePlanParamsServerAdjustmentsToSpendingExtraSpending.toJSON(message.extraSpending);
    }
    if (message.tpawAndSpaw !== undefined) {
      obj.tpawAndSpaw = WirePlanParamsServerAdjustmentsToSpendingTpawAndSpaw.toJSON(message.tpawAndSpaw);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerAdjustmentsToSpending>, I>>(
    base?: I,
  ): WirePlanParamsServerAdjustmentsToSpending {
    return WirePlanParamsServerAdjustmentsToSpending.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerAdjustmentsToSpending>, I>>(
    object: I,
  ): WirePlanParamsServerAdjustmentsToSpending {
    const message = createBaseWirePlanParamsServerAdjustmentsToSpending();
    message.extraSpending = (object.extraSpending !== undefined && object.extraSpending !== null)
      ? WirePlanParamsServerAdjustmentsToSpendingExtraSpending.fromPartial(object.extraSpending)
      : undefined;
    message.tpawAndSpaw = (object.tpawAndSpaw !== undefined && object.tpawAndSpaw !== null)
      ? WirePlanParamsServerAdjustmentsToSpendingTpawAndSpaw.fromPartial(object.tpawAndSpaw)
      : undefined;
    return message;
  },
};

function createBaseWirePlanParamsServerRiskTPAWRiskTolerance(): WirePlanParamsServerRiskTPAWRiskTolerance {
  return { at20: 0, deltaAtMaxAge: 0, forLegacyAsDeltaFromAt20: 0 };
}

export const WirePlanParamsServerRiskTPAWRiskTolerance: MessageFns<WirePlanParamsServerRiskTPAWRiskTolerance> = {
  encode(message: WirePlanParamsServerRiskTPAWRiskTolerance, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.at20 !== 0) {
      writer.uint32(9).double(message.at20);
    }
    if (message.deltaAtMaxAge !== 0) {
      writer.uint32(17).double(message.deltaAtMaxAge);
    }
    if (message.forLegacyAsDeltaFromAt20 !== 0) {
      writer.uint32(25).double(message.forLegacyAsDeltaFromAt20);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WirePlanParamsServerRiskTPAWRiskTolerance {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerRiskTPAWRiskTolerance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.at20 = reader.double();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.deltaAtMaxAge = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.forLegacyAsDeltaFromAt20 = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerRiskTPAWRiskTolerance {
    return {
      at20: isSet(object.at20) ? globalThis.Number(object.at20) : 0,
      deltaAtMaxAge: isSet(object.deltaAtMaxAge) ? globalThis.Number(object.deltaAtMaxAge) : 0,
      forLegacyAsDeltaFromAt20: isSet(object.forLegacyAsDeltaFromAt20)
        ? globalThis.Number(object.forLegacyAsDeltaFromAt20)
        : 0,
    };
  },

  toJSON(message: WirePlanParamsServerRiskTPAWRiskTolerance): unknown {
    const obj: any = {};
    if (message.at20 !== 0) {
      obj.at20 = message.at20;
    }
    if (message.deltaAtMaxAge !== 0) {
      obj.deltaAtMaxAge = message.deltaAtMaxAge;
    }
    if (message.forLegacyAsDeltaFromAt20 !== 0) {
      obj.forLegacyAsDeltaFromAt20 = message.forLegacyAsDeltaFromAt20;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerRiskTPAWRiskTolerance>, I>>(
    base?: I,
  ): WirePlanParamsServerRiskTPAWRiskTolerance {
    return WirePlanParamsServerRiskTPAWRiskTolerance.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerRiskTPAWRiskTolerance>, I>>(
    object: I,
  ): WirePlanParamsServerRiskTPAWRiskTolerance {
    const message = createBaseWirePlanParamsServerRiskTPAWRiskTolerance();
    message.at20 = object.at20 ?? 0;
    message.deltaAtMaxAge = object.deltaAtMaxAge ?? 0;
    message.forLegacyAsDeltaFromAt20 = object.forLegacyAsDeltaFromAt20 ?? 0;
    return message;
  },
};

function createBaseWirePlanParamsServerRiskTPAW(): WirePlanParamsServerRiskTPAW {
  return { riskTolerance: undefined, timePreference: 0, additionalAnnualSpendingTilt: 0 };
}

export const WirePlanParamsServerRiskTPAW: MessageFns<WirePlanParamsServerRiskTPAW> = {
  encode(message: WirePlanParamsServerRiskTPAW, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.riskTolerance !== undefined) {
      WirePlanParamsServerRiskTPAWRiskTolerance.encode(message.riskTolerance, writer.uint32(10).fork()).join();
    }
    if (message.timePreference !== 0) {
      writer.uint32(17).double(message.timePreference);
    }
    if (message.additionalAnnualSpendingTilt !== 0) {
      writer.uint32(25).double(message.additionalAnnualSpendingTilt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WirePlanParamsServerRiskTPAW {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerRiskTPAW();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.riskTolerance = WirePlanParamsServerRiskTPAWRiskTolerance.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.timePreference = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.additionalAnnualSpendingTilt = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerRiskTPAW {
    return {
      riskTolerance: isSet(object.riskTolerance)
        ? WirePlanParamsServerRiskTPAWRiskTolerance.fromJSON(object.riskTolerance)
        : undefined,
      timePreference: isSet(object.timePreference) ? globalThis.Number(object.timePreference) : 0,
      additionalAnnualSpendingTilt: isSet(object.additionalAnnualSpendingTilt)
        ? globalThis.Number(object.additionalAnnualSpendingTilt)
        : 0,
    };
  },

  toJSON(message: WirePlanParamsServerRiskTPAW): unknown {
    const obj: any = {};
    if (message.riskTolerance !== undefined) {
      obj.riskTolerance = WirePlanParamsServerRiskTPAWRiskTolerance.toJSON(message.riskTolerance);
    }
    if (message.timePreference !== 0) {
      obj.timePreference = message.timePreference;
    }
    if (message.additionalAnnualSpendingTilt !== 0) {
      obj.additionalAnnualSpendingTilt = message.additionalAnnualSpendingTilt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerRiskTPAW>, I>>(base?: I): WirePlanParamsServerRiskTPAW {
    return WirePlanParamsServerRiskTPAW.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerRiskTPAW>, I>>(object: I): WirePlanParamsServerRiskTPAW {
    const message = createBaseWirePlanParamsServerRiskTPAW();
    message.riskTolerance = (object.riskTolerance !== undefined && object.riskTolerance !== null)
      ? WirePlanParamsServerRiskTPAWRiskTolerance.fromPartial(object.riskTolerance)
      : undefined;
    message.timePreference = object.timePreference ?? 0;
    message.additionalAnnualSpendingTilt = object.additionalAnnualSpendingTilt ?? 0;
    return message;
  },
};

function createBaseWirePlanParamsServerRiskSPAW(): WirePlanParamsServerRiskSPAW {
  return { annualSpendingTilt: 0 };
}

export const WirePlanParamsServerRiskSPAW: MessageFns<WirePlanParamsServerRiskSPAW> = {
  encode(message: WirePlanParamsServerRiskSPAW, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.annualSpendingTilt !== 0) {
      writer.uint32(9).double(message.annualSpendingTilt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WirePlanParamsServerRiskSPAW {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerRiskSPAW();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.annualSpendingTilt = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerRiskSPAW {
    return { annualSpendingTilt: isSet(object.annualSpendingTilt) ? globalThis.Number(object.annualSpendingTilt) : 0 };
  },

  toJSON(message: WirePlanParamsServerRiskSPAW): unknown {
    const obj: any = {};
    if (message.annualSpendingTilt !== 0) {
      obj.annualSpendingTilt = message.annualSpendingTilt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerRiskSPAW>, I>>(base?: I): WirePlanParamsServerRiskSPAW {
    return WirePlanParamsServerRiskSPAW.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerRiskSPAW>, I>>(object: I): WirePlanParamsServerRiskSPAW {
    const message = createBaseWirePlanParamsServerRiskSPAW();
    message.annualSpendingTilt = object.annualSpendingTilt ?? 0;
    return message;
  },
};

function createBaseWirePlanParamsServerRiskSPAWAndSWR(): WirePlanParamsServerRiskSPAWAndSWR {
  return { stockAllocation: undefined };
}

export const WirePlanParamsServerRiskSPAWAndSWR: MessageFns<WirePlanParamsServerRiskSPAWAndSWR> = {
  encode(message: WirePlanParamsServerRiskSPAWAndSWR, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.stockAllocation !== undefined) {
      WireGlidePath.encode(message.stockAllocation, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WirePlanParamsServerRiskSPAWAndSWR {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerRiskSPAWAndSWR();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stockAllocation = WireGlidePath.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerRiskSPAWAndSWR {
    return {
      stockAllocation: isSet(object.stockAllocation) ? WireGlidePath.fromJSON(object.stockAllocation) : undefined,
    };
  },

  toJSON(message: WirePlanParamsServerRiskSPAWAndSWR): unknown {
    const obj: any = {};
    if (message.stockAllocation !== undefined) {
      obj.stockAllocation = WireGlidePath.toJSON(message.stockAllocation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerRiskSPAWAndSWR>, I>>(
    base?: I,
  ): WirePlanParamsServerRiskSPAWAndSWR {
    return WirePlanParamsServerRiskSPAWAndSWR.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerRiskSPAWAndSWR>, I>>(
    object: I,
  ): WirePlanParamsServerRiskSPAWAndSWR {
    const message = createBaseWirePlanParamsServerRiskSPAWAndSWR();
    message.stockAllocation = (object.stockAllocation !== undefined && object.stockAllocation !== null)
      ? WireGlidePath.fromPartial(object.stockAllocation)
      : undefined;
    return message;
  },
};

function createBaseWirePlanParamsServerRiskSWR(): WirePlanParamsServerRiskSWR {
  return { withdrawal: undefined };
}

export const WirePlanParamsServerRiskSWR: MessageFns<WirePlanParamsServerRiskSWR> = {
  encode(message: WirePlanParamsServerRiskSWR, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.withdrawal?.$case) {
      case "percentPerYear":
        writer.uint32(9).double(message.withdrawal.percentPerYear);
        break;
      case "amountPerMonth":
        writer.uint32(17).double(message.withdrawal.amountPerMonth);
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WirePlanParamsServerRiskSWR {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerRiskSWR();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 9) {
            break;
          }

          message.withdrawal = { $case: "percentPerYear", percentPerYear: reader.double() };
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.withdrawal = { $case: "amountPerMonth", amountPerMonth: reader.double() };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerRiskSWR {
    return {
      withdrawal: isSet(object.percentPerYear)
        ? { $case: "percentPerYear", percentPerYear: globalThis.Number(object.percentPerYear) }
        : isSet(object.amountPerMonth)
        ? { $case: "amountPerMonth", amountPerMonth: globalThis.Number(object.amountPerMonth) }
        : undefined,
    };
  },

  toJSON(message: WirePlanParamsServerRiskSWR): unknown {
    const obj: any = {};
    if (message.withdrawal?.$case === "percentPerYear") {
      obj.percentPerYear = message.withdrawal.percentPerYear;
    } else if (message.withdrawal?.$case === "amountPerMonth") {
      obj.amountPerMonth = message.withdrawal.amountPerMonth;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerRiskSWR>, I>>(base?: I): WirePlanParamsServerRiskSWR {
    return WirePlanParamsServerRiskSWR.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerRiskSWR>, I>>(object: I): WirePlanParamsServerRiskSWR {
    const message = createBaseWirePlanParamsServerRiskSWR();
    switch (object.withdrawal?.$case) {
      case "percentPerYear": {
        if (object.withdrawal?.percentPerYear !== undefined && object.withdrawal?.percentPerYear !== null) {
          message.withdrawal = { $case: "percentPerYear", percentPerYear: object.withdrawal.percentPerYear };
        }
        break;
      }
      case "amountPerMonth": {
        if (object.withdrawal?.amountPerMonth !== undefined && object.withdrawal?.amountPerMonth !== null) {
          message.withdrawal = { $case: "amountPerMonth", amountPerMonth: object.withdrawal.amountPerMonth };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseWirePlanParamsServerRisk(): WirePlanParamsServerRisk {
  return { tpaw: undefined, spaw: undefined, spawAndSwr: undefined, swr: undefined };
}

export const WirePlanParamsServerRisk: MessageFns<WirePlanParamsServerRisk> = {
  encode(message: WirePlanParamsServerRisk, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tpaw !== undefined) {
      WirePlanParamsServerRiskTPAW.encode(message.tpaw, writer.uint32(10).fork()).join();
    }
    if (message.spaw !== undefined) {
      WirePlanParamsServerRiskSPAW.encode(message.spaw, writer.uint32(18).fork()).join();
    }
    if (message.spawAndSwr !== undefined) {
      WirePlanParamsServerRiskSPAWAndSWR.encode(message.spawAndSwr, writer.uint32(26).fork()).join();
    }
    if (message.swr !== undefined) {
      WirePlanParamsServerRiskSWR.encode(message.swr, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WirePlanParamsServerRisk {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerRisk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tpaw = WirePlanParamsServerRiskTPAW.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.spaw = WirePlanParamsServerRiskSPAW.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.spawAndSwr = WirePlanParamsServerRiskSPAWAndSWR.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.swr = WirePlanParamsServerRiskSWR.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerRisk {
    return {
      tpaw: isSet(object.tpaw) ? WirePlanParamsServerRiskTPAW.fromJSON(object.tpaw) : undefined,
      spaw: isSet(object.spaw) ? WirePlanParamsServerRiskSPAW.fromJSON(object.spaw) : undefined,
      spawAndSwr: isSet(object.spawAndSwr) ? WirePlanParamsServerRiskSPAWAndSWR.fromJSON(object.spawAndSwr) : undefined,
      swr: isSet(object.swr) ? WirePlanParamsServerRiskSWR.fromJSON(object.swr) : undefined,
    };
  },

  toJSON(message: WirePlanParamsServerRisk): unknown {
    const obj: any = {};
    if (message.tpaw !== undefined) {
      obj.tpaw = WirePlanParamsServerRiskTPAW.toJSON(message.tpaw);
    }
    if (message.spaw !== undefined) {
      obj.spaw = WirePlanParamsServerRiskSPAW.toJSON(message.spaw);
    }
    if (message.spawAndSwr !== undefined) {
      obj.spawAndSwr = WirePlanParamsServerRiskSPAWAndSWR.toJSON(message.spawAndSwr);
    }
    if (message.swr !== undefined) {
      obj.swr = WirePlanParamsServerRiskSWR.toJSON(message.swr);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerRisk>, I>>(base?: I): WirePlanParamsServerRisk {
    return WirePlanParamsServerRisk.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerRisk>, I>>(object: I): WirePlanParamsServerRisk {
    const message = createBaseWirePlanParamsServerRisk();
    message.tpaw = (object.tpaw !== undefined && object.tpaw !== null)
      ? WirePlanParamsServerRiskTPAW.fromPartial(object.tpaw)
      : undefined;
    message.spaw = (object.spaw !== undefined && object.spaw !== null)
      ? WirePlanParamsServerRiskSPAW.fromPartial(object.spaw)
      : undefined;
    message.spawAndSwr = (object.spawAndSwr !== undefined && object.spawAndSwr !== null)
      ? WirePlanParamsServerRiskSPAWAndSWR.fromPartial(object.spawAndSwr)
      : undefined;
    message.swr = (object.swr !== undefined && object.swr !== null)
      ? WirePlanParamsServerRiskSWR.fromPartial(object.swr)
      : undefined;
    return message;
  },
};

function createBaseWirePlanParamsServerExpectedReturnsForPlanningCustomStocks(): WirePlanParamsServerExpectedReturnsForPlanningCustomStocks {
  return { base: 0, delta: 0 };
}

export const WirePlanParamsServerExpectedReturnsForPlanningCustomStocks: MessageFns<
  WirePlanParamsServerExpectedReturnsForPlanningCustomStocks
> = {
  encode(
    message: WirePlanParamsServerExpectedReturnsForPlanningCustomStocks,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.base !== 0) {
      writer.uint32(8).int32(message.base);
    }
    if (message.delta !== 0) {
      writer.uint32(17).double(message.delta);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WirePlanParamsServerExpectedReturnsForPlanningCustomStocks {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerExpectedReturnsForPlanningCustomStocks();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.base = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.delta = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerExpectedReturnsForPlanningCustomStocks {
    return {
      base: isSet(object.base)
        ? wirePlanParamsServerExpectedReturnsForPlanningCustomStocksBaseFromJSON(object.base)
        : 0,
      delta: isSet(object.delta) ? globalThis.Number(object.delta) : 0,
    };
  },

  toJSON(message: WirePlanParamsServerExpectedReturnsForPlanningCustomStocks): unknown {
    const obj: any = {};
    if (message.base !== 0) {
      obj.base = wirePlanParamsServerExpectedReturnsForPlanningCustomStocksBaseToJSON(message.base);
    }
    if (message.delta !== 0) {
      obj.delta = message.delta;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerExpectedReturnsForPlanningCustomStocks>, I>>(
    base?: I,
  ): WirePlanParamsServerExpectedReturnsForPlanningCustomStocks {
    return WirePlanParamsServerExpectedReturnsForPlanningCustomStocks.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerExpectedReturnsForPlanningCustomStocks>, I>>(
    object: I,
  ): WirePlanParamsServerExpectedReturnsForPlanningCustomStocks {
    const message = createBaseWirePlanParamsServerExpectedReturnsForPlanningCustomStocks();
    message.base = object.base ?? 0;
    message.delta = object.delta ?? 0;
    return message;
  },
};

function createBaseWirePlanParamsServerExpectedReturnsForPlanningCustomBonds(): WirePlanParamsServerExpectedReturnsForPlanningCustomBonds {
  return { base: 0, delta: 0 };
}

export const WirePlanParamsServerExpectedReturnsForPlanningCustomBonds: MessageFns<
  WirePlanParamsServerExpectedReturnsForPlanningCustomBonds
> = {
  encode(
    message: WirePlanParamsServerExpectedReturnsForPlanningCustomBonds,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.base !== 0) {
      writer.uint32(8).int32(message.base);
    }
    if (message.delta !== 0) {
      writer.uint32(17).double(message.delta);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WirePlanParamsServerExpectedReturnsForPlanningCustomBonds {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerExpectedReturnsForPlanningCustomBonds();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.base = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.delta = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerExpectedReturnsForPlanningCustomBonds {
    return {
      base: isSet(object.base) ? wirePlanParamsServerExpectedReturnsForPlanningCustomBondsBaseFromJSON(object.base) : 0,
      delta: isSet(object.delta) ? globalThis.Number(object.delta) : 0,
    };
  },

  toJSON(message: WirePlanParamsServerExpectedReturnsForPlanningCustomBonds): unknown {
    const obj: any = {};
    if (message.base !== 0) {
      obj.base = wirePlanParamsServerExpectedReturnsForPlanningCustomBondsBaseToJSON(message.base);
    }
    if (message.delta !== 0) {
      obj.delta = message.delta;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerExpectedReturnsForPlanningCustomBonds>, I>>(
    base?: I,
  ): WirePlanParamsServerExpectedReturnsForPlanningCustomBonds {
    return WirePlanParamsServerExpectedReturnsForPlanningCustomBonds.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerExpectedReturnsForPlanningCustomBonds>, I>>(
    object: I,
  ): WirePlanParamsServerExpectedReturnsForPlanningCustomBonds {
    const message = createBaseWirePlanParamsServerExpectedReturnsForPlanningCustomBonds();
    message.base = object.base ?? 0;
    message.delta = object.delta ?? 0;
    return message;
  },
};

function createBaseWirePlanParamsServerExpectedReturnsForPlanningCustom(): WirePlanParamsServerExpectedReturnsForPlanningCustom {
  return { stocks: undefined, bonds: undefined };
}

export const WirePlanParamsServerExpectedReturnsForPlanningCustom: MessageFns<
  WirePlanParamsServerExpectedReturnsForPlanningCustom
> = {
  encode(
    message: WirePlanParamsServerExpectedReturnsForPlanningCustom,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.stocks !== undefined) {
      WirePlanParamsServerExpectedReturnsForPlanningCustomStocks.encode(message.stocks, writer.uint32(10).fork())
        .join();
    }
    if (message.bonds !== undefined) {
      WirePlanParamsServerExpectedReturnsForPlanningCustomBonds.encode(message.bonds, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WirePlanParamsServerExpectedReturnsForPlanningCustom {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerExpectedReturnsForPlanningCustom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stocks = WirePlanParamsServerExpectedReturnsForPlanningCustomStocks.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.bonds = WirePlanParamsServerExpectedReturnsForPlanningCustomBonds.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerExpectedReturnsForPlanningCustom {
    return {
      stocks: isSet(object.stocks)
        ? WirePlanParamsServerExpectedReturnsForPlanningCustomStocks.fromJSON(object.stocks)
        : undefined,
      bonds: isSet(object.bonds)
        ? WirePlanParamsServerExpectedReturnsForPlanningCustomBonds.fromJSON(object.bonds)
        : undefined,
    };
  },

  toJSON(message: WirePlanParamsServerExpectedReturnsForPlanningCustom): unknown {
    const obj: any = {};
    if (message.stocks !== undefined) {
      obj.stocks = WirePlanParamsServerExpectedReturnsForPlanningCustomStocks.toJSON(message.stocks);
    }
    if (message.bonds !== undefined) {
      obj.bonds = WirePlanParamsServerExpectedReturnsForPlanningCustomBonds.toJSON(message.bonds);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerExpectedReturnsForPlanningCustom>, I>>(
    base?: I,
  ): WirePlanParamsServerExpectedReturnsForPlanningCustom {
    return WirePlanParamsServerExpectedReturnsForPlanningCustom.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerExpectedReturnsForPlanningCustom>, I>>(
    object: I,
  ): WirePlanParamsServerExpectedReturnsForPlanningCustom {
    const message = createBaseWirePlanParamsServerExpectedReturnsForPlanningCustom();
    message.stocks = (object.stocks !== undefined && object.stocks !== null)
      ? WirePlanParamsServerExpectedReturnsForPlanningCustomStocks.fromPartial(object.stocks)
      : undefined;
    message.bonds = (object.bonds !== undefined && object.bonds !== null)
      ? WirePlanParamsServerExpectedReturnsForPlanningCustomBonds.fromPartial(object.bonds)
      : undefined;
    return message;
  },
};

function createBaseWirePlanParamsServerExpectedReturnsForPlanning(): WirePlanParamsServerExpectedReturnsForPlanning {
  return { empiricalAnnualNonLog: undefined };
}

export const WirePlanParamsServerExpectedReturnsForPlanning: MessageFns<
  WirePlanParamsServerExpectedReturnsForPlanning
> = {
  encode(
    message: WirePlanParamsServerExpectedReturnsForPlanning,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    switch (message.empiricalAnnualNonLog?.$case) {
      case "regressionPrediction20YearTipsYield":
        NoMessage.encode(message.empiricalAnnualNonLog.regressionPrediction20YearTipsYield, writer.uint32(10).fork())
          .join();
        break;
      case "conservativeEstimate20YearTipsYield":
        NoMessage.encode(message.empiricalAnnualNonLog.conservativeEstimate20YearTipsYield, writer.uint32(18).fork())
          .join();
        break;
      case "oneOverCape20YearTipsYield":
        NoMessage.encode(message.empiricalAnnualNonLog.oneOverCape20YearTipsYield, writer.uint32(26).fork()).join();
        break;
      case "historical":
        NoMessage.encode(message.empiricalAnnualNonLog.historical, writer.uint32(34).fork()).join();
        break;
      case "fixedEquityPremium":
        writer.uint32(41).double(message.empiricalAnnualNonLog.fixedEquityPremium);
        break;
      case "custom":
        WirePlanParamsServerExpectedReturnsForPlanningCustom.encode(
          message.empiricalAnnualNonLog.custom,
          writer.uint32(58).fork(),
        ).join();
        break;
      case "fixed":
        WireStocksAndBondsDouble.encode(message.empiricalAnnualNonLog.fixed, writer.uint32(50).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WirePlanParamsServerExpectedReturnsForPlanning {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerExpectedReturnsForPlanning();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.empiricalAnnualNonLog = {
            $case: "regressionPrediction20YearTipsYield",
            regressionPrediction20YearTipsYield: NoMessage.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.empiricalAnnualNonLog = {
            $case: "conservativeEstimate20YearTipsYield",
            conservativeEstimate20YearTipsYield: NoMessage.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.empiricalAnnualNonLog = {
            $case: "oneOverCape20YearTipsYield",
            oneOverCape20YearTipsYield: NoMessage.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.empiricalAnnualNonLog = {
            $case: "historical",
            historical: NoMessage.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.empiricalAnnualNonLog = { $case: "fixedEquityPremium", fixedEquityPremium: reader.double() };
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.empiricalAnnualNonLog = {
            $case: "custom",
            custom: WirePlanParamsServerExpectedReturnsForPlanningCustom.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.empiricalAnnualNonLog = {
            $case: "fixed",
            fixed: WireStocksAndBondsDouble.decode(reader, reader.uint32()),
          };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerExpectedReturnsForPlanning {
    return {
      empiricalAnnualNonLog: isSet(object.regressionPrediction20YearTipsYield)
        ? {
          $case: "regressionPrediction20YearTipsYield",
          regressionPrediction20YearTipsYield: NoMessage.fromJSON(object.regressionPrediction20YearTipsYield),
        }
        : isSet(object.conservativeEstimate20YearTipsYield)
        ? {
          $case: "conservativeEstimate20YearTipsYield",
          conservativeEstimate20YearTipsYield: NoMessage.fromJSON(object.conservativeEstimate20YearTipsYield),
        }
        : isSet(object.oneOverCape20YearTipsYield)
        ? {
          $case: "oneOverCape20YearTipsYield",
          oneOverCape20YearTipsYield: NoMessage.fromJSON(object.oneOverCape20YearTipsYield),
        }
        : isSet(object.historical)
        ? { $case: "historical", historical: NoMessage.fromJSON(object.historical) }
        : isSet(object.fixedEquityPremium)
        ? { $case: "fixedEquityPremium", fixedEquityPremium: globalThis.Number(object.fixedEquityPremium) }
        : isSet(object.custom)
        ? { $case: "custom", custom: WirePlanParamsServerExpectedReturnsForPlanningCustom.fromJSON(object.custom) }
        : isSet(object.fixed)
        ? { $case: "fixed", fixed: WireStocksAndBondsDouble.fromJSON(object.fixed) }
        : undefined,
    };
  },

  toJSON(message: WirePlanParamsServerExpectedReturnsForPlanning): unknown {
    const obj: any = {};
    if (message.empiricalAnnualNonLog?.$case === "regressionPrediction20YearTipsYield") {
      obj.regressionPrediction20YearTipsYield = NoMessage.toJSON(
        message.empiricalAnnualNonLog.regressionPrediction20YearTipsYield,
      );
    } else if (message.empiricalAnnualNonLog?.$case === "conservativeEstimate20YearTipsYield") {
      obj.conservativeEstimate20YearTipsYield = NoMessage.toJSON(
        message.empiricalAnnualNonLog.conservativeEstimate20YearTipsYield,
      );
    } else if (message.empiricalAnnualNonLog?.$case === "oneOverCape20YearTipsYield") {
      obj.oneOverCape20YearTipsYield = NoMessage.toJSON(message.empiricalAnnualNonLog.oneOverCape20YearTipsYield);
    } else if (message.empiricalAnnualNonLog?.$case === "historical") {
      obj.historical = NoMessage.toJSON(message.empiricalAnnualNonLog.historical);
    } else if (message.empiricalAnnualNonLog?.$case === "fixedEquityPremium") {
      obj.fixedEquityPremium = message.empiricalAnnualNonLog.fixedEquityPremium;
    } else if (message.empiricalAnnualNonLog?.$case === "custom") {
      obj.custom = WirePlanParamsServerExpectedReturnsForPlanningCustom.toJSON(message.empiricalAnnualNonLog.custom);
    } else if (message.empiricalAnnualNonLog?.$case === "fixed") {
      obj.fixed = WireStocksAndBondsDouble.toJSON(message.empiricalAnnualNonLog.fixed);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerExpectedReturnsForPlanning>, I>>(
    base?: I,
  ): WirePlanParamsServerExpectedReturnsForPlanning {
    return WirePlanParamsServerExpectedReturnsForPlanning.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerExpectedReturnsForPlanning>, I>>(
    object: I,
  ): WirePlanParamsServerExpectedReturnsForPlanning {
    const message = createBaseWirePlanParamsServerExpectedReturnsForPlanning();
    switch (object.empiricalAnnualNonLog?.$case) {
      case "regressionPrediction20YearTipsYield": {
        if (
          object.empiricalAnnualNonLog?.regressionPrediction20YearTipsYield !== undefined &&
          object.empiricalAnnualNonLog?.regressionPrediction20YearTipsYield !== null
        ) {
          message.empiricalAnnualNonLog = {
            $case: "regressionPrediction20YearTipsYield",
            regressionPrediction20YearTipsYield: NoMessage.fromPartial(
              object.empiricalAnnualNonLog.regressionPrediction20YearTipsYield,
            ),
          };
        }
        break;
      }
      case "conservativeEstimate20YearTipsYield": {
        if (
          object.empiricalAnnualNonLog?.conservativeEstimate20YearTipsYield !== undefined &&
          object.empiricalAnnualNonLog?.conservativeEstimate20YearTipsYield !== null
        ) {
          message.empiricalAnnualNonLog = {
            $case: "conservativeEstimate20YearTipsYield",
            conservativeEstimate20YearTipsYield: NoMessage.fromPartial(
              object.empiricalAnnualNonLog.conservativeEstimate20YearTipsYield,
            ),
          };
        }
        break;
      }
      case "oneOverCape20YearTipsYield": {
        if (
          object.empiricalAnnualNonLog?.oneOverCape20YearTipsYield !== undefined &&
          object.empiricalAnnualNonLog?.oneOverCape20YearTipsYield !== null
        ) {
          message.empiricalAnnualNonLog = {
            $case: "oneOverCape20YearTipsYield",
            oneOverCape20YearTipsYield: NoMessage.fromPartial(object.empiricalAnnualNonLog.oneOverCape20YearTipsYield),
          };
        }
        break;
      }
      case "historical": {
        if (
          object.empiricalAnnualNonLog?.historical !== undefined && object.empiricalAnnualNonLog?.historical !== null
        ) {
          message.empiricalAnnualNonLog = {
            $case: "historical",
            historical: NoMessage.fromPartial(object.empiricalAnnualNonLog.historical),
          };
        }
        break;
      }
      case "fixedEquityPremium": {
        if (
          object.empiricalAnnualNonLog?.fixedEquityPremium !== undefined &&
          object.empiricalAnnualNonLog?.fixedEquityPremium !== null
        ) {
          message.empiricalAnnualNonLog = {
            $case: "fixedEquityPremium",
            fixedEquityPremium: object.empiricalAnnualNonLog.fixedEquityPremium,
          };
        }
        break;
      }
      case "custom": {
        if (object.empiricalAnnualNonLog?.custom !== undefined && object.empiricalAnnualNonLog?.custom !== null) {
          message.empiricalAnnualNonLog = {
            $case: "custom",
            custom: WirePlanParamsServerExpectedReturnsForPlanningCustom.fromPartial(
              object.empiricalAnnualNonLog.custom,
            ),
          };
        }
        break;
      }
      case "fixed": {
        if (object.empiricalAnnualNonLog?.fixed !== undefined && object.empiricalAnnualNonLog?.fixed !== null) {
          message.empiricalAnnualNonLog = {
            $case: "fixed",
            fixed: WireStocksAndBondsDouble.fromPartial(object.empiricalAnnualNonLog.fixed),
          };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseWirePlanParamsServerReturnStatsForPlanningStandardDeviation(): WirePlanParamsServerReturnStatsForPlanningStandardDeviation {
  return { stocks: undefined };
}

export const WirePlanParamsServerReturnStatsForPlanningStandardDeviation: MessageFns<
  WirePlanParamsServerReturnStatsForPlanningStandardDeviation
> = {
  encode(
    message: WirePlanParamsServerReturnStatsForPlanningStandardDeviation,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.stocks !== undefined) {
      WireScaleLogDouble.encode(message.stocks, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WirePlanParamsServerReturnStatsForPlanningStandardDeviation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerReturnStatsForPlanningStandardDeviation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.stocks = WireScaleLogDouble.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerReturnStatsForPlanningStandardDeviation {
    return { stocks: isSet(object.stocks) ? WireScaleLogDouble.fromJSON(object.stocks) : undefined };
  },

  toJSON(message: WirePlanParamsServerReturnStatsForPlanningStandardDeviation): unknown {
    const obj: any = {};
    if (message.stocks !== undefined) {
      obj.stocks = WireScaleLogDouble.toJSON(message.stocks);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerReturnStatsForPlanningStandardDeviation>, I>>(
    base?: I,
  ): WirePlanParamsServerReturnStatsForPlanningStandardDeviation {
    return WirePlanParamsServerReturnStatsForPlanningStandardDeviation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerReturnStatsForPlanningStandardDeviation>, I>>(
    object: I,
  ): WirePlanParamsServerReturnStatsForPlanningStandardDeviation {
    const message = createBaseWirePlanParamsServerReturnStatsForPlanningStandardDeviation();
    message.stocks = (object.stocks !== undefined && object.stocks !== null)
      ? WireScaleLogDouble.fromPartial(object.stocks)
      : undefined;
    return message;
  },
};

function createBaseWirePlanParamsServerReturnStatsForPlanning(): WirePlanParamsServerReturnStatsForPlanning {
  return { expectedValue: undefined, standardDeviation: undefined };
}

export const WirePlanParamsServerReturnStatsForPlanning: MessageFns<WirePlanParamsServerReturnStatsForPlanning> = {
  encode(message: WirePlanParamsServerReturnStatsForPlanning, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.expectedValue !== undefined) {
      WirePlanParamsServerExpectedReturnsForPlanning.encode(message.expectedValue, writer.uint32(10).fork()).join();
    }
    if (message.standardDeviation !== undefined) {
      WirePlanParamsServerReturnStatsForPlanningStandardDeviation.encode(
        message.standardDeviation,
        writer.uint32(18).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WirePlanParamsServerReturnStatsForPlanning {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerReturnStatsForPlanning();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.expectedValue = WirePlanParamsServerExpectedReturnsForPlanning.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.standardDeviation = WirePlanParamsServerReturnStatsForPlanningStandardDeviation.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerReturnStatsForPlanning {
    return {
      expectedValue: isSet(object.expectedValue)
        ? WirePlanParamsServerExpectedReturnsForPlanning.fromJSON(object.expectedValue)
        : undefined,
      standardDeviation: isSet(object.standardDeviation)
        ? WirePlanParamsServerReturnStatsForPlanningStandardDeviation.fromJSON(object.standardDeviation)
        : undefined,
    };
  },

  toJSON(message: WirePlanParamsServerReturnStatsForPlanning): unknown {
    const obj: any = {};
    if (message.expectedValue !== undefined) {
      obj.expectedValue = WirePlanParamsServerExpectedReturnsForPlanning.toJSON(message.expectedValue);
    }
    if (message.standardDeviation !== undefined) {
      obj.standardDeviation = WirePlanParamsServerReturnStatsForPlanningStandardDeviation.toJSON(
        message.standardDeviation,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerReturnStatsForPlanning>, I>>(
    base?: I,
  ): WirePlanParamsServerReturnStatsForPlanning {
    return WirePlanParamsServerReturnStatsForPlanning.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerReturnStatsForPlanning>, I>>(
    object: I,
  ): WirePlanParamsServerReturnStatsForPlanning {
    const message = createBaseWirePlanParamsServerReturnStatsForPlanning();
    message.expectedValue = (object.expectedValue !== undefined && object.expectedValue !== null)
      ? WirePlanParamsServerExpectedReturnsForPlanning.fromPartial(object.expectedValue)
      : undefined;
    message.standardDeviation = (object.standardDeviation !== undefined && object.standardDeviation !== null)
      ? WirePlanParamsServerReturnStatsForPlanningStandardDeviation.fromPartial(object.standardDeviation)
      : undefined;
    return message;
  },
};

function createBaseWirePlanParamsServerHistoricalReturnsAdjustmentStandardDeviation(): WirePlanParamsServerHistoricalReturnsAdjustmentStandardDeviation {
  return { bonds: undefined };
}

export const WirePlanParamsServerHistoricalReturnsAdjustmentStandardDeviation: MessageFns<
  WirePlanParamsServerHistoricalReturnsAdjustmentStandardDeviation
> = {
  encode(
    message: WirePlanParamsServerHistoricalReturnsAdjustmentStandardDeviation,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.bonds !== undefined) {
      WireScaleLogDouble.encode(message.bonds, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): WirePlanParamsServerHistoricalReturnsAdjustmentStandardDeviation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerHistoricalReturnsAdjustmentStandardDeviation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.bonds = WireScaleLogDouble.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerHistoricalReturnsAdjustmentStandardDeviation {
    return { bonds: isSet(object.bonds) ? WireScaleLogDouble.fromJSON(object.bonds) : undefined };
  },

  toJSON(message: WirePlanParamsServerHistoricalReturnsAdjustmentStandardDeviation): unknown {
    const obj: any = {};
    if (message.bonds !== undefined) {
      obj.bonds = WireScaleLogDouble.toJSON(message.bonds);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerHistoricalReturnsAdjustmentStandardDeviation>, I>>(
    base?: I,
  ): WirePlanParamsServerHistoricalReturnsAdjustmentStandardDeviation {
    return WirePlanParamsServerHistoricalReturnsAdjustmentStandardDeviation.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerHistoricalReturnsAdjustmentStandardDeviation>, I>>(
    object: I,
  ): WirePlanParamsServerHistoricalReturnsAdjustmentStandardDeviation {
    const message = createBaseWirePlanParamsServerHistoricalReturnsAdjustmentStandardDeviation();
    message.bonds = (object.bonds !== undefined && object.bonds !== null)
      ? WireScaleLogDouble.fromPartial(object.bonds)
      : undefined;
    return message;
  },
};

function createBaseWirePlanParamsServerHistoricalReturnsAdjustment(): WirePlanParamsServerHistoricalReturnsAdjustment {
  return { standardDeviation: undefined, overrideToFixedForTesting: undefined };
}

export const WirePlanParamsServerHistoricalReturnsAdjustment: MessageFns<
  WirePlanParamsServerHistoricalReturnsAdjustment
> = {
  encode(
    message: WirePlanParamsServerHistoricalReturnsAdjustment,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.standardDeviation !== undefined) {
      WirePlanParamsServerHistoricalReturnsAdjustmentStandardDeviation.encode(
        message.standardDeviation,
        writer.uint32(10).fork(),
      ).join();
    }
    switch (message.overrideToFixedForTesting?.$case) {
      case "none":
        NoMessage.encode(message.overrideToFixedForTesting.none, writer.uint32(18).fork()).join();
        break;
      case "toExpectedReturnsForPlanning":
        NoMessage.encode(message.overrideToFixedForTesting.toExpectedReturnsForPlanning, writer.uint32(26).fork())
          .join();
        break;
      case "manual":
        WireStocksAndBondsDouble.encode(message.overrideToFixedForTesting.manual, writer.uint32(34).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WirePlanParamsServerHistoricalReturnsAdjustment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerHistoricalReturnsAdjustment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.standardDeviation = WirePlanParamsServerHistoricalReturnsAdjustmentStandardDeviation.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.overrideToFixedForTesting = { $case: "none", none: NoMessage.decode(reader, reader.uint32()) };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.overrideToFixedForTesting = {
            $case: "toExpectedReturnsForPlanning",
            toExpectedReturnsForPlanning: NoMessage.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.overrideToFixedForTesting = {
            $case: "manual",
            manual: WireStocksAndBondsDouble.decode(reader, reader.uint32()),
          };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerHistoricalReturnsAdjustment {
    return {
      standardDeviation: isSet(object.standardDeviation)
        ? WirePlanParamsServerHistoricalReturnsAdjustmentStandardDeviation.fromJSON(object.standardDeviation)
        : undefined,
      overrideToFixedForTesting: isSet(object.none)
        ? { $case: "none", none: NoMessage.fromJSON(object.none) }
        : isSet(object.toExpectedReturnsForPlanning)
        ? {
          $case: "toExpectedReturnsForPlanning",
          toExpectedReturnsForPlanning: NoMessage.fromJSON(object.toExpectedReturnsForPlanning),
        }
        : isSet(object.manual)
        ? { $case: "manual", manual: WireStocksAndBondsDouble.fromJSON(object.manual) }
        : undefined,
    };
  },

  toJSON(message: WirePlanParamsServerHistoricalReturnsAdjustment): unknown {
    const obj: any = {};
    if (message.standardDeviation !== undefined) {
      obj.standardDeviation = WirePlanParamsServerHistoricalReturnsAdjustmentStandardDeviation.toJSON(
        message.standardDeviation,
      );
    }
    if (message.overrideToFixedForTesting?.$case === "none") {
      obj.none = NoMessage.toJSON(message.overrideToFixedForTesting.none);
    } else if (message.overrideToFixedForTesting?.$case === "toExpectedReturnsForPlanning") {
      obj.toExpectedReturnsForPlanning = NoMessage.toJSON(
        message.overrideToFixedForTesting.toExpectedReturnsForPlanning,
      );
    } else if (message.overrideToFixedForTesting?.$case === "manual") {
      obj.manual = WireStocksAndBondsDouble.toJSON(message.overrideToFixedForTesting.manual);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerHistoricalReturnsAdjustment>, I>>(
    base?: I,
  ): WirePlanParamsServerHistoricalReturnsAdjustment {
    return WirePlanParamsServerHistoricalReturnsAdjustment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerHistoricalReturnsAdjustment>, I>>(
    object: I,
  ): WirePlanParamsServerHistoricalReturnsAdjustment {
    const message = createBaseWirePlanParamsServerHistoricalReturnsAdjustment();
    message.standardDeviation = (object.standardDeviation !== undefined && object.standardDeviation !== null)
      ? WirePlanParamsServerHistoricalReturnsAdjustmentStandardDeviation.fromPartial(object.standardDeviation)
      : undefined;
    switch (object.overrideToFixedForTesting?.$case) {
      case "none": {
        if (object.overrideToFixedForTesting?.none !== undefined && object.overrideToFixedForTesting?.none !== null) {
          message.overrideToFixedForTesting = {
            $case: "none",
            none: NoMessage.fromPartial(object.overrideToFixedForTesting.none),
          };
        }
        break;
      }
      case "toExpectedReturnsForPlanning": {
        if (
          object.overrideToFixedForTesting?.toExpectedReturnsForPlanning !== undefined &&
          object.overrideToFixedForTesting?.toExpectedReturnsForPlanning !== null
        ) {
          message.overrideToFixedForTesting = {
            $case: "toExpectedReturnsForPlanning",
            toExpectedReturnsForPlanning: NoMessage.fromPartial(
              object.overrideToFixedForTesting.toExpectedReturnsForPlanning,
            ),
          };
        }
        break;
      }
      case "manual": {
        if (
          object.overrideToFixedForTesting?.manual !== undefined && object.overrideToFixedForTesting?.manual !== null
        ) {
          message.overrideToFixedForTesting = {
            $case: "manual",
            manual: WireStocksAndBondsDouble.fromPartial(object.overrideToFixedForTesting.manual),
          };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseWirePlanParamsServerSamplingMonteCarlo(): WirePlanParamsServerSamplingMonteCarlo {
  return { seed: 0, numRuns: 0, blockSize: 0, staggerRunStarts: false };
}

export const WirePlanParamsServerSamplingMonteCarlo: MessageFns<WirePlanParamsServerSamplingMonteCarlo> = {
  encode(message: WirePlanParamsServerSamplingMonteCarlo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.seed !== 0) {
      writer.uint32(8).uint64(message.seed);
    }
    if (message.numRuns !== 0) {
      writer.uint32(16).uint32(message.numRuns);
    }
    if (message.blockSize !== 0) {
      writer.uint32(24).uint32(message.blockSize);
    }
    if (message.staggerRunStarts !== false) {
      writer.uint32(32).bool(message.staggerRunStarts);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WirePlanParamsServerSamplingMonteCarlo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerSamplingMonteCarlo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.seed = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.numRuns = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.blockSize = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.staggerRunStarts = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerSamplingMonteCarlo {
    return {
      seed: isSet(object.seed) ? globalThis.Number(object.seed) : 0,
      numRuns: isSet(object.numRuns) ? globalThis.Number(object.numRuns) : 0,
      blockSize: isSet(object.blockSize) ? globalThis.Number(object.blockSize) : 0,
      staggerRunStarts: isSet(object.staggerRunStarts) ? globalThis.Boolean(object.staggerRunStarts) : false,
    };
  },

  toJSON(message: WirePlanParamsServerSamplingMonteCarlo): unknown {
    const obj: any = {};
    if (message.seed !== 0) {
      obj.seed = Math.round(message.seed);
    }
    if (message.numRuns !== 0) {
      obj.numRuns = Math.round(message.numRuns);
    }
    if (message.blockSize !== 0) {
      obj.blockSize = Math.round(message.blockSize);
    }
    if (message.staggerRunStarts !== false) {
      obj.staggerRunStarts = message.staggerRunStarts;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerSamplingMonteCarlo>, I>>(
    base?: I,
  ): WirePlanParamsServerSamplingMonteCarlo {
    return WirePlanParamsServerSamplingMonteCarlo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerSamplingMonteCarlo>, I>>(
    object: I,
  ): WirePlanParamsServerSamplingMonteCarlo {
    const message = createBaseWirePlanParamsServerSamplingMonteCarlo();
    message.seed = object.seed ?? 0;
    message.numRuns = object.numRuns ?? 0;
    message.blockSize = object.blockSize ?? 0;
    message.staggerRunStarts = object.staggerRunStarts ?? false;
    return message;
  },
};

function createBaseWirePlanParamsServerAdvanced(): WirePlanParamsServerAdvanced {
  return {
    returnStatsForPlanning: undefined,
    historicalReturnsAdjustment: undefined,
    annualInflation: undefined,
    sampling: undefined,
    strategy: 0,
  };
}

export const WirePlanParamsServerAdvanced: MessageFns<WirePlanParamsServerAdvanced> = {
  encode(message: WirePlanParamsServerAdvanced, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.returnStatsForPlanning !== undefined) {
      WirePlanParamsServerReturnStatsForPlanning.encode(message.returnStatsForPlanning, writer.uint32(10).fork())
        .join();
    }
    if (message.historicalReturnsAdjustment !== undefined) {
      WirePlanParamsServerHistoricalReturnsAdjustment.encode(
        message.historicalReturnsAdjustment,
        writer.uint32(18).fork(),
      ).join();
    }
    switch (message.annualInflation?.$case) {
      case "suggested":
        NoMessage.encode(message.annualInflation.suggested, writer.uint32(26).fork()).join();
        break;
      case "manual":
        writer.uint32(33).double(message.annualInflation.manual);
        break;
    }
    switch (message.sampling?.$case) {
      case "historical":
        NoMessage.encode(message.sampling.historical, writer.uint32(42).fork()).join();
        break;
      case "monteCarlo":
        WirePlanParamsServerSamplingMonteCarlo.encode(message.sampling.monteCarlo, writer.uint32(50).fork()).join();
        break;
    }
    if (message.strategy !== 0) {
      writer.uint32(56).int32(message.strategy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WirePlanParamsServerAdvanced {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServerAdvanced();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.returnStatsForPlanning = WirePlanParamsServerReturnStatsForPlanning.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.historicalReturnsAdjustment = WirePlanParamsServerHistoricalReturnsAdjustment.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.annualInflation = { $case: "suggested", suggested: NoMessage.decode(reader, reader.uint32()) };
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.annualInflation = { $case: "manual", manual: reader.double() };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.sampling = { $case: "historical", historical: NoMessage.decode(reader, reader.uint32()) };
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.sampling = {
            $case: "monteCarlo",
            monteCarlo: WirePlanParamsServerSamplingMonteCarlo.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.strategy = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServerAdvanced {
    return {
      returnStatsForPlanning: isSet(object.returnStatsForPlanning)
        ? WirePlanParamsServerReturnStatsForPlanning.fromJSON(object.returnStatsForPlanning)
        : undefined,
      historicalReturnsAdjustment: isSet(object.historicalReturnsAdjustment)
        ? WirePlanParamsServerHistoricalReturnsAdjustment.fromJSON(object.historicalReturnsAdjustment)
        : undefined,
      annualInflation: isSet(object.suggested)
        ? { $case: "suggested", suggested: NoMessage.fromJSON(object.suggested) }
        : isSet(object.manual)
        ? { $case: "manual", manual: globalThis.Number(object.manual) }
        : undefined,
      sampling: isSet(object.historical)
        ? { $case: "historical", historical: NoMessage.fromJSON(object.historical) }
        : isSet(object.monteCarlo)
        ? { $case: "monteCarlo", monteCarlo: WirePlanParamsServerSamplingMonteCarlo.fromJSON(object.monteCarlo) }
        : undefined,
      strategy: isSet(object.strategy) ? wirePlanParamsServerStrategyFromJSON(object.strategy) : 0,
    };
  },

  toJSON(message: WirePlanParamsServerAdvanced): unknown {
    const obj: any = {};
    if (message.returnStatsForPlanning !== undefined) {
      obj.returnStatsForPlanning = WirePlanParamsServerReturnStatsForPlanning.toJSON(message.returnStatsForPlanning);
    }
    if (message.historicalReturnsAdjustment !== undefined) {
      obj.historicalReturnsAdjustment = WirePlanParamsServerHistoricalReturnsAdjustment.toJSON(
        message.historicalReturnsAdjustment,
      );
    }
    if (message.annualInflation?.$case === "suggested") {
      obj.suggested = NoMessage.toJSON(message.annualInflation.suggested);
    } else if (message.annualInflation?.$case === "manual") {
      obj.manual = message.annualInflation.manual;
    }
    if (message.sampling?.$case === "historical") {
      obj.historical = NoMessage.toJSON(message.sampling.historical);
    } else if (message.sampling?.$case === "monteCarlo") {
      obj.monteCarlo = WirePlanParamsServerSamplingMonteCarlo.toJSON(message.sampling.monteCarlo);
    }
    if (message.strategy !== 0) {
      obj.strategy = wirePlanParamsServerStrategyToJSON(message.strategy);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServerAdvanced>, I>>(base?: I): WirePlanParamsServerAdvanced {
    return WirePlanParamsServerAdvanced.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServerAdvanced>, I>>(object: I): WirePlanParamsServerAdvanced {
    const message = createBaseWirePlanParamsServerAdvanced();
    message.returnStatsForPlanning =
      (object.returnStatsForPlanning !== undefined && object.returnStatsForPlanning !== null)
        ? WirePlanParamsServerReturnStatsForPlanning.fromPartial(object.returnStatsForPlanning)
        : undefined;
    message.historicalReturnsAdjustment =
      (object.historicalReturnsAdjustment !== undefined && object.historicalReturnsAdjustment !== null)
        ? WirePlanParamsServerHistoricalReturnsAdjustment.fromPartial(object.historicalReturnsAdjustment)
        : undefined;
    switch (object.annualInflation?.$case) {
      case "suggested": {
        if (object.annualInflation?.suggested !== undefined && object.annualInflation?.suggested !== null) {
          message.annualInflation = {
            $case: "suggested",
            suggested: NoMessage.fromPartial(object.annualInflation.suggested),
          };
        }
        break;
      }
      case "manual": {
        if (object.annualInflation?.manual !== undefined && object.annualInflation?.manual !== null) {
          message.annualInflation = { $case: "manual", manual: object.annualInflation.manual };
        }
        break;
      }
    }
    switch (object.sampling?.$case) {
      case "historical": {
        if (object.sampling?.historical !== undefined && object.sampling?.historical !== null) {
          message.sampling = { $case: "historical", historical: NoMessage.fromPartial(object.sampling.historical) };
        }
        break;
      }
      case "monteCarlo": {
        if (object.sampling?.monteCarlo !== undefined && object.sampling?.monteCarlo !== null) {
          message.sampling = {
            $case: "monteCarlo",
            monteCarlo: WirePlanParamsServerSamplingMonteCarlo.fromPartial(object.sampling.monteCarlo),
          };
        }
        break;
      }
    }
    message.strategy = object.strategy ?? 0;
    return message;
  },
};

function createBaseWirePlanParamsServer(): WirePlanParamsServer {
  return {
    evaluationTimestampMs: 0,
    constants: undefined,
    ages: undefined,
    wealth: undefined,
    adjustmentsToSpending: undefined,
    risk: undefined,
    advanced: undefined,
  };
}

export const WirePlanParamsServer: MessageFns<WirePlanParamsServer> = {
  encode(message: WirePlanParamsServer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.evaluationTimestampMs !== 0) {
      writer.uint32(8).int64(message.evaluationTimestampMs);
    }
    if (message.constants !== undefined) {
      WirePlanParamsServerConstants.encode(message.constants, writer.uint32(18).fork()).join();
    }
    if (message.ages !== undefined) {
      WirePlanParamsServerAges.encode(message.ages, writer.uint32(26).fork()).join();
    }
    if (message.wealth !== undefined) {
      WirePlanParamsServerWealth.encode(message.wealth, writer.uint32(34).fork()).join();
    }
    if (message.adjustmentsToSpending !== undefined) {
      WirePlanParamsServerAdjustmentsToSpending.encode(message.adjustmentsToSpending, writer.uint32(42).fork()).join();
    }
    if (message.risk !== undefined) {
      WirePlanParamsServerRisk.encode(message.risk, writer.uint32(50).fork()).join();
    }
    if (message.advanced !== undefined) {
      WirePlanParamsServerAdvanced.encode(message.advanced, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WirePlanParamsServer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePlanParamsServer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.evaluationTimestampMs = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.constants = WirePlanParamsServerConstants.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ages = WirePlanParamsServerAges.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.wealth = WirePlanParamsServerWealth.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.adjustmentsToSpending = WirePlanParamsServerAdjustmentsToSpending.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.risk = WirePlanParamsServerRisk.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.advanced = WirePlanParamsServerAdvanced.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePlanParamsServer {
    return {
      evaluationTimestampMs: isSet(object.evaluationTimestampMs) ? globalThis.Number(object.evaluationTimestampMs) : 0,
      constants: isSet(object.constants) ? WirePlanParamsServerConstants.fromJSON(object.constants) : undefined,
      ages: isSet(object.ages) ? WirePlanParamsServerAges.fromJSON(object.ages) : undefined,
      wealth: isSet(object.wealth) ? WirePlanParamsServerWealth.fromJSON(object.wealth) : undefined,
      adjustmentsToSpending: isSet(object.adjustmentsToSpending)
        ? WirePlanParamsServerAdjustmentsToSpending.fromJSON(object.adjustmentsToSpending)
        : undefined,
      risk: isSet(object.risk) ? WirePlanParamsServerRisk.fromJSON(object.risk) : undefined,
      advanced: isSet(object.advanced) ? WirePlanParamsServerAdvanced.fromJSON(object.advanced) : undefined,
    };
  },

  toJSON(message: WirePlanParamsServer): unknown {
    const obj: any = {};
    if (message.evaluationTimestampMs !== 0) {
      obj.evaluationTimestampMs = Math.round(message.evaluationTimestampMs);
    }
    if (message.constants !== undefined) {
      obj.constants = WirePlanParamsServerConstants.toJSON(message.constants);
    }
    if (message.ages !== undefined) {
      obj.ages = WirePlanParamsServerAges.toJSON(message.ages);
    }
    if (message.wealth !== undefined) {
      obj.wealth = WirePlanParamsServerWealth.toJSON(message.wealth);
    }
    if (message.adjustmentsToSpending !== undefined) {
      obj.adjustmentsToSpending = WirePlanParamsServerAdjustmentsToSpending.toJSON(message.adjustmentsToSpending);
    }
    if (message.risk !== undefined) {
      obj.risk = WirePlanParamsServerRisk.toJSON(message.risk);
    }
    if (message.advanced !== undefined) {
      obj.advanced = WirePlanParamsServerAdvanced.toJSON(message.advanced);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePlanParamsServer>, I>>(base?: I): WirePlanParamsServer {
    return WirePlanParamsServer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePlanParamsServer>, I>>(object: I): WirePlanParamsServer {
    const message = createBaseWirePlanParamsServer();
    message.evaluationTimestampMs = object.evaluationTimestampMs ?? 0;
    message.constants = (object.constants !== undefined && object.constants !== null)
      ? WirePlanParamsServerConstants.fromPartial(object.constants)
      : undefined;
    message.ages = (object.ages !== undefined && object.ages !== null)
      ? WirePlanParamsServerAges.fromPartial(object.ages)
      : undefined;
    message.wealth = (object.wealth !== undefined && object.wealth !== null)
      ? WirePlanParamsServerWealth.fromPartial(object.wealth)
      : undefined;
    message.adjustmentsToSpending =
      (object.adjustmentsToSpending !== undefined && object.adjustmentsToSpending !== null)
        ? WirePlanParamsServerAdjustmentsToSpending.fromPartial(object.adjustmentsToSpending)
        : undefined;
    message.risk = (object.risk !== undefined && object.risk !== null)
      ? WirePlanParamsServerRisk.fromPartial(object.risk)
      : undefined;
    message.advanced = (object.advanced !== undefined && object.advanced !== null)
      ? WirePlanParamsServerAdvanced.fromPartial(object.advanced)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
