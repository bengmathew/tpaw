// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.12.4
// source: wire_estimate_portfolio_balance_api.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { WireStockAllocation } from "./wire_common";
import { WirePlanParamsServer } from "./wire_plan_params_server";

export const protobufPackage = "wire";

/**
 * -----------------------------------------
 * Args
 * -----------------------------------------
 */
export enum WirePortfolioBalanceEstimationArgsNonMarketActionType {
  WITHDRAWAL_AND_CONTRIBUTION = 1,
  MONTHLY_REBALANCE = 2,
  PLAN_CHANGE = 3,
  UNRECOGNIZED = -1,
}

export function wirePortfolioBalanceEstimationArgsNonMarketActionTypeFromJSON(
  object: any,
): WirePortfolioBalanceEstimationArgsNonMarketActionType {
  switch (object) {
    case 1:
    case "WITHDRAWAL_AND_CONTRIBUTION":
      return WirePortfolioBalanceEstimationArgsNonMarketActionType.WITHDRAWAL_AND_CONTRIBUTION;
    case 2:
    case "MONTHLY_REBALANCE":
      return WirePortfolioBalanceEstimationArgsNonMarketActionType.MONTHLY_REBALANCE;
    case 3:
    case "PLAN_CHANGE":
      return WirePortfolioBalanceEstimationArgsNonMarketActionType.PLAN_CHANGE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WirePortfolioBalanceEstimationArgsNonMarketActionType.UNRECOGNIZED;
  }
}

export function wirePortfolioBalanceEstimationArgsNonMarketActionTypeToJSON(
  object: WirePortfolioBalanceEstimationArgsNonMarketActionType,
): string {
  switch (object) {
    case WirePortfolioBalanceEstimationArgsNonMarketActionType.WITHDRAWAL_AND_CONTRIBUTION:
      return "WITHDRAWAL_AND_CONTRIBUTION";
    case WirePortfolioBalanceEstimationArgsNonMarketActionType.MONTHLY_REBALANCE:
      return "MONTHLY_REBALANCE";
    case WirePortfolioBalanceEstimationArgsNonMarketActionType.PLAN_CHANGE:
      return "PLAN_CHANGE";
    case WirePortfolioBalanceEstimationArgsNonMarketActionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface WirePortfolioBalanceEstimationArgsParamsForNonMarketAction {
  id: string;
  planParams: WirePlanParamsServer | undefined;
  actionType: WirePortfolioBalanceEstimationArgsNonMarketActionType;
}

export interface WirePortfolioBalanceEstimationArgs {
  startBalance: number;
  planParamsForNonMarketActionsUnsorted: WirePortfolioBalanceEstimationArgsParamsForNonMarketAction[];
}

/**
 * -----------------------------------------
 * Result
 * -----------------------------------------
 */
export interface WirePortfolioBalanceEstimationState {
  estimate: number;
  allocation: WireStockAllocation | undefined;
}

export interface WirePortfolioBalanceEstimationStateChange {
  start: WirePortfolioBalanceEstimationState | undefined;
  end: WirePortfolioBalanceEstimationState | undefined;
}

export interface WireVTAndBNDPercentageChange {
  vtX10000: number;
  bndX10000: number;
}

export interface WirePortfolioBalanceEstimationActionArgsMarketClose {
  percentageChangeFromLastClose: WireVTAndBNDPercentageChange | undefined;
}

export interface WirePortfolioBalanceEstimationActionArgsWithdrawalAndContribution {
  withdrawalOrContribution?: { $case: "contribution"; contribution: number } | {
    $case: "withdrawal";
    withdrawal: number;
  } | undefined;
}

export interface WirePortfolioBalanceEstimationActionArgsMonthlyRebalance {
  allocation: WireStockAllocation | undefined;
}

export interface WirePortfolioBalanceEstimationActionArgsPlanChangePortfolioUpdate {
  amount: number;
  exactTimestampMs: number;
}

export interface WirePortfolioBalanceEstimationActionArgsPlanChange {
  allocation: WireStockAllocation | undefined;
  portfolioUpdateOpt?: WirePortfolioBalanceEstimationActionArgsPlanChangePortfolioUpdate | undefined;
}

export interface WirePortfolioBalanceEstimationAction {
  timestampMs: number;
  args?:
    | { $case: "marketClose"; marketClose: WirePortfolioBalanceEstimationActionArgsMarketClose }
    | {
      $case: "withdrawalAndContribution";
      withdrawalAndContribution: WirePortfolioBalanceEstimationActionArgsWithdrawalAndContribution;
    }
    | { $case: "monthlyRebalance"; monthlyRebalance: WirePortfolioBalanceEstimationActionArgsMonthlyRebalance }
    | { $case: "planChange"; planChange: WirePortfolioBalanceEstimationActionArgsPlanChange }
    | undefined;
  stateChange: WirePortfolioBalanceEstimationStateChange | undefined;
}

export interface WirePortfolioBalanceEstimationResult {
  startTimestampMs: number;
  endTimestampMs: number;
  startState: WirePortfolioBalanceEstimationState | undefined;
  actions: WirePortfolioBalanceEstimationAction[];
}

function createBaseWirePortfolioBalanceEstimationArgsParamsForNonMarketAction(): WirePortfolioBalanceEstimationArgsParamsForNonMarketAction {
  return { id: "", planParams: undefined, actionType: 1 };
}

export const WirePortfolioBalanceEstimationArgsParamsForNonMarketAction = {
  encode(
    message: WirePortfolioBalanceEstimationArgsParamsForNonMarketAction,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.planParams !== undefined) {
      WirePlanParamsServer.encode(message.planParams, writer.uint32(18).fork()).ldelim();
    }
    if (message.actionType !== 1) {
      writer.uint32(24).int32(message.actionType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WirePortfolioBalanceEstimationArgsParamsForNonMarketAction {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePortfolioBalanceEstimationArgsParamsForNonMarketAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.planParams = WirePlanParamsServer.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.actionType = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePortfolioBalanceEstimationArgsParamsForNonMarketAction {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      planParams: isSet(object.planParams) ? WirePlanParamsServer.fromJSON(object.planParams) : undefined,
      actionType: isSet(object.actionType)
        ? wirePortfolioBalanceEstimationArgsNonMarketActionTypeFromJSON(object.actionType)
        : 1,
    };
  },

  toJSON(message: WirePortfolioBalanceEstimationArgsParamsForNonMarketAction): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.planParams !== undefined) {
      obj.planParams = WirePlanParamsServer.toJSON(message.planParams);
    }
    if (message.actionType !== 1) {
      obj.actionType = wirePortfolioBalanceEstimationArgsNonMarketActionTypeToJSON(message.actionType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePortfolioBalanceEstimationArgsParamsForNonMarketAction>, I>>(
    base?: I,
  ): WirePortfolioBalanceEstimationArgsParamsForNonMarketAction {
    return WirePortfolioBalanceEstimationArgsParamsForNonMarketAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePortfolioBalanceEstimationArgsParamsForNonMarketAction>, I>>(
    object: I,
  ): WirePortfolioBalanceEstimationArgsParamsForNonMarketAction {
    const message = createBaseWirePortfolioBalanceEstimationArgsParamsForNonMarketAction();
    message.id = object.id ?? "";
    message.planParams = (object.planParams !== undefined && object.planParams !== null)
      ? WirePlanParamsServer.fromPartial(object.planParams)
      : undefined;
    message.actionType = object.actionType ?? 1;
    return message;
  },
};

function createBaseWirePortfolioBalanceEstimationArgs(): WirePortfolioBalanceEstimationArgs {
  return { startBalance: 0, planParamsForNonMarketActionsUnsorted: [] };
}

export const WirePortfolioBalanceEstimationArgs = {
  encode(message: WirePortfolioBalanceEstimationArgs, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.startBalance !== 0) {
      writer.uint32(9).double(message.startBalance);
    }
    for (const v of message.planParamsForNonMarketActionsUnsorted) {
      WirePortfolioBalanceEstimationArgsParamsForNonMarketAction.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WirePortfolioBalanceEstimationArgs {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePortfolioBalanceEstimationArgs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 9) {
            break;
          }

          message.startBalance = reader.double();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.planParamsForNonMarketActionsUnsorted.push(
            WirePortfolioBalanceEstimationArgsParamsForNonMarketAction.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePortfolioBalanceEstimationArgs {
    return {
      startBalance: isSet(object.startBalance) ? globalThis.Number(object.startBalance) : 0,
      planParamsForNonMarketActionsUnsorted: globalThis.Array.isArray(object?.planParamsForNonMarketActionsUnsorted)
        ? object.planParamsForNonMarketActionsUnsorted.map((e: any) =>
          WirePortfolioBalanceEstimationArgsParamsForNonMarketAction.fromJSON(e)
        )
        : [],
    };
  },

  toJSON(message: WirePortfolioBalanceEstimationArgs): unknown {
    const obj: any = {};
    if (message.startBalance !== 0) {
      obj.startBalance = message.startBalance;
    }
    if (message.planParamsForNonMarketActionsUnsorted?.length) {
      obj.planParamsForNonMarketActionsUnsorted = message.planParamsForNonMarketActionsUnsorted.map((e) =>
        WirePortfolioBalanceEstimationArgsParamsForNonMarketAction.toJSON(e)
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePortfolioBalanceEstimationArgs>, I>>(
    base?: I,
  ): WirePortfolioBalanceEstimationArgs {
    return WirePortfolioBalanceEstimationArgs.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePortfolioBalanceEstimationArgs>, I>>(
    object: I,
  ): WirePortfolioBalanceEstimationArgs {
    const message = createBaseWirePortfolioBalanceEstimationArgs();
    message.startBalance = object.startBalance ?? 0;
    message.planParamsForNonMarketActionsUnsorted =
      object.planParamsForNonMarketActionsUnsorted?.map((e) =>
        WirePortfolioBalanceEstimationArgsParamsForNonMarketAction.fromPartial(e)
      ) || [];
    return message;
  },
};

function createBaseWirePortfolioBalanceEstimationState(): WirePortfolioBalanceEstimationState {
  return { estimate: 0, allocation: undefined };
}

export const WirePortfolioBalanceEstimationState = {
  encode(message: WirePortfolioBalanceEstimationState, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.estimate !== 0) {
      writer.uint32(8).int64(message.estimate);
    }
    if (message.allocation !== undefined) {
      WireStockAllocation.encode(message.allocation, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WirePortfolioBalanceEstimationState {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePortfolioBalanceEstimationState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.estimate = longToNumber(reader.int64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.allocation = WireStockAllocation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePortfolioBalanceEstimationState {
    return {
      estimate: isSet(object.estimate) ? globalThis.Number(object.estimate) : 0,
      allocation: isSet(object.allocation) ? WireStockAllocation.fromJSON(object.allocation) : undefined,
    };
  },

  toJSON(message: WirePortfolioBalanceEstimationState): unknown {
    const obj: any = {};
    if (message.estimate !== 0) {
      obj.estimate = Math.round(message.estimate);
    }
    if (message.allocation !== undefined) {
      obj.allocation = WireStockAllocation.toJSON(message.allocation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePortfolioBalanceEstimationState>, I>>(
    base?: I,
  ): WirePortfolioBalanceEstimationState {
    return WirePortfolioBalanceEstimationState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePortfolioBalanceEstimationState>, I>>(
    object: I,
  ): WirePortfolioBalanceEstimationState {
    const message = createBaseWirePortfolioBalanceEstimationState();
    message.estimate = object.estimate ?? 0;
    message.allocation = (object.allocation !== undefined && object.allocation !== null)
      ? WireStockAllocation.fromPartial(object.allocation)
      : undefined;
    return message;
  },
};

function createBaseWirePortfolioBalanceEstimationStateChange(): WirePortfolioBalanceEstimationStateChange {
  return { start: undefined, end: undefined };
}

export const WirePortfolioBalanceEstimationStateChange = {
  encode(message: WirePortfolioBalanceEstimationStateChange, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.start !== undefined) {
      WirePortfolioBalanceEstimationState.encode(message.start, writer.uint32(10).fork()).ldelim();
    }
    if (message.end !== undefined) {
      WirePortfolioBalanceEstimationState.encode(message.end, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WirePortfolioBalanceEstimationStateChange {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePortfolioBalanceEstimationStateChange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.start = WirePortfolioBalanceEstimationState.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.end = WirePortfolioBalanceEstimationState.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePortfolioBalanceEstimationStateChange {
    return {
      start: isSet(object.start) ? WirePortfolioBalanceEstimationState.fromJSON(object.start) : undefined,
      end: isSet(object.end) ? WirePortfolioBalanceEstimationState.fromJSON(object.end) : undefined,
    };
  },

  toJSON(message: WirePortfolioBalanceEstimationStateChange): unknown {
    const obj: any = {};
    if (message.start !== undefined) {
      obj.start = WirePortfolioBalanceEstimationState.toJSON(message.start);
    }
    if (message.end !== undefined) {
      obj.end = WirePortfolioBalanceEstimationState.toJSON(message.end);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePortfolioBalanceEstimationStateChange>, I>>(
    base?: I,
  ): WirePortfolioBalanceEstimationStateChange {
    return WirePortfolioBalanceEstimationStateChange.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePortfolioBalanceEstimationStateChange>, I>>(
    object: I,
  ): WirePortfolioBalanceEstimationStateChange {
    const message = createBaseWirePortfolioBalanceEstimationStateChange();
    message.start = (object.start !== undefined && object.start !== null)
      ? WirePortfolioBalanceEstimationState.fromPartial(object.start)
      : undefined;
    message.end = (object.end !== undefined && object.end !== null)
      ? WirePortfolioBalanceEstimationState.fromPartial(object.end)
      : undefined;
    return message;
  },
};

function createBaseWireVTAndBNDPercentageChange(): WireVTAndBNDPercentageChange {
  return { vtX10000: 0, bndX10000: 0 };
}

export const WireVTAndBNDPercentageChange = {
  encode(message: WireVTAndBNDPercentageChange, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.vtX10000 !== 0) {
      writer.uint32(8).int64(message.vtX10000);
    }
    if (message.bndX10000 !== 0) {
      writer.uint32(16).int64(message.bndX10000);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WireVTAndBNDPercentageChange {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWireVTAndBNDPercentageChange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.vtX10000 = longToNumber(reader.int64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.bndX10000 = longToNumber(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WireVTAndBNDPercentageChange {
    return {
      vtX10000: isSet(object.vtX10000) ? globalThis.Number(object.vtX10000) : 0,
      bndX10000: isSet(object.bndX10000) ? globalThis.Number(object.bndX10000) : 0,
    };
  },

  toJSON(message: WireVTAndBNDPercentageChange): unknown {
    const obj: any = {};
    if (message.vtX10000 !== 0) {
      obj.vtX10000 = Math.round(message.vtX10000);
    }
    if (message.bndX10000 !== 0) {
      obj.bndX10000 = Math.round(message.bndX10000);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WireVTAndBNDPercentageChange>, I>>(base?: I): WireVTAndBNDPercentageChange {
    return WireVTAndBNDPercentageChange.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WireVTAndBNDPercentageChange>, I>>(object: I): WireVTAndBNDPercentageChange {
    const message = createBaseWireVTAndBNDPercentageChange();
    message.vtX10000 = object.vtX10000 ?? 0;
    message.bndX10000 = object.bndX10000 ?? 0;
    return message;
  },
};

function createBaseWirePortfolioBalanceEstimationActionArgsMarketClose(): WirePortfolioBalanceEstimationActionArgsMarketClose {
  return { percentageChangeFromLastClose: undefined };
}

export const WirePortfolioBalanceEstimationActionArgsMarketClose = {
  encode(
    message: WirePortfolioBalanceEstimationActionArgsMarketClose,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.percentageChangeFromLastClose !== undefined) {
      WireVTAndBNDPercentageChange.encode(message.percentageChangeFromLastClose, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WirePortfolioBalanceEstimationActionArgsMarketClose {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePortfolioBalanceEstimationActionArgsMarketClose();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.percentageChangeFromLastClose = WireVTAndBNDPercentageChange.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePortfolioBalanceEstimationActionArgsMarketClose {
    return {
      percentageChangeFromLastClose: isSet(object.percentageChangeFromLastClose)
        ? WireVTAndBNDPercentageChange.fromJSON(object.percentageChangeFromLastClose)
        : undefined,
    };
  },

  toJSON(message: WirePortfolioBalanceEstimationActionArgsMarketClose): unknown {
    const obj: any = {};
    if (message.percentageChangeFromLastClose !== undefined) {
      obj.percentageChangeFromLastClose = WireVTAndBNDPercentageChange.toJSON(message.percentageChangeFromLastClose);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePortfolioBalanceEstimationActionArgsMarketClose>, I>>(
    base?: I,
  ): WirePortfolioBalanceEstimationActionArgsMarketClose {
    return WirePortfolioBalanceEstimationActionArgsMarketClose.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePortfolioBalanceEstimationActionArgsMarketClose>, I>>(
    object: I,
  ): WirePortfolioBalanceEstimationActionArgsMarketClose {
    const message = createBaseWirePortfolioBalanceEstimationActionArgsMarketClose();
    message.percentageChangeFromLastClose =
      (object.percentageChangeFromLastClose !== undefined && object.percentageChangeFromLastClose !== null)
        ? WireVTAndBNDPercentageChange.fromPartial(object.percentageChangeFromLastClose)
        : undefined;
    return message;
  },
};

function createBaseWirePortfolioBalanceEstimationActionArgsWithdrawalAndContribution(): WirePortfolioBalanceEstimationActionArgsWithdrawalAndContribution {
  return { withdrawalOrContribution: undefined };
}

export const WirePortfolioBalanceEstimationActionArgsWithdrawalAndContribution = {
  encode(
    message: WirePortfolioBalanceEstimationActionArgsWithdrawalAndContribution,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    switch (message.withdrawalOrContribution?.$case) {
      case "contribution":
        writer.uint32(8).int64(message.withdrawalOrContribution.contribution);
        break;
      case "withdrawal":
        writer.uint32(16).int64(message.withdrawalOrContribution.withdrawal);
        break;
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): WirePortfolioBalanceEstimationActionArgsWithdrawalAndContribution {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePortfolioBalanceEstimationActionArgsWithdrawalAndContribution();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.withdrawalOrContribution = {
            $case: "contribution",
            contribution: longToNumber(reader.int64() as Long),
          };
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.withdrawalOrContribution = { $case: "withdrawal", withdrawal: longToNumber(reader.int64() as Long) };
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePortfolioBalanceEstimationActionArgsWithdrawalAndContribution {
    return {
      withdrawalOrContribution: isSet(object.contribution)
        ? { $case: "contribution", contribution: globalThis.Number(object.contribution) }
        : isSet(object.withdrawal)
        ? { $case: "withdrawal", withdrawal: globalThis.Number(object.withdrawal) }
        : undefined,
    };
  },

  toJSON(message: WirePortfolioBalanceEstimationActionArgsWithdrawalAndContribution): unknown {
    const obj: any = {};
    if (message.withdrawalOrContribution?.$case === "contribution") {
      obj.contribution = Math.round(message.withdrawalOrContribution.contribution);
    }
    if (message.withdrawalOrContribution?.$case === "withdrawal") {
      obj.withdrawal = Math.round(message.withdrawalOrContribution.withdrawal);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePortfolioBalanceEstimationActionArgsWithdrawalAndContribution>, I>>(
    base?: I,
  ): WirePortfolioBalanceEstimationActionArgsWithdrawalAndContribution {
    return WirePortfolioBalanceEstimationActionArgsWithdrawalAndContribution.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePortfolioBalanceEstimationActionArgsWithdrawalAndContribution>, I>>(
    object: I,
  ): WirePortfolioBalanceEstimationActionArgsWithdrawalAndContribution {
    const message = createBaseWirePortfolioBalanceEstimationActionArgsWithdrawalAndContribution();
    if (
      object.withdrawalOrContribution?.$case === "contribution" &&
      object.withdrawalOrContribution?.contribution !== undefined &&
      object.withdrawalOrContribution?.contribution !== null
    ) {
      message.withdrawalOrContribution = {
        $case: "contribution",
        contribution: object.withdrawalOrContribution.contribution,
      };
    }
    if (
      object.withdrawalOrContribution?.$case === "withdrawal" &&
      object.withdrawalOrContribution?.withdrawal !== undefined &&
      object.withdrawalOrContribution?.withdrawal !== null
    ) {
      message.withdrawalOrContribution = {
        $case: "withdrawal",
        withdrawal: object.withdrawalOrContribution.withdrawal,
      };
    }
    return message;
  },
};

function createBaseWirePortfolioBalanceEstimationActionArgsMonthlyRebalance(): WirePortfolioBalanceEstimationActionArgsMonthlyRebalance {
  return { allocation: undefined };
}

export const WirePortfolioBalanceEstimationActionArgsMonthlyRebalance = {
  encode(
    message: WirePortfolioBalanceEstimationActionArgsMonthlyRebalance,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.allocation !== undefined) {
      WireStockAllocation.encode(message.allocation, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WirePortfolioBalanceEstimationActionArgsMonthlyRebalance {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePortfolioBalanceEstimationActionArgsMonthlyRebalance();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.allocation = WireStockAllocation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePortfolioBalanceEstimationActionArgsMonthlyRebalance {
    return { allocation: isSet(object.allocation) ? WireStockAllocation.fromJSON(object.allocation) : undefined };
  },

  toJSON(message: WirePortfolioBalanceEstimationActionArgsMonthlyRebalance): unknown {
    const obj: any = {};
    if (message.allocation !== undefined) {
      obj.allocation = WireStockAllocation.toJSON(message.allocation);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePortfolioBalanceEstimationActionArgsMonthlyRebalance>, I>>(
    base?: I,
  ): WirePortfolioBalanceEstimationActionArgsMonthlyRebalance {
    return WirePortfolioBalanceEstimationActionArgsMonthlyRebalance.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePortfolioBalanceEstimationActionArgsMonthlyRebalance>, I>>(
    object: I,
  ): WirePortfolioBalanceEstimationActionArgsMonthlyRebalance {
    const message = createBaseWirePortfolioBalanceEstimationActionArgsMonthlyRebalance();
    message.allocation = (object.allocation !== undefined && object.allocation !== null)
      ? WireStockAllocation.fromPartial(object.allocation)
      : undefined;
    return message;
  },
};

function createBaseWirePortfolioBalanceEstimationActionArgsPlanChangePortfolioUpdate(): WirePortfolioBalanceEstimationActionArgsPlanChangePortfolioUpdate {
  return { amount: 0, exactTimestampMs: 0 };
}

export const WirePortfolioBalanceEstimationActionArgsPlanChangePortfolioUpdate = {
  encode(
    message: WirePortfolioBalanceEstimationActionArgsPlanChangePortfolioUpdate,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.amount !== 0) {
      writer.uint32(8).int64(message.amount);
    }
    if (message.exactTimestampMs !== 0) {
      writer.uint32(16).int64(message.exactTimestampMs);
    }
    return writer;
  },

  decode(
    input: _m0.Reader | Uint8Array,
    length?: number,
  ): WirePortfolioBalanceEstimationActionArgsPlanChangePortfolioUpdate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePortfolioBalanceEstimationActionArgsPlanChangePortfolioUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.amount = longToNumber(reader.int64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.exactTimestampMs = longToNumber(reader.int64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePortfolioBalanceEstimationActionArgsPlanChangePortfolioUpdate {
    return {
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      exactTimestampMs: isSet(object.exactTimestampMs) ? globalThis.Number(object.exactTimestampMs) : 0,
    };
  },

  toJSON(message: WirePortfolioBalanceEstimationActionArgsPlanChangePortfolioUpdate): unknown {
    const obj: any = {};
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.exactTimestampMs !== 0) {
      obj.exactTimestampMs = Math.round(message.exactTimestampMs);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePortfolioBalanceEstimationActionArgsPlanChangePortfolioUpdate>, I>>(
    base?: I,
  ): WirePortfolioBalanceEstimationActionArgsPlanChangePortfolioUpdate {
    return WirePortfolioBalanceEstimationActionArgsPlanChangePortfolioUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePortfolioBalanceEstimationActionArgsPlanChangePortfolioUpdate>, I>>(
    object: I,
  ): WirePortfolioBalanceEstimationActionArgsPlanChangePortfolioUpdate {
    const message = createBaseWirePortfolioBalanceEstimationActionArgsPlanChangePortfolioUpdate();
    message.amount = object.amount ?? 0;
    message.exactTimestampMs = object.exactTimestampMs ?? 0;
    return message;
  },
};

function createBaseWirePortfolioBalanceEstimationActionArgsPlanChange(): WirePortfolioBalanceEstimationActionArgsPlanChange {
  return { allocation: undefined, portfolioUpdateOpt: undefined };
}

export const WirePortfolioBalanceEstimationActionArgsPlanChange = {
  encode(
    message: WirePortfolioBalanceEstimationActionArgsPlanChange,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.allocation !== undefined) {
      WireStockAllocation.encode(message.allocation, writer.uint32(10).fork()).ldelim();
    }
    if (message.portfolioUpdateOpt !== undefined) {
      WirePortfolioBalanceEstimationActionArgsPlanChangePortfolioUpdate.encode(
        message.portfolioUpdateOpt,
        writer.uint32(18).fork(),
      ).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WirePortfolioBalanceEstimationActionArgsPlanChange {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePortfolioBalanceEstimationActionArgsPlanChange();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.allocation = WireStockAllocation.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.portfolioUpdateOpt = WirePortfolioBalanceEstimationActionArgsPlanChangePortfolioUpdate.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePortfolioBalanceEstimationActionArgsPlanChange {
    return {
      allocation: isSet(object.allocation) ? WireStockAllocation.fromJSON(object.allocation) : undefined,
      portfolioUpdateOpt: isSet(object.portfolioUpdateOpt)
        ? WirePortfolioBalanceEstimationActionArgsPlanChangePortfolioUpdate.fromJSON(object.portfolioUpdateOpt)
        : undefined,
    };
  },

  toJSON(message: WirePortfolioBalanceEstimationActionArgsPlanChange): unknown {
    const obj: any = {};
    if (message.allocation !== undefined) {
      obj.allocation = WireStockAllocation.toJSON(message.allocation);
    }
    if (message.portfolioUpdateOpt !== undefined) {
      obj.portfolioUpdateOpt = WirePortfolioBalanceEstimationActionArgsPlanChangePortfolioUpdate.toJSON(
        message.portfolioUpdateOpt,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePortfolioBalanceEstimationActionArgsPlanChange>, I>>(
    base?: I,
  ): WirePortfolioBalanceEstimationActionArgsPlanChange {
    return WirePortfolioBalanceEstimationActionArgsPlanChange.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePortfolioBalanceEstimationActionArgsPlanChange>, I>>(
    object: I,
  ): WirePortfolioBalanceEstimationActionArgsPlanChange {
    const message = createBaseWirePortfolioBalanceEstimationActionArgsPlanChange();
    message.allocation = (object.allocation !== undefined && object.allocation !== null)
      ? WireStockAllocation.fromPartial(object.allocation)
      : undefined;
    message.portfolioUpdateOpt = (object.portfolioUpdateOpt !== undefined && object.portfolioUpdateOpt !== null)
      ? WirePortfolioBalanceEstimationActionArgsPlanChangePortfolioUpdate.fromPartial(object.portfolioUpdateOpt)
      : undefined;
    return message;
  },
};

function createBaseWirePortfolioBalanceEstimationAction(): WirePortfolioBalanceEstimationAction {
  return { timestampMs: 0, args: undefined, stateChange: undefined };
}

export const WirePortfolioBalanceEstimationAction = {
  encode(message: WirePortfolioBalanceEstimationAction, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.timestampMs !== 0) {
      writer.uint32(8).int64(message.timestampMs);
    }
    switch (message.args?.$case) {
      case "marketClose":
        WirePortfolioBalanceEstimationActionArgsMarketClose.encode(message.args.marketClose, writer.uint32(18).fork())
          .ldelim();
        break;
      case "withdrawalAndContribution":
        WirePortfolioBalanceEstimationActionArgsWithdrawalAndContribution.encode(
          message.args.withdrawalAndContribution,
          writer.uint32(26).fork(),
        ).ldelim();
        break;
      case "monthlyRebalance":
        WirePortfolioBalanceEstimationActionArgsMonthlyRebalance.encode(
          message.args.monthlyRebalance,
          writer.uint32(34).fork(),
        ).ldelim();
        break;
      case "planChange":
        WirePortfolioBalanceEstimationActionArgsPlanChange.encode(message.args.planChange, writer.uint32(42).fork())
          .ldelim();
        break;
    }
    if (message.stateChange !== undefined) {
      WirePortfolioBalanceEstimationStateChange.encode(message.stateChange, writer.uint32(50).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WirePortfolioBalanceEstimationAction {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePortfolioBalanceEstimationAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.timestampMs = longToNumber(reader.int64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.args = {
            $case: "marketClose",
            marketClose: WirePortfolioBalanceEstimationActionArgsMarketClose.decode(reader, reader.uint32()),
          };
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.args = {
            $case: "withdrawalAndContribution",
            withdrawalAndContribution: WirePortfolioBalanceEstimationActionArgsWithdrawalAndContribution.decode(
              reader,
              reader.uint32(),
            ),
          };
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.args = {
            $case: "monthlyRebalance",
            monthlyRebalance: WirePortfolioBalanceEstimationActionArgsMonthlyRebalance.decode(reader, reader.uint32()),
          };
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.args = {
            $case: "planChange",
            planChange: WirePortfolioBalanceEstimationActionArgsPlanChange.decode(reader, reader.uint32()),
          };
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.stateChange = WirePortfolioBalanceEstimationStateChange.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePortfolioBalanceEstimationAction {
    return {
      timestampMs: isSet(object.timestampMs) ? globalThis.Number(object.timestampMs) : 0,
      args: isSet(object.marketClose)
        ? {
          $case: "marketClose",
          marketClose: WirePortfolioBalanceEstimationActionArgsMarketClose.fromJSON(object.marketClose),
        }
        : isSet(object.withdrawalAndContribution)
        ? {
          $case: "withdrawalAndContribution",
          withdrawalAndContribution: WirePortfolioBalanceEstimationActionArgsWithdrawalAndContribution.fromJSON(
            object.withdrawalAndContribution,
          ),
        }
        : isSet(object.monthlyRebalance)
        ? {
          $case: "monthlyRebalance",
          monthlyRebalance: WirePortfolioBalanceEstimationActionArgsMonthlyRebalance.fromJSON(object.monthlyRebalance),
        }
        : isSet(object.planChange)
        ? {
          $case: "planChange",
          planChange: WirePortfolioBalanceEstimationActionArgsPlanChange.fromJSON(object.planChange),
        }
        : undefined,
      stateChange: isSet(object.stateChange)
        ? WirePortfolioBalanceEstimationStateChange.fromJSON(object.stateChange)
        : undefined,
    };
  },

  toJSON(message: WirePortfolioBalanceEstimationAction): unknown {
    const obj: any = {};
    if (message.timestampMs !== 0) {
      obj.timestampMs = Math.round(message.timestampMs);
    }
    if (message.args?.$case === "marketClose") {
      obj.marketClose = WirePortfolioBalanceEstimationActionArgsMarketClose.toJSON(message.args.marketClose);
    }
    if (message.args?.$case === "withdrawalAndContribution") {
      obj.withdrawalAndContribution = WirePortfolioBalanceEstimationActionArgsWithdrawalAndContribution.toJSON(
        message.args.withdrawalAndContribution,
      );
    }
    if (message.args?.$case === "monthlyRebalance") {
      obj.monthlyRebalance = WirePortfolioBalanceEstimationActionArgsMonthlyRebalance.toJSON(
        message.args.monthlyRebalance,
      );
    }
    if (message.args?.$case === "planChange") {
      obj.planChange = WirePortfolioBalanceEstimationActionArgsPlanChange.toJSON(message.args.planChange);
    }
    if (message.stateChange !== undefined) {
      obj.stateChange = WirePortfolioBalanceEstimationStateChange.toJSON(message.stateChange);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePortfolioBalanceEstimationAction>, I>>(
    base?: I,
  ): WirePortfolioBalanceEstimationAction {
    return WirePortfolioBalanceEstimationAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePortfolioBalanceEstimationAction>, I>>(
    object: I,
  ): WirePortfolioBalanceEstimationAction {
    const message = createBaseWirePortfolioBalanceEstimationAction();
    message.timestampMs = object.timestampMs ?? 0;
    if (
      object.args?.$case === "marketClose" &&
      object.args?.marketClose !== undefined &&
      object.args?.marketClose !== null
    ) {
      message.args = {
        $case: "marketClose",
        marketClose: WirePortfolioBalanceEstimationActionArgsMarketClose.fromPartial(object.args.marketClose),
      };
    }
    if (
      object.args?.$case === "withdrawalAndContribution" &&
      object.args?.withdrawalAndContribution !== undefined &&
      object.args?.withdrawalAndContribution !== null
    ) {
      message.args = {
        $case: "withdrawalAndContribution",
        withdrawalAndContribution: WirePortfolioBalanceEstimationActionArgsWithdrawalAndContribution.fromPartial(
          object.args.withdrawalAndContribution,
        ),
      };
    }
    if (
      object.args?.$case === "monthlyRebalance" &&
      object.args?.monthlyRebalance !== undefined &&
      object.args?.monthlyRebalance !== null
    ) {
      message.args = {
        $case: "monthlyRebalance",
        monthlyRebalance: WirePortfolioBalanceEstimationActionArgsMonthlyRebalance.fromPartial(
          object.args.monthlyRebalance,
        ),
      };
    }
    if (
      object.args?.$case === "planChange" && object.args?.planChange !== undefined && object.args?.planChange !== null
    ) {
      message.args = {
        $case: "planChange",
        planChange: WirePortfolioBalanceEstimationActionArgsPlanChange.fromPartial(object.args.planChange),
      };
    }
    message.stateChange = (object.stateChange !== undefined && object.stateChange !== null)
      ? WirePortfolioBalanceEstimationStateChange.fromPartial(object.stateChange)
      : undefined;
    return message;
  },
};

function createBaseWirePortfolioBalanceEstimationResult(): WirePortfolioBalanceEstimationResult {
  return { startTimestampMs: 0, endTimestampMs: 0, startState: undefined, actions: [] };
}

export const WirePortfolioBalanceEstimationResult = {
  encode(message: WirePortfolioBalanceEstimationResult, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.startTimestampMs !== 0) {
      writer.uint32(8).int64(message.startTimestampMs);
    }
    if (message.endTimestampMs !== 0) {
      writer.uint32(16).int64(message.endTimestampMs);
    }
    if (message.startState !== undefined) {
      WirePortfolioBalanceEstimationState.encode(message.startState, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.actions) {
      WirePortfolioBalanceEstimationAction.encode(v!, writer.uint32(34).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WirePortfolioBalanceEstimationResult {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWirePortfolioBalanceEstimationResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.startTimestampMs = longToNumber(reader.int64() as Long);
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.endTimestampMs = longToNumber(reader.int64() as Long);
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.startState = WirePortfolioBalanceEstimationState.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.actions.push(WirePortfolioBalanceEstimationAction.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WirePortfolioBalanceEstimationResult {
    return {
      startTimestampMs: isSet(object.startTimestampMs) ? globalThis.Number(object.startTimestampMs) : 0,
      endTimestampMs: isSet(object.endTimestampMs) ? globalThis.Number(object.endTimestampMs) : 0,
      startState: isSet(object.startState)
        ? WirePortfolioBalanceEstimationState.fromJSON(object.startState)
        : undefined,
      actions: globalThis.Array.isArray(object?.actions)
        ? object.actions.map((e: any) => WirePortfolioBalanceEstimationAction.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WirePortfolioBalanceEstimationResult): unknown {
    const obj: any = {};
    if (message.startTimestampMs !== 0) {
      obj.startTimestampMs = Math.round(message.startTimestampMs);
    }
    if (message.endTimestampMs !== 0) {
      obj.endTimestampMs = Math.round(message.endTimestampMs);
    }
    if (message.startState !== undefined) {
      obj.startState = WirePortfolioBalanceEstimationState.toJSON(message.startState);
    }
    if (message.actions?.length) {
      obj.actions = message.actions.map((e) => WirePortfolioBalanceEstimationAction.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WirePortfolioBalanceEstimationResult>, I>>(
    base?: I,
  ): WirePortfolioBalanceEstimationResult {
    return WirePortfolioBalanceEstimationResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WirePortfolioBalanceEstimationResult>, I>>(
    object: I,
  ): WirePortfolioBalanceEstimationResult {
    const message = createBaseWirePortfolioBalanceEstimationResult();
    message.startTimestampMs = object.startTimestampMs ?? 0;
    message.endTimestampMs = object.endTimestampMs ?? 0;
    message.startState = (object.startState !== undefined && object.startState !== null)
      ? WirePortfolioBalanceEstimationState.fromPartial(object.startState)
      : undefined;
    message.actions = object.actions?.map((e) => WirePortfolioBalanceEstimationAction.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
