{"version":3,"file":"Utils.js","sourceRoot":"","sources":["../src/Utils.ts"],"names":[],"mappings":";;;AAAA,8DAA8D;AAC9D,SAAgB,MAAM,CAAC,SAAc;IACnC,IAAI,CAAC,SAAS,EAAE;QACd,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAA;KAC1B;AACH,CAAC;AAJD,wBAIC;AAED,SAAgB,WAAW;IACzB,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAA;AAC3B,CAAC;AAFD,kCAEC;AAED,SAAgB,IAAI,CAAI,CAAuB;IAC7C,MAAM,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,SAAS,CAAC,CAAA;IACrC,OAAO,CAAM,CAAA;AACf,CAAC;AAHD,oBAGC;AAED,SAAgB,MAAM,CAAC,CAAQ;IAC7B,4EAA4E;IAC5E,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,EAAE,CAAC,CAAA;AACpD,CAAC;AAHD,wBAGC;AAED,SAAgB,MAAM,CAAI,CAAgB;IACxC,MAAM,CAAC,CAAC,KAAK,SAAS,CAAC,CAAA;IACvB,OAAO,CAAM,CAAA;AACf,CAAC;AAHD,wBAGC;AAEM,MAAM,iBAAiB,GAAG,CAC/B,EAAU,EACV,EAAU,EACV,EAAU,EACV,EAAU,EACV,EAAE;IACF,MAAM,KAAK,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CAAA;IACnC,OAAO,IAAA,iCAAyB,EAAC,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,CAAA;AACjD,CAAC,CAAA;AARY,QAAA,iBAAiB,qBAQ7B;AAEM,MAAM,yBAAyB,GAAG,CACvC,CAAS,EACT,CAAS,EACT,KAAa,EACb,EAAE;IACF,MAAM,SAAS,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,CAAA;IAC/B,OAAO,IAAA,qCAA6B,EAAC,KAAK,EAAE,SAAS,CAAC,CAAA;AACxD,CAAC,CAAA;AAPY,QAAA,yBAAyB,6BAOrC;AAGM,MAAM,6BAA6B,GAAG,CAC3C,KAAa,EACb,SAAiB,EACjB,EAAE;IACF,MAAM,MAAM,GAAG,CAAC,CAAS,EAAE,EAAE,CAAC,KAAK,GAAG,CAAC,GAAG,SAAS,CAAA;IACnD,MAAM,CAAC,OAAO,GAAG,CAAC,CAAS,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,GAAG,KAAK,CAAA;IACvD,OAAO,MAAM,CAAA;AACf,CAAC,CAAA;AAPY,QAAA,6BAA6B,iCAOzC","sourcesContent":["// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function assert(condition: any): asserts condition {\n  if (!condition) {\n    throw new Error('Assert')\n  }\n}\n\nexport function assertFalse(): never {\n  throw new Error('Assert')\n}\n\nexport function fGet<T>(x: T | null | undefined): T {\n  assert(x !== null && x !== undefined)\n  return x as T\n}\n\nexport function noCase(x: never): never {\n  // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n  throw new Error(`Didn't expect to get here: ${x}`)\n}\n\nexport function nundef<T>(x: T | undefined): T {\n  assert(x !== undefined)\n  return x as T\n}\n\nexport const linearFnFomPoints = (\n  x0: number,\n  y0: number,\n  x1: number,\n  y1: number,\n) => {\n  const slope = (y1 - y0) / (x1 - x0)\n  return linearFnFromPointAndSlope(x0, y0, slope)\n}\n\nexport const linearFnFromPointAndSlope = (\n  x: number,\n  y: number,\n  slope: number,\n) => {\n  const intercept = y - slope * x\n  return linearFnFromSlopeAndIntercept(slope, intercept)\n}\n\nexport type LinearFn = ReturnType<typeof linearFnFromSlopeAndIntercept>\nexport const linearFnFromSlopeAndIntercept = (\n  slope: number,\n  intercept: number,\n) => {\n  const result = (x: number) => slope * x + intercept\n  result.inverse = (y: number) => (y - intercept) / slope\n  return result\n}\n"]}