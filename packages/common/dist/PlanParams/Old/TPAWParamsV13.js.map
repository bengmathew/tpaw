{"version":3,"file":"TPAWParamsV13.js","sourceRoot":"","sources":["../../../src/PlanParams/Old/TPAWParamsV13.ts"],"names":[],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport { Validator } from './Validator'\nimport {TPAWParamsV12} from './TPAWParamsV12'\n\nexport namespace TPAWParamsV13 {\n  export const MAX_LABEL_LENGTH = 150\n  export const MAX_AGE = 120\n  export const MAX_NUM_YEARS_IN_GLIDE_PATH = 1000\n\n  export type Person = {\n    ages:\n      | {type: 'retired'; current: number; max: number}\n      | {type: 'notRetired'; current: number; retirement: number; max: number}\n    displayName: string | null\n  }\n\n  export type People =\n    | {withPartner: false; person1: Person}\n    | {\n        withPartner: true\n        person2: Person\n        person1: Person\n        withdrawalStart: 'person1' | 'person2'\n        xAxis: 'person1' | 'person2'\n      }\n\n  export type Year =\n    | {type: 'now'}\n    | {\n        type: 'namedAge'\n        person: 'person1' | 'person2'\n        age: 'lastWorkingYear' | 'retirement' | 'max'\n      }\n    | {\n        type: 'numericAge'\n        person: 'person1' | 'person2'\n        age: number\n      }\n\n  export type YearRange =\n    | {type: 'startAndEnd'; start: Year; end: Year}\n    | {type: 'startAndNumYears'; start: Year; numYears: number}\n    | {type: 'endAndNumYears'; end: Year; numYears: number}\n\n  export type ValueForYearRange = {\n    label: string | null\n    yearRange: YearRange\n    value: number\n    nominal: boolean\n    id: number\n  }\n\n  export type LabeledAmount = {\n    label: string | null\n    value: number\n    nominal: boolean\n  }\n\n  export type GlidePath = {\n    start: {stocks: number}\n    intermediate: {year: Year; stocks: number}[]\n    end: {stocks: number}\n  }\n\n  export type TPAWRiskLevel =\n    | 'riskLevel-1'\n    | 'riskLevel-2'\n    | 'riskLevel-3'\n    | 'riskLevel-4'\n    | 'custom' // custom is valid only when there is a customTPAWPreset !== null.\n\n  export type TPAWRisk = {\n    tpaw: {\n      allocation: GlidePath\n      allocationForLegacy: {stocks: number}\n    }\n    tpawAndSPAW: {\n      spendingCeiling: number | null\n      spendingFloor: number | null\n      spendingTilt: number\n      lmp: number\n    }\n  }\n\n  export type Params = {\n    v: 13\n    strategy: 'TPAW' | 'SPAW' | 'SWR'\n    dialogMode: boolean\n\n    // Basic Inputs\n    people: People\n    currentPortfolioBalance: number\n    futureSavings: ValueForYearRange[]\n    retirementIncome: ValueForYearRange[]\n\n    // Spending Goals\n    extraSpending: {\n      essential: ValueForYearRange[]\n      discretionary: ValueForYearRange[]\n    }\n    legacy: {\n      tpawAndSPAW: {\n        total: number\n        external: LabeledAmount[]\n      }\n    }\n\n    // Risk\n    // useTPAWPreset should be true only if strategy === 'TPAW'\n    risk: ({useTPAWPreset: true} | ({useTPAWPreset: false} & TPAWRisk)) & {\n      tpawPreset: TPAWRiskLevel\n      customTPAWPreset: TPAWRisk | null\n      spawAndSWR: {\n        allocation: GlidePath\n      }\n      swr: {\n        withdrawal:\n          | {type: 'asPercent'; percent: number}\n          | {type: 'asAmount'; amount: number}\n          | {type: 'default'}\n      }\n    }\n\n    // Advanced.\n    returns: {\n      expected:\n        | {type: 'suggested'}\n        | {type: 'oneOverCAPE'}\n        | {type: 'regressionPrediction'}\n        | {type: 'historical'}\n        | {type: 'manual'; stocks: number; bonds: number}\n      historical:\n        | {\n            type: 'default'\n            adjust:\n              | {type: 'by'; stocks: number; bonds: number}\n              | {type: 'to'; stocks: number; bonds: number}\n              | {type: 'toExpected'}\n              | {type: 'none'}\n          }\n        | {type: 'fixed'; stocks: number; bonds: number}\n    }\n    inflation: {type: 'suggested'} | {type: 'manual'; value: number}\n    sampling: 'monteCarlo' | 'historical'\n\n    // Other.\n    display: {\n      alwaysShowAllYears: boolean\n    }\n  }\n\n  const {\n    number,\n    string,\n    constant,\n    chain,\n    object,\n    union,\n    array,\n    boolean,\n    intersection,\n  } = Validator\n\n  const numRangeInclusive = (min: number, max: number) =>\n    chain(number(), _geTest(min), _leTest(max))\n  const numGE = (min: number) => chain(number(), _geTest(min))\n  const numInt = () => chain(number(), _intTest)\n  const numIntNonNeg = () => chain(numInt(), _geTest(0))\n  const numIntPos = () => chain(numInt(), _geTest(1))\n\n  const strBounded = (maxLength: number) =>\n    chain(string(), _boundedStringTest(maxLength))\n  const strBoundedTrimmed = (maxLength: number) =>\n    chain(strBounded(maxLength), _trimmedTest)\n\n  const sizedArray = <T>(test: Validator<T>, min: number, max: number) =>\n    chain(array(test), x => {\n      if (x.length < min)\n        throw new Validator.Failed(`Less than ${min} elements.`)\n      if (x.length > max)\n        throw new Validator.Failed(`Greater than ${max} elements.`)\n      return x\n    })\n\n  const _intTest = (x: number) => {\n    if (!_.isInteger(x)) throw new Validator.Failed('Not an integer.')\n    return x\n  }\n  const _boundedStringTest = (bound: number) => (x: string) => {\n    if (x.length > bound) throw new Validator.Failed('Too large.')\n    return x\n  }\n  const _trimmedTest = (x: string) => {\n    if (x.trim().length !== x.length) throw new Validator.Failed('Not trimmed.')\n    return x\n  }\n\n  const _geTest = (y: number) => (x: number) => {\n    if (x < y) throw new Validator.Failed(`Less than ${y}.`)\n    return x\n  }\n  const _leTest = (y: number) => (x: number) => {\n    if (x > y) throw new Validator.Failed(`Greater than ${y}.`)\n    return x\n  }\n\n  // ---------- FROM V12 ------------//\n  export const fromV12 = (v12: TPAWParamsV12.Params): Params => {\n    const result: Params = {\n      v: 13,\n      strategy: v12.strategy,\n      dialogMode: false,\n\n      people: v12.people,\n      currentPortfolioBalance: v12.savingsAtStartOfStartYear,\n      futureSavings: v12.savings,\n      retirementIncome: v12.retirementIncome,\n      extraSpending: {\n        essential: v12.withdrawals.essential,\n        discretionary: v12.withdrawals.discretionary,\n      },\n      legacy: {\n        tpawAndSPAW: {\n          total: v12.legacy.total,\n          external: v12.legacy.external,\n        },\n      },\n\n      risk: (() => {\n        const tpawRisk = {\n          tpaw: {\n            allocation: v12.targetAllocation.regularPortfolio.forTPAW,\n            allocationForLegacy: v12.targetAllocation.legacyPortfolio,\n          },\n          tpawAndSPAW: {\n            spendingCeiling: v12.spendingCeiling,\n            spendingFloor: v12.spendingFloor,\n            spendingTilt: v12.scheduledWithdrawalGrowthRate,\n            lmp: v12.withdrawals.lmp,\n          },\n        }\n\n        return {\n          useTPAWPreset: v12.strategy === 'TPAW',\n          tpawPreset: 'custom',\n          customTPAWPreset: _.cloneDeep(tpawRisk),\n          ...tpawRisk,\n          spawAndSWR: {\n            allocation: v12.targetAllocation.regularPortfolio.forSPAWAndSWR,\n          },\n          swr: {\n            withdrawal: v12.swrWithdrawal,\n          },\n        }\n      })(),\n\n      // Advanced.\n      returns: v12.returns,\n      inflation: v12.inflation,\n      sampling: v12.sampling,\n\n      display: {\n        alwaysShowAllYears: v12.display.alwaysShowAllYears,\n      },\n    }\n    validator(result)\n    return result\n  }\n\n  // ----------- VALIDATOR  ---------//\n\n  const _ageRange = chain(number(), _geTest(0), _leTest(MAX_AGE))\n\n  const _ages = chain(\n    union(\n      object({\n        type: constant('retired'),\n        current: _ageRange,\n        max: _ageRange,\n      }),\n      object({\n        type: constant('notRetired'),\n        current: _ageRange,\n        retirement: _ageRange,\n        max: _ageRange,\n      })\n    ),\n    (ages): Person['ages'] => {\n      const {current, max} = ages\n      if (max < current + 1) {\n        throw new Validator.Failed(\n          'Max age should be at least one year after current age.'\n        )\n      }\n      if (ages.type === 'notRetired') {\n        const {retirement} = ages\n        if (retirement < current + 1) {\n          throw new Validator.Failed(\n            'Retirement age should be at least one year after current age.'\n          )\n        }\n        if (max < retirement + 1) {\n          throw new Validator.Failed(\n            'Max age should be at least one year after retirement age.'\n          )\n        }\n      }\n      return ages\n    }\n  )\n\n  const _person: Validator<Person> = object({\n    ages: _ages,\n    displayName: union(strBoundedTrimmed(MAX_LABEL_LENGTH), constant(null)),\n  })\n\n  const _year = union(\n    object({type: constant('now')}),\n    object({\n      type: constant('namedAge'),\n      person: union(constant('person1'), constant('person2')),\n      age: union(\n        constant('lastWorkingYear'),\n        constant('retirement'),\n        constant('max')\n      ),\n    }),\n    object({\n      type: constant('numericAge'),\n      person: union(constant('person1'), constant('person2')),\n      age: numInt(),\n    })\n  )\n\n  const _yearRange = union(\n    object({type: constant('startAndEnd'), start: _year, end: _year}),\n    object({\n      type: constant('startAndNumYears'),\n      start: _year,\n      numYears: numIntPos(),\n    }),\n    object({\n      type: constant('endAndNumYears'),\n      end: _year,\n      numYears: numIntPos(),\n    })\n  )\n\n  const _valueForYearRange = object({\n    // Not trimmed because it won't allow space even temporarily.\n    label: union(strBounded(MAX_LABEL_LENGTH), constant(null)),\n    yearRange: _yearRange,\n    value: numGE(0),\n    nominal: boolean(),\n    id: numIntNonNeg(),\n  })\n\n  const _glidePath: Validator<GlidePath> = object({\n    start: object({stocks: numRangeInclusive(0, 1)}),\n    intermediate: sizedArray(\n      object({year: _year, stocks: numRangeInclusive(0, 1)}),\n      0,\n      MAX_NUM_YEARS_IN_GLIDE_PATH - 2\n    ),\n    end: object({stocks: numRangeInclusive(0, 1)}),\n  })\n\n  const _tpawRisk: Validator<TPAWRisk> = object({\n    tpaw: object({\n      allocation: _glidePath,\n      allocationForLegacy: object({\n        stocks: numRangeInclusive(0, 1),\n      }),\n    }),\n    tpawAndSPAW: object({\n      spendingCeiling: union(constant(null), numGE(0)),\n      spendingFloor: union(constant(null), numGE(0)),\n      spendingTilt: numRangeInclusive(-0.03, 0.03),\n      lmp: numGE(0),\n    }),\n  })\n\n  export const validator: Validator<Params> = chain(\n    object({\n      v: constant(13),\n      strategy: union(constant('TPAW'), constant('SPAW'), constant('SWR')),\n      dialogMode: boolean(),\n      people: union(\n        object({\n          withPartner: constant(false),\n          person1: _person,\n        }),\n        object({\n          withPartner: constant(true),\n          person2: _person,\n          person1: _person,\n          withdrawalStart: union(constant('person1'), constant('person2')),\n          xAxis: union(constant('person1'), constant('person2')),\n        })\n      ),\n      currentPortfolioBalance: numGE(0),\n      futureSavings: array(_valueForYearRange),\n      retirementIncome: array(_valueForYearRange),\n      extraSpending: object({\n        essential: array(_valueForYearRange),\n        discretionary: array(_valueForYearRange),\n      }),\n      legacy: object({\n        tpawAndSPAW: object({\n          total: numGE(0),\n          external: array(\n            object({\n              label: union(string(), constant(null)),\n              value: numGE(0),\n              nominal: boolean(),\n            })\n          ),\n        }),\n      }),\n      risk: intersection(\n        union(\n          object({\n            useTPAWPreset: constant(true),\n          }),\n          intersection(object({useTPAWPreset: constant(false)}), _tpawRisk)\n        ),\n        object({\n          tpawPreset: union(\n            constant('riskLevel-1'),\n            constant('riskLevel-2'),\n            constant('riskLevel-3'),\n            constant('riskLevel-4'),\n            constant('custom')\n          ),\n          customTPAWPreset: union(_tpawRisk, constant(null)),\n          swr: object({\n            withdrawal: union(\n              object({\n                type: constant('asPercent'),\n                percent: numRangeInclusive(0, 1),\n              }),\n              object({type: constant('asAmount'), amount: numIntNonNeg()}),\n              object({type: constant('default')})\n            ),\n          }),\n          spawAndSWR: object({\n            allocation: _glidePath,\n          }),\n        })\n      ),\n\n      returns: object({\n        expected: union(\n          object({type: constant('suggested')}),\n          object({type: constant('oneOverCAPE')}),\n          object({type: constant('regressionPrediction')}),\n          object({type: constant('historical')}),\n          object({\n            type: constant('manual'),\n            stocks: numRangeInclusive(-0.01, 0.1),\n            bonds: numRangeInclusive(-0.01, 0.1),\n          })\n        ),\n        historical: union(\n          object({\n            type: constant('default'),\n            adjust: union(\n              object({type: constant('to'), stocks: number(), bonds: number()}),\n              object({type: constant('by'), stocks: number(), bonds: number()}),\n              object({type: constant('toExpected')}),\n              object({type: constant('none')})\n            ),\n          }),\n          object({type: constant('fixed'), stocks: number(), bonds: number()})\n        ),\n      }),\n\n      inflation: union(\n        object({type: constant('suggested')}),\n        object({type: constant('manual'), value: numRangeInclusive(-0.01, 0.1)})\n      ),\n      sampling: union(constant('monteCarlo'), constant('historical')),\n      display: object({alwaysShowAllYears: boolean()}),\n    }),\n    x => {\n      if (\n        !x.risk.useTPAWPreset &&\n        x.risk.tpawAndSPAW.spendingCeiling !== null &&\n        (x.risk.tpawAndSPAW.spendingFloor ?? 0) >\n          x.risk.tpawAndSPAW.spendingCeiling\n      ) {\n        throw new Validator.Failed(\n          'Spending Floor is greater than spending ceiling.'\n        )\n      }\n\n      const checkYear = (year: Year, prefix: string) => {\n        if (year.type === 'namedAge' || year.type === 'numericAge') {\n          let person: Person\n          if (year.person === 'person1') {\n            person = x.people.person1\n          } else {\n            if (!x.people.withPartner) {\n              throw new Validator.Failed(\n                `${prefix} is in terms of the age of an unspecified person.`\n              )\n            }\n            person = x.people.person2\n          }\n          if (\n            (year.age === 'retirement' || year.age === 'lastWorkingYear') &&\n            person.ages.type === 'retired'\n          ) {\n            throw new Validator.Failed(\n              `${prefix} is in terms retirement age of ${year.person}, but ${year.person} is already retired.`\n            )\n          }\n        }\n      }\n\n      const checkYearRange =\n        (desc: string) =>\n        ({yearRange, label}: ValueForYearRange, i: number) => {\n          if (\n            yearRange.type === 'startAndEnd' ||\n            yearRange.type === 'startAndNumYears'\n          ) {\n            checkYear(\n              yearRange.start,\n              `Starting year of ${desc} entry ${label ?? `at index ${i}`}`\n            )\n          }\n          if (\n            yearRange.type === 'startAndEnd' ||\n            yearRange.type === 'endAndNumYears'\n          ) {\n            checkYear(\n              yearRange.end,\n              `Ending year of ${desc} ${label ?? `at index ${i}`}`\n            )\n          }\n        }\n      x.futureSavings.forEach(checkYearRange('savings'))\n      x.retirementIncome.forEach(checkYearRange('retirement income'))\n      x.extraSpending.essential.forEach(\n        checkYearRange('withdrawals funded by bonds')\n      )\n      x.extraSpending.discretionary.forEach(\n        checkYearRange('withdrawals funded by risk portfolio')\n      )\n\n      const checkGlidePathYears = (glidePath: GlidePath['intermediate']) => {\n        glidePath.forEach((x, i) =>\n          checkYear(x.year, `Year at entry ${i} in the static glide path`)\n        )\n      }\n      if (!x.risk.useTPAWPreset)\n        checkGlidePathYears(x.risk.tpaw.allocation.intermediate)\n      checkGlidePathYears(x.risk.spawAndSWR.allocation.intermediate)\n      return x\n    }\n  )\n}\n"]}