{"version":3,"file":"TPAWParamsV4.js","sourceRoot":"","sources":["../../../src/PlanParams/Old/TPAWParamsV4.ts"],"names":[],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport { Validator } from './Validator'\n\nexport namespace TPAWParamsV4 {\n  export type YearRangeFixedEdge =\n    | 'start'\n    | 'lastWorkingYear'\n    | 'retirement'\n    | 'end'\n\n  export type YearRangeEdge = number | YearRangeFixedEdge\n\n  export type YearRange = {start: YearRangeEdge; end: YearRangeEdge}\n  export type ValueForYearRange = {\n    label: string | null\n    yearRange: YearRange\n    value: number\n    nominal: boolean\n    id: number\n  }\n\n  export type Params = {\n    v: 4\n    age: {\n      start: number\n      retirement: number\n      end: number\n    }\n    returns: {\n      expected: {\n        stocks: number\n        bonds: number\n      }\n      historical: {\n        adjust:\n          | {type: 'by'; stocks: number; bonds: number}\n          | {type: 'to'; stocks: number; bonds: number}\n      }\n    }\n    inflation: number\n    targetAllocation: {\n      regularPortfolio: {stocks: number}\n      legacyPortfolio: {stocks: number}\n    }\n    spendingCeiling: number | null\n    spendingFloor: number | null\n    scheduledWithdrawalGrowthRate: number\n    savingsAtStartOfStartYear: number\n    savings: ValueForYearRange[]\n    retirementIncome: ValueForYearRange[]\n    withdrawals: {\n      fundedByBonds: ValueForYearRange[]\n      fundedByRiskPortfolio: ValueForYearRange[]\n    }\n    legacy: {\n      total: number\n      external: {label: string | null; value: number; nominal: boolean}[]\n    }\n  }\n  export type ParamsWithoutHistorical = Omit<Params, 'returns'> & {\n    returns: Omit<Params['returns'], 'historical'>\n  }\n\n  const {number, string, constant, chain, object, union, array, boolean} =\n    Validator\n\n  const numRangeInclusive = (min: number, max: number) =>\n    chain(number(), _geTest(min), _leTest(max))\n\n  const numGE = (min: number) => chain(number(), _geTest(min))\n\n  const numNonNegInteger = () => chain(number(), _intTest, _geTest(0))\n\n  const _intTest = (x: number) => {\n    if (!_.isInteger(x)) throw new Validator.Failed('Not an integer.')\n    return x\n  }\n\n  const _geTest = (y: number) => (x: number) => {\n    if (x < y) throw new Validator.Failed(`Less than ${y}.`)\n    return x\n  }\n  const _leTest = (y: number) => (x: number) => {\n    if (x > y) throw new Validator.Failed(`Greater than ${y}.`)\n    return x\n  }\n\n  // ----------- VALIDATOR ---------//\n\n  export const MAX_AGE_V4 = 120\n  const _ageRange = chain(number(), _geTest(0), _leTest(MAX_AGE_V4))\n\n  const _ageValidator = chain(\n    object({\n      start: _ageRange,\n      retirement: _ageRange,\n      end: _ageRange,\n    }),\n    (age): Params['age'] => {\n      const {start, retirement, end} = age\n      if (retirement < start) {\n        throw new Validator.Failed(\n          'Retirement age is earlier than current age.'\n        )\n      }\n      if (end < start + 1) {\n        throw new Validator.Failed(\n          'Max age should be at least one year after current age.'\n        )\n      }\n      if (retirement >= end) {\n        throw new Validator.Failed(\n          'Max age should be at least one year after retirement age.'\n        )\n      }\n      return age\n    }\n  )\n  const _yearRangeEdge = union(\n    number(),\n    constant('start'),\n    constant('lastWorkingYear'),\n    constant('retirement'),\n    constant('end')\n  )\n  const _valueForYearRangeValidator = object({\n    label: union(string(), constant(null)),\n    yearRange: object({start: _yearRangeEdge, end: _yearRangeEdge}),\n    value: numGE(0),\n    nominal: boolean(),\n    id: numNonNegInteger(),\n  })\n\n  export const validator: Validator<ParamsWithoutHistorical> =\n    chain(\n      object({\n        v: constant(4),\n        age: _ageValidator,\n        returns: object({\n          expected: object({\n            stocks: numRangeInclusive(-0.01, 0.1),\n            bonds: numRangeInclusive(-0.01, 0.1),\n          }),\n        }),\n\n        inflation: numRangeInclusive(-0.01, 0.1),\n        targetAllocation: object({\n          regularPortfolio: object({\n            stocks: numRangeInclusive(0, 1),\n          }),\n          legacyPortfolio: object({\n            stocks: numRangeInclusive(0, 1),\n          }),\n        }),\n        scheduledWithdrawalGrowthRate: numRangeInclusive(-0.03, 0.03),\n        savingsAtStartOfStartYear: numGE(0),\n        savings: array(_valueForYearRangeValidator),\n        retirementIncome: array(_valueForYearRangeValidator),\n        spendingCeiling: union(constant(null), numGE(0)),\n        spendingFloor: union(constant(null), numGE(0)),\n        withdrawals: object({\n          fundedByBonds: array(_valueForYearRangeValidator),\n          fundedByRiskPortfolio: array(_valueForYearRangeValidator),\n        }),\n        legacy: object({\n          total: numGE(0),\n          external: array(\n            object({\n              label: union(string(), constant(null)),\n              value: numGE(0),\n              nominal: boolean(),\n            })\n          ),\n        }),\n      }),\n      x => {\n        if (\n          x.spendingCeiling !== null &&\n          (x.spendingFloor ?? 0) > x.spendingCeiling\n        ) {\n          throw new Validator.Failed(\n            'Spending Floor is greater than spending ceiling'\n          )\n        }\n        return x\n      }\n    )\n}\n"]}