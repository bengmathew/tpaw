{"version":3,"file":"TPAWParamsV6.js","sourceRoot":"","sources":["../../../src/PlanParams/Old/TPAWParamsV6.ts"],"names":[],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport { Validator } from './Validator'\nimport {TPAWParamsV5} from './TPAWParamsV5'\n\nexport namespace TPAWParamsV6 {\n  export const MAX_LABEL_LENGTH = 150\n  export const MAX_AGE = 120\n  export const MAX_NUM_YEARS_IN_GLIDE_PATH = 1000\n\n  export type Person = {\n    ages:\n      | {type: 'retired'; current: number; max: number}\n      | {type: 'notRetired'; current: number; retirement: number; max: number}\n    displayName: string | null\n  }\n\n  export type People =\n    | {withPartner: false; person1: Person}\n    | {\n        withPartner: true\n        person2: Person\n        person1: Person\n        withdrawalStart: 'person1' | 'person2'\n        xAxis: 'person1' | 'person2'\n      }\n\n  export type Year =\n    | {type: 'now'}\n    | {\n        type: 'namedAge'\n        person: 'person1' | 'person2'\n        age: 'lastWorkingYear' | 'retirement' | 'max'\n      }\n    | {\n        type: 'numericAge'\n        person: 'person1' | 'person2'\n        age: number\n      }\n\n  export type YearRange =\n    | {type: 'startAndEnd'; start: Year; end: Year}\n    | {type: 'startAndNumYears'; start: Year; numYears: number}\n    | {type: 'endAndNumYears'; end: Year; numYears: number}\n  export type ValueForYearRange = {\n    label: string | null\n    yearRange: YearRange\n    value: number\n    nominal: boolean\n    id: number\n  }\n\n  export type LabeledAmount = {\n    label: string | null\n    value: number\n    nominal: boolean\n  }\n\n  export type GlidePath = {\n    start: {stocks: number}\n    intermediate: {year: Year; stocks: number}[]\n    end: {stocks: number}\n  }\n\n  export type Params = {\n    v: 6\n    strategy: 'TPAW' | 'SPAW'\n    people: People\n    returns: {\n      expected: {\n        stocks: number\n        bonds: number\n      }\n      historical: {\n        adjust:\n          | {type: 'by'; stocks: number; bonds: number}\n          | {type: 'to'; stocks: number; bonds: number}\n      }\n    }\n    inflation: number\n    targetAllocation: {\n      regularPortfolio: {\n        forTPAW: {stocks: number}\n        forSPAW: GlidePath\n      }\n      legacyPortfolio: {stocks: number}\n    }\n    spendingCeiling: number | null\n    spendingFloor: number | null\n    scheduledWithdrawalGrowthRate: number\n    savingsAtStartOfStartYear: number\n    savings: ValueForYearRange[]\n    retirementIncome: ValueForYearRange[]\n    withdrawals: {\n      lmp: number\n      essential: ValueForYearRange[]\n      discretionary: ValueForYearRange[]\n    }\n    legacy: {\n      total: number\n      external: LabeledAmount[]\n    }\n  }\n  export type ParamsWithoutHistorical = Omit<Params, 'returns'> & {\n    returns: Omit<Params['returns'], 'historical'>\n  }\n\n  const {number, string, constant, chain, object, union, array, boolean} =\n    Validator\n\n  const numRangeInclusive = (min: number, max: number) =>\n    chain(number(), _geTest(min), _leTest(max))\n  const numGE = (min: number) => chain(number(), _geTest(min))\n  const numInt = () => chain(number(), _intTest)\n  const numIntNonNeg = () => chain(numInt(), _geTest(0))\n  const numIntPos = () => chain(numInt(), _geTest(1))\n\n  const strBounded = (maxLength: number) =>\n    chain(string(), _boundedStringTest(maxLength))\n  const strBoundedTrimmed = (maxLength: number) =>\n    chain(strBounded(maxLength), _trimmedTest)\n\n  const sizedArray = <T>(test: Validator<T>, min: number, max: number) =>\n    chain(array(test), x => {\n      if (x.length < min)\n        throw new Validator.Failed(`Less than ${min} elements.`)\n      if (x.length > max)\n        throw new Validator.Failed(`Greater than ${max} elements.`)\n      return x\n    })\n\n  const _intTest = (x: number) => {\n    if (!_.isInteger(x)) throw new Validator.Failed('Not an integer.')\n    return x\n  }\n  const _boundedStringTest = (bound: number) => (x: string) => {\n    if (x.length > bound) throw new Validator.Failed('Too large.')\n    return x\n  }\n  const _trimmedTest = (x: string) => {\n    if (x.trim().length !== x.length) throw new Validator.Failed('Not trimmed.')\n    return x\n  }\n\n  const _geTest = (y: number) => (x: number) => {\n    if (x < y) throw new Validator.Failed(`Less than ${y}.`)\n    return x\n  }\n  const _leTest = (y: number) => (x: number) => {\n    if (x > y) throw new Validator.Failed(`Greater than ${y}.`)\n    return x\n  }\n\n  // ---------- FROM V5 ------------//\n  export const fromV5 = (\n    params: TPAWParamsV5.ParamsWithoutHistorical\n  ): ParamsWithoutHistorical => {\n    const result: ParamsWithoutHistorical = {\n      ...params,\n      strategy: 'TPAW',\n      targetAllocation: {\n        ...params.targetAllocation,\n        regularPortfolio: {\n          forSPAW: {\n            start: {stocks: 0.5},\n            intermediate: [],\n            end: {stocks: 0.5},\n          },\n          forTPAW: {\n            stocks: params.targetAllocation.regularPortfolio.stocks,\n          },\n        },\n      },\n      withdrawals: {\n        lmp: 0,\n        essential: params.withdrawals.fundedByBonds,\n        discretionary: params.withdrawals.fundedByRiskPortfolio,\n      },\n      v: 6,\n    }\n    validator(result)\n    return result\n  }\n\n  // ----------- VALIDATOR  ---------//\n\n  const _ageRange = chain(number(), _geTest(0), _leTest(TPAWParamsV6.MAX_AGE))\n\n  const _ages = chain(\n    union(\n      object({\n        type: constant('retired'),\n        current: _ageRange,\n        max: _ageRange,\n      }),\n      object({\n        type: constant('notRetired'),\n        current: _ageRange,\n        retirement: _ageRange,\n        max: _ageRange,\n      })\n    ),\n    (ages): TPAWParamsV6.Person['ages'] => {\n      const {current, max} = ages\n      if (max < current + 1) {\n        throw new Validator.Failed(\n          'Max age should be at least one year after current age.'\n        )\n      }\n      if (ages.type === 'notRetired') {\n        const {retirement} = ages\n        if (retirement < current + 1) {\n          throw new Validator.Failed(\n            'Retirement age should be at least one year after current age.'\n          )\n        }\n        if (max < retirement + 1) {\n          throw new Validator.Failed(\n            'Max age should be at least one year after retirement age.'\n          )\n        }\n      }\n      return ages\n    }\n  )\n\n  const _person: Validator<TPAWParamsV6.Person> = object({\n    ages: _ages,\n    displayName: union(\n      strBoundedTrimmed(TPAWParamsV6.MAX_LABEL_LENGTH),\n      constant(null)\n    ),\n  })\n\n  const _year = union(\n    object({type: constant('now')}),\n    object({\n      type: constant('namedAge'),\n      person: union(constant('person1'), constant('person2')),\n      age: union(\n        constant('lastWorkingYear'),\n        constant('retirement'),\n        constant('max')\n      ),\n    }),\n    object({\n      type: constant('numericAge'),\n      person: union(constant('person1'), constant('person2')),\n      age: numInt(),\n    })\n  )\n\n  const _yearRange = union(\n    object({type: constant('startAndEnd'), start: _year, end: _year}),\n    object({\n      type: constant('startAndNumYears'),\n      start: _year,\n      numYears: numIntPos(),\n    }),\n    object({\n      type: constant('endAndNumYears'),\n      end: _year,\n      numYears: numIntPos(),\n    })\n  )\n\n  const _valueForYearRange = object({\n    // Not trimmed because it won't allow space even temporarily.\n    label: union(strBounded(TPAWParamsV6.MAX_LABEL_LENGTH), constant(null)),\n    yearRange: _yearRange,\n    value: numGE(0),\n    nominal: boolean(),\n    id: numIntNonNeg(),\n  })\n\n  const _glidePath: Validator<GlidePath> = object({\n    start: object({stocks: numRangeInclusive(0, 1)}),\n    intermediate: sizedArray(\n      object({year: _year, stocks: numRangeInclusive(0, 1)}),\n      0,\n      MAX_NUM_YEARS_IN_GLIDE_PATH - 2\n    ),\n    end: object({stocks: numRangeInclusive(0, 1)}),\n  })\n\n  export const validator: Validator<TPAWParamsV6.ParamsWithoutHistorical> =\n    chain(\n      object({\n        v: constant(6),\n        strategy: union(constant('TPAW'), constant('SPAW')),\n        people: union(\n          object({\n            withPartner: constant(false),\n            person1: _person,\n          }),\n          object({\n            withPartner: constant(true),\n            person2: _person,\n            person1: _person,\n            withdrawalStart: union(constant('person1'), constant('person2')),\n            xAxis: union(constant('person1'), constant('person2')),\n          })\n        ),\n        returns: object({\n          expected: object({\n            stocks: numRangeInclusive(-0.01, 0.1),\n            bonds: numRangeInclusive(-0.01, 0.1),\n          }),\n        }),\n\n        inflation: numRangeInclusive(-0.01, 0.1),\n        targetAllocation: object({\n          regularPortfolio: object({\n            forTPAW: object({\n              stocks: numRangeInclusive(0, 1),\n            }),\n            forSPAW: _glidePath,\n          }),\n          legacyPortfolio: object({\n            stocks: numRangeInclusive(0, 1),\n          }),\n        }),\n        scheduledWithdrawalGrowthRate: numRangeInclusive(-0.03, 0.03),\n        savingsAtStartOfStartYear: numGE(0),\n        savings: array(_valueForYearRange),\n        retirementIncome: array(_valueForYearRange),\n        spendingCeiling: union(constant(null), numGE(0)),\n        spendingFloor: union(constant(null), numGE(0)),\n        withdrawals: object({\n          lmp: numGE(0),\n          essential: array(_valueForYearRange),\n          discretionary: array(_valueForYearRange),\n        }),\n        legacy: object({\n          total: numGE(0),\n          external: array(\n            object({\n              label: union(string(), constant(null)),\n              value: numGE(0),\n              nominal: boolean(),\n            })\n          ),\n        }),\n      }),\n      x => {\n        if (\n          x.spendingCeiling !== null &&\n          (x.spendingFloor ?? 0) > x.spendingCeiling\n        ) {\n          throw new Validator.Failed(\n            'Spending Floor is greater than spending ceiling.'\n          )\n        }\n\n        const checkYear = (year: TPAWParamsV6.Year, prefix: string) => {\n          if (year.type === 'namedAge' || year.type === 'numericAge') {\n            let person: Person\n            if (year.person === 'person1') {\n              person = x.people.person1\n            } else {\n              if (!x.people.withPartner) {\n                throw new Validator.Failed(\n                  `${prefix} is in terms of the age of an unspecified person.`\n                )\n              }\n              person = x.people.person2\n            }\n            if (\n              (year.age === 'retirement' || year.age === 'lastWorkingYear') &&\n              person.ages.type === 'retired'\n            ) {\n              throw new Validator.Failed(\n                `${prefix} is in terms retirement age of ${year.person}, but ${year.person} is already retired.`\n              )\n            }\n          }\n        }\n\n        const checkYearRange =\n          (desc: string) =>\n          ({yearRange, label}: TPAWParamsV6.ValueForYearRange, i: number) => {\n            if (\n              yearRange.type === 'startAndEnd' ||\n              yearRange.type === 'startAndNumYears'\n            ) {\n              checkYear(\n                yearRange.start,\n                `Starting year of ${desc} entry ${label ?? `at index ${i}`}`\n              )\n            }\n            if (\n              yearRange.type === 'startAndEnd' ||\n              yearRange.type === 'endAndNumYears'\n            ) {\n              checkYear(\n                yearRange.end,\n                `Ending year of ${desc} ${label ?? `at index ${i}`}`\n              )\n            }\n          }\n        x.savings.forEach(checkYearRange('savings'))\n        x.retirementIncome.forEach(checkYearRange('retirement income'))\n        x.withdrawals.essential.forEach(\n          checkYearRange('withdrawals funded by bonds')\n        )\n        x.withdrawals.discretionary.forEach(\n          checkYearRange('withdrawals funded by risk portfolio')\n        )\n\n        const checkGlidePathYears = (glidePath: GlidePath['intermediate']) => {\n          glidePath.forEach((x, i) =>\n            checkYear(x.year, `Year at entry ${i} in the static glide path`)\n          )\n        }\n        checkGlidePathYears(\n          x.targetAllocation.regularPortfolio.forSPAW.intermediate\n        )\n        return x\n      }\n    )\n}\n"]}