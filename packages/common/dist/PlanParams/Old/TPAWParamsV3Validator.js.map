{"version":3,"file":"TPAWParamsV3Validator.js","sourceRoot":"","sources":["../../../src/PlanParams/Old/TPAWParamsV3Validator.ts"],"names":[],"mappings":"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","sourcesContent":["import { Validator } from './Validator'\nimport { TPAWParamsV3, TPAWParamsV3WithoutHistorical } from './TPAWParamsV3'\n\n// ----------- UTILS ---------//\n\nconst {number, string, constant, chain, object, union, array, boolean} =\n  Validator\n\nconst numRangeInclusive = (min: number, max: number) =>\n  chain(number(), _geTest(min), _leTest(max))\n\nconst numGE = (min: number) => chain(number(), _geTest(min))\n\nconst _geTest = (y: number) => (x: number) => {\n  if (x < y) throw new Validator.Failed(`Less than ${y}.`)\n  return x\n}\nconst _leTest = (y: number) => (x: number) => {\n  if (x > y) throw new Validator.Failed(`Greater than ${y}.`)\n  return x\n}\n\n// ----------- MAIN ---------//\n\nexport const MAX_AGE_V3 = 120\nconst _ageRange = chain(number(), _geTest(0), _leTest(MAX_AGE_V3))\n\nconst _ageValidator = chain(\n  object({\n    start: _ageRange,\n    retirement: _ageRange,\n    end: _ageRange,\n  }),\n  (age): TPAWParamsV3['age'] => {\n    const {start, retirement, end} = age\n    if (retirement < start) {\n      throw new Validator.Failed('Retirement age is earlier than current age.')\n    }\n    if (end < start + 1) {\n      throw new Validator.Failed(\n        'Max age should be at least one year after current age.'\n      )\n    }\n    if (retirement >= end) {\n      throw new Validator.Failed(\n        'Max age should be at least one year after retirement age.'\n      )\n    }\n    return age\n  }\n)\nconst _yearRangeEdge = union(\n  number(),\n  constant('start'),\n  constant('lastWorkingYear'),\n  constant('retirement'),\n  constant('end')\n)\nconst _valueForYearRangeValidator = object({\n  label: union(string(), constant(null)),\n  yearRange: object({start: _yearRangeEdge, end: _yearRangeEdge}),\n  value: numGE(0),\n  nominal: boolean(),\n})\n\nexport const tpawParamsV3Validator: Validator<TPAWParamsV3WithoutHistorical> =\n  chain(\n    object({\n      v: constant(3),\n      age: _ageValidator,\n      returns: object({\n        expected: object({\n          stocks: numRangeInclusive(-0.01, 0.1),\n          bonds: numRangeInclusive(-0.01, 0.1),\n        }),\n      }),\n\n      inflation: numRangeInclusive(-0.01, 0.1),\n      targetAllocation: object({\n        regularPortfolio: object({\n          stocks: numRangeInclusive(0, 1),\n        }),\n        legacyPortfolio: object({\n          stocks: numRangeInclusive(0, 1),\n        }),\n      }),\n      scheduledWithdrawalGrowthRate: numRangeInclusive(-0.03, 0.03),\n      savingsAtStartOfStartYear: numGE(0),\n      savings: array(_valueForYearRangeValidator),\n      retirementIncome: array(_valueForYearRangeValidator),\n      spendingCeiling: union(constant(null), numGE(0)),\n      spendingFloor: union(constant(null), numGE(0)),\n      withdrawals: object({\n        fundedByBonds: array(_valueForYearRangeValidator),\n        fundedByRiskPortfolio: array(_valueForYearRangeValidator),\n      }),\n      legacy: object({\n        total: numGE(0),\n        external: array(\n          object({\n            label: union(string(), constant(null)),\n            value: numGE(0),\n            nominal: boolean(),\n          })\n        ),\n      }),\n    }),\n    x => {\n      if (\n        x.spendingCeiling !== null &&\n        (x.spendingFloor ?? 0) > x.spendingCeiling\n      ) {\n        throw new Validator.Failed(\n          'Spending Floor is greater than spending ceiling'\n        )\n      }\n      return x\n    }\n  )\n"]}