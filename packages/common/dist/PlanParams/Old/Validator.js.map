{"version":3,"file":"Validator.js","sourceRoot":"","sources":["../../../src/PlanParams/Old/Validator.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-return */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport _ from 'lodash'\n\n// ---------------------------------------------------------//\n// --------------- DEPRECATED in favor of json-guard --------//\n// ---------------------------------------------------------//\n// This is still here only for support for old params.\n\ntype MapType<Type> = {\n  [Property in keyof Type]: Type[Property] extends (x: unknown) => infer U\n    ? U\n    : never\n}\n\nexport type Validator<T, F = unknown> = (x: F) => T\nexport namespace Validator {\n  export class Failed extends Error {\n    path\n    lines\n    constructor(lines: string | string[], path?: string) {\n      super('')\n      this.lines = _.flatten([lines])\n      this.path = path\n    }\n    get fullLines() {\n      return this.path\n        ? [`Property ${this.path}:`, ...this.lines.map(x => `   ${x}`)]\n        : this.lines\n    }\n    get fullMessage() {\n      return this.fullLines.join('\\n')\n    }\n  }\n\n  export const number =\n    () =>\n    (x: unknown): number => {\n      if (typeof x !== 'number') throw new Failed('Not a number.')\n      return x\n    }\n  export const boolean =\n    () =>\n    (x: unknown): boolean => {\n      if (typeof x !== 'boolean') throw new Failed('Not a boolean.')\n      return x\n    }\n  export const string =\n    () =>\n    (x: unknown): string => {\n      if (typeof x !== 'string') throw new Failed('Not a string.')\n      return x\n    }\n  export const constant =\n    <C extends number | string | null | boolean>(c: C) =>\n    (x: unknown): C => {\n      if (x !== c) {\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        const message = `Not ${c === null ? 'null' : `\"${c}\"`}.`\n        throw new Failed(message)\n      }\n      return c\n    }\n\n  export const array =\n    <T>(test: Validator<T>) =>\n    (x: unknown): T[] => {\n      if (!_.isArray(x)) throw new Failed('Not an array.')\n      const result = [] as T[]\n      return x.map((e, i) => {\n        try {\n          return test(e)\n        } catch (e) {\n          if (e instanceof Failed) {\n            throw new Failed([\n              `At index ${i}:`,\n              ...e.fullLines.map(x => `    ${x}`),\n            ])\n          } else {\n            throw e\n          }\n        }\n      })\n    }\n\n  export const object =\n    <O extends Record<string, Validator<any>>>(tests: O) =>\n    (x: unknown): MapType<O> => {\n      if (!_.isObject(x) || _.isArray(x) || _.isFunction(x))\n        throw new Failed('Not an object.')\n      const anyX = x as any\n      const missingKeys = _.difference(_.keys(tests), _.keys(x))\n      if (missingKeys.length > 0) {\n        throw new Failed(\n          `Missing ${\n            missingKeys.length === 1 ? 'property' : 'properties'\n          } ${missingKeys.join(', ')}.`\n        )\n      }\n      const result = _.mapValues(tests, (test, key) => {\n        try {\n          return test(anyX[key])\n        } catch (e) {\n          if (e instanceof Failed) {\n            throw new Failed(e.lines, `${key}${e.path ? `.${e.path}` : ''}`)\n          } else {\n            throw e\n          }\n        }\n      })\n\n      return result\n    }\n\n  export const union =\n    <T extends Validator<any>[]>(...tests: T): Validator<MapType<T>[number]> =>\n    (x: unknown) => {\n      const messages = [] as string[]\n      let i = 0\n      for (const test of tests) {\n        try {\n          return test(x)\n        } catch (e) {\n          if (e instanceof Failed) {\n            messages.push(\n              `Option ${i + 1}:`,\n              ...e.fullLines.map(x => `    ${x}`)\n            )\n          } else {\n            throw e\n          }\n        }\n        i++\n      }\n      throw new Failed(messages)\n    }\n\n  export function intersection<T1, T2>(\n    ...tests: [Validator<T1>, Validator<T2>]\n  ): Validator<T1 & T2>\n  export function intersection<T1, T2, T3>(\n    ...tests: [Validator<T1>, Validator<T2>, Validator<T3>]\n  ): Validator<T1 & T2 & T3>\n  export function intersection(...tests: any[]) {\n    return (x: any) => {\n      let result: any = {}\n      for (const test of tests) {\n        result = {...result, ...test(x)}\n      }\n      return result\n    }\n  }\n\n  export function chain<T0, T1, T2>(\n    ...tests: [Validator<T1, T0>, Validator<T2, T1>]\n  ): Validator<T2, T0>\n  export function chain<T0, T1, T2, T3>(\n    ...tests: [Validator<T1, T0>, Validator<T2, T1>, Validator<T3, T2>]\n  ): Validator<T3, T0>\n  export function chain<T0, T1, T2, T3>(\n    ...tests: [Validator<T1, T0>, Validator<T2, T1>, Validator<T3, T2>]\n  ): Validator<T3, T0>\n  export function chain<T0, T1, T2, T3, T4>(\n    ...tests: [\n      Validator<T1, T0>,\n      Validator<T2, T1>,\n      Validator<T3, T2>,\n      Validator<T4, T3>\n    ]\n  ): Validator<T4, T0>\n  export function chain(...tests: any[]) {\n    return (x: any) => {\n      let result: any = x\n      for (const test of tests) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        result = test(result)\n      }\n      return result\n    }\n  }\n}\n"]}