{"version":3,"file":"DefaultPlanParams.js","sourceRoot":"","sources":["../../src/PlanParams/DefaultPlanParams.ts"],"names":[],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport { historicalReturnsAverage } from '../HistoricalReturns'\nimport { linearFnFomPoints, noCase } from '../Utils'\nimport { PlanParams, TPAWRisk, TPAWRiskLevel } from './PlanParams'\n\ntype MarketData = {\n  CAPE: {\n    suggested: number\n    oneOverCAPE: number\n    regressionAverage: number\n  }\n  bondRates: { twentyYear: number }\n  inflation: { value: number }\n}\n1\nexport const EXPECTED_RETURN_PRESETS = (\n  type: Exclude<PlanParams['returns']['expected']['type'], 'manual'>,\n  { CAPE, bondRates }: MarketData,\n) => {\n  const suggested = {\n    stocks: _.round(CAPE.suggested, 3),\n    bonds: _.round(bondRates.twentyYear, 3),\n  }\n  switch (type) {\n    case 'suggested':\n      return { ...suggested }\n    case 'oneOverCAPE':\n      return {\n        stocks: _.round(CAPE.oneOverCAPE, 3),\n        bonds: suggested.bonds,\n      }\n    case 'regressionPrediction':\n      return {\n        stocks: _.round(CAPE.regressionAverage, 3),\n        bonds: suggested.bonds,\n      }\n    case 'historical':\n      return { ...historicalReturnsAverage }\n    default:\n      noCase(type)\n  }\n}\n\nexport const SUGGESTED_INFLATION = (marketData: MarketData) =>\n  _.round(marketData.inflation.value, 3)\n\nexport const TPAW_RISK_PRESETS = (\n  preset: Exclude<TPAWRiskLevel, 'custom'>,\n  numYears: number,\n): TPAWRisk => {\n  const allocFn = (at20of100: number, spendingTilt: number): TPAWRisk => {\n    const at100of100 = _.round(at20of100 - 0.1, 2)\n    return {\n      tpaw: {\n        allocation: {\n          start: {\n            stocks: _.round(\n              linearFnFomPoints(0, at100of100, 100 - 20, at20of100)(numYears),\n              2,\n            ),\n          },\n          intermediate: [],\n          end: { stocks: at100of100 },\n        },\n        allocationForLegacy: { stocks: _.round(at20of100 + 0.2, 2) },\n      },\n      tpawAndSPAW: {\n        spendingCeiling: null,\n        spendingFloor: null,\n        spendingTilt,\n        lmp: 0,\n      },\n    }\n  }\n  switch (preset) {\n    case 'riskLevel-1':\n      return allocFn(0.3, 0.005)\n    case 'riskLevel-2':\n      return allocFn(0.4, 0.008)\n    case 'riskLevel-3':\n      return allocFn(0.5, 0.011)\n    case 'riskLevel-4':\n      return allocFn(0.6, 0.014)\n    default:\n      noCase(preset)\n  }\n}\n\nexport const resolveTPAWRiskPreset = (\n  risk: PlanParams['risk'],\n  numYears: number,\n): Exclude<PlanParams['risk'], { useTPAWPreset: true }> => {\n  if (!risk.useTPAWPreset) return risk\n  const { swr, spawAndSWR, tpawPreset, customTPAWPreset, savedTPAWPreset } =\n    risk\n  const { tpaw, tpawAndSPAW } = TPAW_RISK_PRESETS(risk.tpawPreset, numYears)\n  return {\n    useTPAWPreset: false,\n    tpaw,\n    tpawAndSPAW,\n    swr,\n    spawAndSWR,\n    tpawPreset,\n    customTPAWPreset,\n    savedTPAWPreset,\n  }\n}\n\nexport const DEFAULT_SWR_WITHDRAWAL_PERCENT = (retirementLength: number) => {\n  return _.round(0.7125 * Math.pow(retirementLength, -0.859), 3)\n}\n\nexport function getDefaultPlanParams() {\n  const params: PlanParams = {\n    v: 14,\n    strategy: 'TPAW',\n    dialogMode: true,\n    people: {\n      withPartner: false,\n      person1: {\n        displayName: null,\n        ages: { type: 'notRetired', current: 35, retirement: 65, max: 100 },\n      },\n    },\n    currentPortfolioBalance: 0,\n    futureSavings: [],\n    retirementIncome: [],\n    extraSpending: {\n      essential: [],\n      discretionary: [],\n    },\n    legacy: {\n      tpawAndSPAW: {\n        total: 0,\n        external: [],\n      },\n    },\n    risk: {\n      useTPAWPreset: true,\n      tpawPreset: 'riskLevel-2',\n      customTPAWPreset: null,\n      savedTPAWPreset: null,\n      spawAndSWR: {\n        allocation: {\n          start: { stocks: 0.5 },\n          intermediate: [],\n          end: { stocks: 0.5 },\n        },\n      },\n      swr: {\n        withdrawal: { type: 'default' },\n      },\n    },\n\n    returns: {\n      expected: { type: 'suggested' },\n      historical: { type: 'default', adjust: { type: 'toExpected' } },\n    },\n    inflation: { type: 'suggested' },\n    sampling: 'monteCarlo',\n    display: {\n      alwaysShowAllYears: false,\n    },\n  }\n\n  return params\n}\n"]}