{"version":3,"file":"API.js","sourceRoot":"","sources":["../src/API.ts"],"names":[],"mappings":";;;AAAA,2CASmB;AACnB,wDAAyD;AAEzD,IAAiB,GAAG,CAyCnB;AAzCD,WAAiB,GAAG;IAClB,MAAM,OAAO,GAA8B,CAAC,CAAC,EAAE,EAAE,CAC/C,CAAC,CAAC,IAAI,EAAE,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM;QAC1B,CAAC,CAAC,IAAA,oBAAO,EAAC,CAAC,CAAC;QACZ,CAAC,CAAC,IAAA,oBAAO,EAAC,wBAAwB,CAAC,CAAA;IAEvC,MAAM,QAAQ,GAA8B,CAAC,CAAC,EAAE,EAAE,CAChD,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAA,oBAAO,EAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAA,oBAAO,EAAC,eAAe,CAAC,CAAA;IAEtD,MAAM,KAAK,GAAsB,IAAA,kBAAK,EAAC,mBAAM,EAAE,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE;QAC5D,MAAM,WAAW,GAAG,wBAAwB,CAAA;QAC5C,MAAM,SAAS,GACb,6GAA6G,CAAA;QAE/G,MAAM,UAAU,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;QACtC,IAAI,UAAU,KAAK,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACvC,OAAO,IAAA,oBAAO,EAAC,mBAAmB,CAAC,CAAA;QACrC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAChC,OAAO,IAAA,oBAAO,EAAC,8BAA8B,CAAC,CAAA;QAChD,OAAO,IAAA,oBAAO,EAAC,CAAC,CAAC,CAAA;IACnB,CAAC,CAAC,CAAA;IAEF,MAAM,MAAM,GAAG,IAAA,kBAAK,EAAC,mBAAM,EAAE,IAAA,oBAAO,EAAC,GAAG,CAAC,CAAC,CAAA;IAE1C,IAAiB,eAAe,CAG/B;IAHD,WAAiB,eAAe;QACjB,sBAAM,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,mBAAM,EAAE,CAAA;QAChC,qBAAK,GAAG,IAAA,mBAAM,EAAC,gBAAA,MAAM,CAAC,CAAA;IACrC,CAAC,EAHgB,eAAe,GAAf,mBAAe,KAAf,mBAAe,QAG/B;IAED,IAAiB,WAAW,CAK3B;IALD,WAAiB,WAAW;QACb,iBAAK,GAAG,IAAA,mBAAM,EAAC;YAC1B,MAAM;YACN,MAAM,EAAE,IAAA,kBAAK,EAAC,mBAAM,EAAE,iBAAI,EAAE,4BAAe,CAAC;SAC7C,CAAC,CAAA;IACJ,CAAC,EALgB,WAAW,GAAX,eAAW,KAAX,eAAW,QAK3B;IAED,IAAiB,mBAAmB,CAInC;IAJD,WAAiB,mBAAmB;QACrB,yBAAK,GAAG,IAAA,mBAAM,EAAC;YAC1B,MAAM,EAAE,IAAA,kBAAK,EAAC,mBAAM,EAAE,iBAAI,EAAE,4BAAe,CAAC;SAC7C,CAAC,CAAA;IACJ,CAAC,EAJgB,mBAAmB,GAAnB,uBAAmB,KAAnB,uBAAmB,QAInC;AACH,CAAC,EAzCgB,GAAG,GAAH,WAAG,KAAH,WAAG,QAyCnB","sourcesContent":["import {\n  bounded,\n  chain,\n  failure,\n  json,\n  JSONGuard,\n  object,\n  string,\n  success,\n} from 'json-guard'\nimport { planParamsGuard } from './PlanParams/PlanParams'\n\nexport namespace API {\n  const trimmed: JSONGuard<string, string> = (x) =>\n    x.trim().length === x.length\n      ? success(x)\n      : failure('String is not trimmed.')\n\n  const nonEmpty: JSONGuard<string, string> = (x) =>\n    x.length > 0 ? success(x) : failure('Empty string.')\n\n  const email: JSONGuard<string> = chain(string, trimmed, (x) => {\n    const EMAIL_REGEX = /^[^@]+@([^@]+\\.[^@]+)$/\n    const DNS_REGEX =\n      /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$/\n\n    const emailMatch = EMAIL_REGEX.exec(x)\n    if (emailMatch === null || !emailMatch[1])\n      return failure('Email is invalid.')\n    if (!DNS_REGEX.test(emailMatch[1]))\n      return failure('DNS part of email is invalid')\n    return success(x)\n  })\n\n  const userId = chain(string, bounded(100))\n\n  export namespace SendSignInEmail {\n    export const guards = { email, dest: string }\n    export const check = object(guards)\n  }\n\n  export namespace SetUserPlan {\n    export const check = object({\n      userId,\n      params: chain(string, json, planParamsGuard),\n    })\n  }\n\n  export namespace CreateLinkBasedPlan {\n    export const check = object({\n      params: chain(string, json, planParamsGuard),\n    })\n  }\n}\n"]}