{"version":3,"file":"jsonguard.js","sourceRoot":"","sources":["../src/jsonguard.ts"],"names":[],"mappings":"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","sourcesContent":["import _ from 'lodash'\n\nexport type JSONTest<To extends From, From = unknown> = (x: From) => x is To\n\nexport type JSONGuardResult<To> =\n  | { error: false; value: To }\n  | { error: true; message: string }\n\nexport type JSONGuard<To extends From, From = unknown> = (\n  x: From,\n) => JSONGuardResult<To>\n\nexport type JSONGuardConstructor<Options, To extends From, From = unknown> = (\n  options: Options,\n) => JSONGuard<To, From>\n\nconst succeed = <To>(value: To) => ({ error: false as const, value })\nconst fail = (message: string) => ({ error: true as const, message })\n\nexport function chain<T0, T1 extends T0, T2 extends T1>(\n  ...tests: [JSONGuard<T1, T0>, JSONGuard<T2, T1>]\n): JSONGuard<T2, T0>\nexport function chain<T0, T1 extends T0, T2 extends T1, T3 extends T2>(\n  ...tests: [JSONGuard<T1, T0>, JSONGuard<T2, T1>, JSONGuard<T3, T2>]\n): JSONGuard<T3, T0>\nexport function chain<T0, T1 extends T0, T2 extends T1, T3 extends T2>(\n  ...tests: [JSONGuard<T1, T0>, JSONGuard<T2, T1>, JSONGuard<T3, T2>]\n): JSONGuard<T3, T0>\nexport function chain<\n  T0,\n  T1 extends T0,\n  T2 extends T1,\n  T3 extends T2,\n  T4 extends T3,\n>(\n  ...tests: [\n    JSONGuard<T1, T0>,\n    JSONGuard<T2, T1>,\n    JSONGuard<T3, T2>,\n    JSONGuard<T4, T3>,\n  ]\n): JSONGuard<T4, T0>\nexport function chain(...guards: JSONGuard<unknown>[]) {\n  return (x: unknown) => {\n    let value: unknown = x\n    for (const guard of guards) {\n      const currResult = guard(value)\n      if (currResult.error) return currResult\n      value = currResult.value\n    }\n    return succeed(value)\n  }\n}\n\ntype MapType<Type> = {\n  [Property in keyof Type]: Type[Property] extends (x: unknown) => infer U\n    ? U\n    : never\n}\n\nexport const object =\n  <O extends Record<string, JSONGuard<unknown>>>(tests: O) =>\n  (x: unknown): JSONGuardResult<MapType<O>> => {\n    if (!_.isObject(x) || _.isArray(x) || _.isFunction(x))\n      return fail('Not an object.')\n    const missingKeys = _.difference(_.keys(tests), _.keys(x))\n    if (missingKeys.length > 0) {\n      fail(\n        `Missing ${\n          missingKeys.length === 1 ? 'property' : 'properties'\n        } ${missingKeys.join(', ')}.`,\n      )\n    }\n    const xObj = x as Record<string, unknown>\n    let error = null\n    const result = _.mapValues(tests, (guard, key) => {\n      const currResult = guard(xObj[key])\n      if (currResult.error) {\n        error = `${key}: ${currResult.message}`\n      }\n      return undefined\n    })\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return, @typescript-eslint/no-explicit-any\n    return error ? fail(error) : (succeed(result) as unknown as any)\n  }\n\nconst boolean: JSONGuard<boolean> = (x: unknown) =>\n  typeof x === 'boolean' ? succeed(x) : fail('Not a boolean.')\n\nconst number: JSONGuard<number> = (x: unknown) =>\n  typeof x === 'number' ? succeed(x) : fail('Not a number.')\n\nconst string: JSONGuard<string> = (x: unknown) =>\n  typeof x === 'string' ? succeed(x) : fail('Not a string.')\n\nconst constant =\n  <T>(c: T): JSONGuard<T> =>\n  (x: unknown) =>\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    x === c ? succeed(x as T) : fail(`Not ${c}.`)\n\nconst email = chain(string, (x) => {\n  const EMAIL_REGEX = /^[^@]+@([^@]+\\.[^@]+)$/\n  const DNS_REGEX =\n    /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$/\n\n  const emailMatch = EMAIL_REGEX.exec(x)\n  if (emailMatch === null || !emailMatch[1]) return fail('Email is invalid.')\n  if (!DNS_REGEX.test(emailMatch[1]))\n    return fail('DNS part of email is invalid')\n  return succeed(x)\n})\n\nexport default {\n  boolean,\n  number,\n  string,\n  constant,\n  email,\n  chain,\n}\n"]}